# ex: set ro:
# DO NOT EDIT.
# generated by smc (http://smc.sourceforge.net/)
# from file : Lab1.sm

import statemap


class Name_checkerState(statemap.State):

    def Entry(self, fsm):
        pass

    def Exit(self, fsm):
        pass

    def end(self, fsm):
        self.Default(fsm)

    def get_header(self, fsm, h):
        self.Default(fsm)

    def get_name(self, fsm):
        self.Default(fsm)

    def get_pass(self, fsm):
        self.Default(fsm)

    def get_port(self, fsm):
        self.Default(fsm)

    def Default(self, fsm):
        msg = "\n\tState: %s\n\tTransition: %s" % (
            fsm.getState().getName(), fsm.getTransition())
        raise statemap.TransitionUndefinedException(msg)

class NameMap_Default(Name_checkerState):
    pass

class NameMap_Start(NameMap_Default):

    def end(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(NameMap.ERROR)
        fsm.getState().Entry(fsm)


    def get_header(self, fsm, h):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.remember(h)
        finally:
            fsm.setState(NameMap.Header)
            fsm.getState().Entry(fsm)


    def get_name(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(NameMap.ERROR)
        fsm.getState().Entry(fsm)


    def get_pass(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(NameMap.ERROR)
        fsm.getState().Entry(fsm)


    def get_port(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(NameMap.ERROR)
        fsm.getState().Entry(fsm)


class NameMap_Header(NameMap_Default):

    def end(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(NameMap.OK)
        fsm.getState().Entry(fsm)


    def get_header(self, fsm, h):
        fsm.getState().Exit(fsm)
        fsm.setState(NameMap.ERROR)
        fsm.getState().Entry(fsm)


    def get_name(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(NameMap.ERROR)
        fsm.getState().Entry(fsm)


    def get_pass(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(NameMap.ERROR)
        fsm.getState().Entry(fsm)


    def get_port(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(NameMap.Port)
        fsm.getState().Entry(fsm)


class NameMap_Port(NameMap_Default):

    def end(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(NameMap.OK)
        fsm.getState().Entry(fsm)


    def get_header(self, fsm, h):
        fsm.getState().Exit(fsm)
        fsm.setState(NameMap.ERROR)
        fsm.getState().Entry(fsm)


    def get_name(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(NameMap.Name)
        fsm.getState().Entry(fsm)


    def get_pass(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(NameMap.ERROR)
        fsm.getState().Entry(fsm)


    def get_port(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(NameMap.ERROR)
        fsm.getState().Entry(fsm)


class NameMap_Name(NameMap_Default):

    def end(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(NameMap.OK)
        fsm.getState().Entry(fsm)


    def get_header(self, fsm, h):
        fsm.getState().Exit(fsm)
        fsm.setState(NameMap.ERROR)
        fsm.getState().Entry(fsm)


    def get_name(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(NameMap.ERROR)
        fsm.getState().Entry(fsm)


    def get_pass(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(NameMap.Pass)
        fsm.getState().Entry(fsm)


    def get_port(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(NameMap.ERROR)
        fsm.getState().Entry(fsm)


class NameMap_Pass(NameMap_Default):

    def end(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(NameMap.OK)
        fsm.getState().Entry(fsm)


    def get_header(self, fsm, h):
        fsm.getState().Exit(fsm)
        fsm.setState(NameMap.ERROR)
        fsm.getState().Entry(fsm)


    def get_name(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(NameMap.ERROR)
        fsm.getState().Entry(fsm)


    def get_pass(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(NameMap.ERROR)
        fsm.getState().Entry(fsm)


    def get_port(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(NameMap.ERROR)
        fsm.getState().Entry(fsm)


class NameMap_OK(NameMap_Default):

    def end(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(NameMap.ERROR)
        fsm.getState().Entry(fsm)


class NameMap_ERROR(NameMap_Default):

    def end(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(NameMap.ERROR)
        fsm.getState().Entry(fsm)


    def get_header(self, fsm, h):
        fsm.getState().Exit(fsm)
        fsm.setState(NameMap.ERROR)
        fsm.getState().Entry(fsm)


    def get_name(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(NameMap.ERROR)
        fsm.getState().Entry(fsm)


    def get_pass(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(NameMap.ERROR)
        fsm.getState().Entry(fsm)


    def get_port(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(NameMap.ERROR)
        fsm.getState().Entry(fsm)


class NameMap(object):

    Start = NameMap_Start('NameMap.Start', 0)
    Header = NameMap_Header('NameMap.Header', 1)
    Port = NameMap_Port('NameMap.Port', 2)
    Name = NameMap_Name('NameMap.Name', 3)
    Pass = NameMap_Pass('NameMap.Pass', 4)
    OK = NameMap_OK('NameMap.OK', 5)
    ERROR = NameMap_ERROR('NameMap.ERROR', 6)
    Default = NameMap_Default('NameMap.Default', -1)

class Name_checker_sm(statemap.FSMContext):

    def __init__(self, owner):
        statemap.FSMContext.__init__(self, NameMap.Start)
        self._owner = owner

    def __getattr__(self, attrib):
        def trans_sm(*arglist):
            self._transition = attrib
            getattr(self.getState(), attrib)(self, *arglist)
            self._transition = None
        return trans_sm

    def enterStartState(self):
        self._state.Entry(self)

    def getOwner(self):
        return self._owner

# Local variables:
#  buffer-read-only: t
# End:
