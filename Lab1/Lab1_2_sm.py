# ex: set ro:
# DO NOT EDIT.
# generated by smc (http://smc.sourceforge.net/)
# from file : Lab1_2.sm

import statemap


class Name_checkerState(statemap.State):

    def Entry(self, fsm):
        pass

    def Exit(self, fsm):
        pass

    def char(self, fsm, s):
        self.Default(fsm)

    def char_digit(self, fsm):
        self.Default(fsm)

    def digit(self, fsm):
        self.Default(fsm)

    def digit(self, fsm, s):
        self.Default(fsm)

    def dots(self, fsm):
        self.Default(fsm)

    def dots(self, fsm, s):
        self.Default(fsm)

    def end(self, fsm):
        self.Default(fsm)

    def error(self, fsm):
        self.Default(fsm)

    def q_s(self, fsm):
        self.Default(fsm)

    def q_s(self, fsm, s):
        self.Default(fsm)

    def slash(self, fsm):
        self.Default(fsm)

    def symbol(self, fsm):
        self.Default(fsm)

    def Default(self, fsm):
        msg = "\n\tState: %s\n\tTransition: %s" % (
            fsm.getState().getName(), fsm.getTransition())
        raise statemap.TransitionUndefinedException(msg)

class NameMap_Default(Name_checkerState):

    def symbol(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(NameMap.ERROR)
        fsm.getState().Entry(fsm)


    def slash(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(NameMap.ERROR)
        fsm.getState().Entry(fsm)


    def char_digit(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(NameMap.ERROR)
        fsm.getState().Entry(fsm)


    def digit(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(NameMap.ERROR)
        fsm.getState().Entry(fsm)


    def dots(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(NameMap.ERROR)
        fsm.getState().Entry(fsm)


    def q_s(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(NameMap.ERROR)
        fsm.getState().Entry(fsm)


    def error(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(NameMap.ERROR)
        fsm.getState().Entry(fsm)


    def end(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(NameMap.ERROR)
        fsm.getState().Entry(fsm)


class NameMap_Start(NameMap_Default):

    def char(self, fsm, s):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.add_buffer(s)
        finally:
            fsm.setState(NameMap.header)
            fsm.getState().Entry(fsm)


    def digit(self, fsm, s):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.add_buffer(s)
        finally:
            fsm.setState(NameMap.header)
            fsm.getState().Entry(fsm)


class NameMap_header(NameMap_Default):

    def char(self, fsm, s):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.add_buffer(s)
        finally:
            fsm.setState(NameMap.header)
            fsm.getState().Entry(fsm)


    def digit(self, fsm, s):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.add_buffer(s)
        finally:
            fsm.setState(NameMap.header)
            fsm.getState().Entry(fsm)


    def dots(self, fsm, s):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.add_buffer(s)
        finally:
            fsm.setState(NameMap.header)
            fsm.getState().Entry(fsm)


    def q_s(self, fsm, s):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.add_buffer(s)
        finally:
            fsm.setState(NameMap.header)
            fsm.getState().Entry(fsm)


    def slash(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(NameMap.end_header)
        fsm.getState().Entry(fsm)


class NameMap_end_header(NameMap_Default):

    def slash(self, fsm):
        ctxt = fsm.getOwner()
        if ctxt.check_header() :
            fsm.getState().Exit(fsm)
            fsm.clearState()
            try:
                ctxt.clear_buffer()
            finally:
                fsm.setState(NameMap.serv_start)
                fsm.getState().Entry(fsm)
        else:
            NameMap_Default.slash(self, fsm)
        
class NameMap_serv_start(NameMap_Default):

    def char(self, fsm, s):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.add_char_serv(s)
        finally:
            fsm.setState(NameMap.serv)
            fsm.getState().Entry(fsm)


    def digit(self, fsm, s):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.add_char_serv(s)
        finally:
            fsm.setState(NameMap.serv)
            fsm.getState().Entry(fsm)


class NameMap_serv(NameMap_Default):

    def char(self, fsm, s):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.add_char_serv(s)
        finally:
            fsm.setState(NameMap.serv)
            fsm.getState().Entry(fsm)


    def digit(self, fsm, s):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.add_char_serv(s)
        finally:
            fsm.setState(NameMap.serv)
            fsm.getState().Entry(fsm)


    def dots(self, fsm, s):
        fsm.getState().Exit(fsm)
        fsm.setState(NameMap.port_start)
        fsm.getState().Entry(fsm)


    def end(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(NameMap.OK)
        fsm.getState().Entry(fsm)


class NameMap_port_start(NameMap_Default):

    def digit(self, fsm, s):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.add_buffer(s)
        finally:
            fsm.setState(NameMap.port)
            fsm.getState().Entry(fsm)


class NameMap_port(NameMap_Default):

    def digit(self, fsm, s):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.add_buffer(s)
        finally:
            fsm.setState(NameMap.port)
            fsm.getState().Entry(fsm)


    def end(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(NameMap.OK)
        fsm.getState().Entry(fsm)


    def slash(self, fsm):
        ctxt = fsm.getOwner()
        if ctxt.check_port() :
            fsm.getState().Exit(fsm)
            fsm.clearState()
            try:
                ctxt.clear_buffer()
            finally:
                fsm.setState(NameMap.start_name)
                fsm.getState().Entry(fsm)
        else:
            NameMap_Default.slash(self, fsm)
        
class NameMap_start_name(NameMap_Default):

    def char(self, fsm, s):
        fsm.getState().Exit(fsm)
        fsm.setState(NameMap.name)
        fsm.getState().Entry(fsm)


    def digit(self, fsm, s):
        fsm.getState().Exit(fsm)
        fsm.setState(NameMap.name)
        fsm.getState().Entry(fsm)


class NameMap_name(NameMap_Default):

    def char(self, fsm, s):
        fsm.getState().Exit(fsm)
        fsm.setState(NameMap.name)
        fsm.getState().Entry(fsm)


    def digit(self, fsm, s):
        fsm.getState().Exit(fsm)
        fsm.setState(NameMap.name)
        fsm.getState().Entry(fsm)


    def end(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(NameMap.OK)
        fsm.getState().Entry(fsm)


    def q_s(self, fsm, s):
        fsm.getState().Exit(fsm)
        fsm.setState(NameMap.pass_start)
        fsm.getState().Entry(fsm)


class NameMap_pass_start(NameMap_Default):

    def char(self, fsm, s):
        fsm.getState().Exit(fsm)
        fsm.setState(NameMap.password)
        fsm.getState().Entry(fsm)


    def digit(self, fsm, s):
        fsm.getState().Exit(fsm)
        fsm.setState(NameMap.password)
        fsm.getState().Entry(fsm)


class NameMap_password(NameMap_Default):

    def char(self, fsm, s):
        fsm.getState().Exit(fsm)
        fsm.setState(NameMap.password)
        fsm.getState().Entry(fsm)


    def digit(self, fsm, s):
        fsm.getState().Exit(fsm)
        fsm.setState(NameMap.password)
        fsm.getState().Entry(fsm)


    def end(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(NameMap.OK)
        fsm.getState().Entry(fsm)


class NameMap_OK(NameMap_Default):
    pass

class NameMap_ERROR(NameMap_Default):
    pass

class NameMap(object):

    Start = NameMap_Start('NameMap.Start', 0)
    header = NameMap_header('NameMap.header', 1)
    end_header = NameMap_end_header('NameMap.end_header', 2)
    serv_start = NameMap_serv_start('NameMap.serv_start', 3)
    serv = NameMap_serv('NameMap.serv', 4)
    port_start = NameMap_port_start('NameMap.port_start', 5)
    port = NameMap_port('NameMap.port', 6)
    start_name = NameMap_start_name('NameMap.start_name', 7)
    name = NameMap_name('NameMap.name', 8)
    pass_start = NameMap_pass_start('NameMap.pass_start', 9)
    password = NameMap_password('NameMap.password', 10)
    OK = NameMap_OK('NameMap.OK', 11)
    ERROR = NameMap_ERROR('NameMap.ERROR', 12)
    Default = NameMap_Default('NameMap.Default', -1)

class Name_checker_sm(statemap.FSMContext):

    def __init__(self, owner):
        statemap.FSMContext.__init__(self, NameMap.Start)
        self._owner = owner

    def __getattr__(self, attrib):
        def trans_sm(*arglist):
            self._transition = attrib
            getattr(self.getState(), attrib)(self, *arglist)
            self._transition = None
        return trans_sm

    def enterStartState(self):
        self._state.Entry(self)

    def getOwner(self):
        return self._owner

# Local variables:
#  buffer-read-only: t
# End:
