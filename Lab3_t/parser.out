Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> prog
Rule 1     prog -> prog line es
Rule 2     prog -> prog fdecl es
Rule 3     prog -> <empty>
Rule 4     es -> es es
Rule 5     es -> ES
Rule 6     line -> sent
Rule 7     line -> logic
Rule 8     line -> fcall
Rule 9     line -> group
Rule 10    line -> decl
Rule 11    line -> cdecl
Rule 12    line -> <empty>
Rule 13    sent -> ID EQ expr
Rule 14    sent -> EXTEND1 ID expr
Rule 15    sent -> EXTEND2 ID expr expr
Rule 16    sent -> expr
Rule 17    sent -> UNDO
Rule 18    group -> FOPEN lines line FCLOSE
Rule 19    group -> FOPEN lines FCLOSE
Rule 20    lines -> lines line es
Rule 21    lines -> <empty>
Rule 22    decl -> 2ldecl
Rule 23    decl -> 2adecl
Rule 24    decl -> 1ldecl
Rule 25    decl -> 1adecl
Rule 26    decl -> lvdecl
Rule 27    decl -> avdecl
Rule 28    cdecl -> cldecl
Rule 29    cdecl -> cadecl
Rule 30    cldecl -> CLVAR ID EQ expr
Rule 31    cadecl -> CAVAR ID EQ expr
Rule 32    lvdecl -> LVAR ID
Rule 33    lvdecl -> LVAR ID EQ expr
Rule 34    avdecl -> AVAR ID
Rule 35    avdecl -> AVAR ID EQ expr
Rule 36    1ldecl -> L1ARR ID
Rule 37    1ldecl -> L1ARR ID EQ SOPEN vals SCLOSE
Rule 38    1adecl -> A1ARR ID
Rule 39    1adecl -> A1ARR ID EQ SOPEN vals SCLOSE
Rule 40    2ldecl -> L2ARR ID
Rule 41    2ldecl -> L2ARR ID EQ SOPEN arrs SCLOSE
Rule 42    2adecl -> A2ARR ID
Rule 43    2adecl -> A2ARR ID EQ SOPEN arrs SCLOSE
Rule 44    vals -> expr COMA vals
Rule 45    vals -> expr
Rule 46    arrs -> vals COMD arrs
Rule 47    arrs -> COMD arrs
Rule 48    arrs -> vals
Rule 49    arrs -> <empty>
Rule 50    fdecl -> fovars FUNCTION ID fivars group
Rule 51    fovars -> ID EQ expr
Rule 52    fovars -> SOPEN fvars SCLOSE
Rule 53    fivars -> OPEN fvars CLOSE
Rule 54    fvars -> ID EQ expr
Rule 55    fvars -> ID EQ expr COMA fvars
Rule 56    fvars -> <empty>
Rule 57    expr -> oper
Rule 58    expr -> ACONST
Rule 59    expr -> LCONST
Rule 60    expr -> ID
Rule 61    expr -> INCDEC ID
Rule 62    expr -> NOT expr
Rule 63    expr -> expr GTLT expr
Rule 64    expr -> expr OR expr
Rule 65    expr -> OPEN expr CLOSE
Rule 66    oper -> MOVE
Rule 67    oper -> GET
Rule 68    oper -> PUSH
Rule 69    oper -> SIZE1 ID
Rule 70    oper -> SIZE2 ID expr
Rule 71    oper -> ID OPEN expr COMA expr CLOSE
Rule 72    oper -> ID OPEN expr CLOSE
Rule 73    logic -> cond
Rule 74    logic -> loop
Rule 75    cond -> IF expr sent else
Rule 76    cond -> IF expr group else
Rule 77    else -> ELSE sent
Rule 78    else -> ELSE group
Rule 79    else -> <empty>
Rule 80    loop -> WHILE expr DO sent
Rule 81    loop -> WHILE expr DO group
Rule 82    fcall -> SOPEN vars SCLOSE EQ ID OPEN pars CLOSE
Rule 83    vars -> ID COMA vars
Rule 84    vars -> COMA vars
Rule 85    vars -> ID
Rule 86    vars -> <empty>
Rule 87    pars -> expr COMA pars
Rule 88    pars -> COMA pars
Rule 89    pars -> expr
Rule 90    pars -> <empty>

Terminals, with rules where they appear

A1ARR                : 38 39
A2ARR                : 42 43
ACONST               : 58
AVAR                 : 34 35
CAVAR                : 31
CLOSE                : 53 65 71 72 82
CLVAR                : 30
COMA                 : 44 55 71 83 84 87 88
COMD                 : 46 47
DO                   : 80 81
ELSE                 : 77 78
EQ                   : 13 30 31 33 35 37 39 41 43 51 54 55 82
ES                   : 5
EXTEND1              : 14
EXTEND2              : 15
FCLOSE               : 18 19
FOPEN                : 18 19
FUNCTION             : 50
GET                  : 67
GTLT                 : 63
ID                   : 13 14 15 30 31 32 33 34 35 36 37 38 39 40 41 42 43 50 51 54 55 60 61 69 70 71 72 82 83 85
IF                   : 75 76
INCDEC               : 61
L1ARR                : 36 37
L2ARR                : 40 41
LCONST               : 59
LVAR                 : 32 33
MOVE                 : 66
NOT                  : 62
OPEN                 : 53 65 71 72 82
OR                   : 64
PUSH                 : 68
SCLOSE               : 37 39 41 43 52 82
SIZE1                : 69
SIZE2                : 70
SOPEN                : 37 39 41 43 52 82
UNDO                 : 17
WHILE                : 80 81
error                : 

Nonterminals, with rules where they appear

1adecl               : 25
1ldecl               : 24
2adecl               : 23
2ldecl               : 22
arrs                 : 41 43 46 47
avdecl               : 27
cadecl               : 29
cdecl                : 11
cldecl               : 28
cond                 : 73
decl                 : 10
else                 : 75 76
es                   : 1 2 4 4 20
expr                 : 13 14 15 15 16 30 31 33 35 44 45 51 54 55 62 63 63 64 64 65 70 71 71 72 75 76 80 81 87 89
fcall                : 8
fdecl                : 2
fivars               : 50
fovars               : 50
fvars                : 52 53 55
group                : 9 50 76 78 81
line                 : 1 18 20
lines                : 18 19 20
logic                : 7
loop                 : 74
lvdecl               : 26
oper                 : 57
pars                 : 82 87 88
prog                 : 1 2 0
sent                 : 6 75 77 80
vals                 : 37 39 44 46 48
vars                 : 82 83 84

Parsing method: LALR

state 0

    (0) S' -> . prog
    (1) prog -> . prog line es
    (2) prog -> . prog fdecl es
    (3) prog -> .

    ID              reduce using rule 3 (prog -> .)
    EXTEND1         reduce using rule 3 (prog -> .)
    EXTEND2         reduce using rule 3 (prog -> .)
    UNDO            reduce using rule 3 (prog -> .)
    SOPEN           reduce using rule 3 (prog -> .)
    FOPEN           reduce using rule 3 (prog -> .)
    ACONST          reduce using rule 3 (prog -> .)
    LCONST          reduce using rule 3 (prog -> .)
    INCDEC          reduce using rule 3 (prog -> .)
    NOT             reduce using rule 3 (prog -> .)
    OPEN            reduce using rule 3 (prog -> .)
    IF              reduce using rule 3 (prog -> .)
    WHILE           reduce using rule 3 (prog -> .)
    L2ARR           reduce using rule 3 (prog -> .)
    A2ARR           reduce using rule 3 (prog -> .)
    L1ARR           reduce using rule 3 (prog -> .)
    A1ARR           reduce using rule 3 (prog -> .)
    LVAR            reduce using rule 3 (prog -> .)
    AVAR            reduce using rule 3 (prog -> .)
    CLVAR           reduce using rule 3 (prog -> .)
    CAVAR           reduce using rule 3 (prog -> .)
    MOVE            reduce using rule 3 (prog -> .)
    GET             reduce using rule 3 (prog -> .)
    PUSH            reduce using rule 3 (prog -> .)
    SIZE1           reduce using rule 3 (prog -> .)
    SIZE2           reduce using rule 3 (prog -> .)
    $end            reduce using rule 3 (prog -> .)
    ES              reduce using rule 3 (prog -> .)

    prog                           shift and go to state 1

state 1

    (0) S' -> prog .
    (1) prog -> prog . line es
    (2) prog -> prog . fdecl es
    (6) line -> . sent
    (7) line -> . logic
    (8) line -> . fcall
    (9) line -> . group
    (10) line -> . decl
    (11) line -> . cdecl
    (12) line -> .
    (50) fdecl -> . fovars FUNCTION ID fivars group
    (13) sent -> . ID EQ expr
    (14) sent -> . EXTEND1 ID expr
    (15) sent -> . EXTEND2 ID expr expr
    (16) sent -> . expr
    (17) sent -> . UNDO
    (73) logic -> . cond
    (74) logic -> . loop
    (82) fcall -> . SOPEN vars SCLOSE EQ ID OPEN pars CLOSE
    (18) group -> . FOPEN lines line FCLOSE
    (19) group -> . FOPEN lines FCLOSE
    (22) decl -> . 2ldecl
    (23) decl -> . 2adecl
    (24) decl -> . 1ldecl
    (25) decl -> . 1adecl
    (26) decl -> . lvdecl
    (27) decl -> . avdecl
    (28) cdecl -> . cldecl
    (29) cdecl -> . cadecl
    (51) fovars -> . ID EQ expr
    (52) fovars -> . SOPEN fvars SCLOSE
    (57) expr -> . oper
    (58) expr -> . ACONST
    (59) expr -> . LCONST
    (60) expr -> . ID
    (61) expr -> . INCDEC ID
    (62) expr -> . NOT expr
    (63) expr -> . expr GTLT expr
    (64) expr -> . expr OR expr
    (65) expr -> . OPEN expr CLOSE
    (75) cond -> . IF expr sent else
    (76) cond -> . IF expr group else
    (80) loop -> . WHILE expr DO sent
    (81) loop -> . WHILE expr DO group
    (40) 2ldecl -> . L2ARR ID
    (41) 2ldecl -> . L2ARR ID EQ SOPEN arrs SCLOSE
    (42) 2adecl -> . A2ARR ID
    (43) 2adecl -> . A2ARR ID EQ SOPEN arrs SCLOSE
    (36) 1ldecl -> . L1ARR ID
    (37) 1ldecl -> . L1ARR ID EQ SOPEN vals SCLOSE
    (38) 1adecl -> . A1ARR ID
    (39) 1adecl -> . A1ARR ID EQ SOPEN vals SCLOSE
    (32) lvdecl -> . LVAR ID
    (33) lvdecl -> . LVAR ID EQ expr
    (34) avdecl -> . AVAR ID
    (35) avdecl -> . AVAR ID EQ expr
    (30) cldecl -> . CLVAR ID EQ expr
    (31) cadecl -> . CAVAR ID EQ expr
    (66) oper -> . MOVE
    (67) oper -> . GET
    (68) oper -> . PUSH
    (69) oper -> . SIZE1 ID
    (70) oper -> . SIZE2 ID expr
    (71) oper -> . ID OPEN expr COMA expr CLOSE
    (72) oper -> . ID OPEN expr CLOSE

    ES              reduce using rule 12 (line -> .)
    ID              shift and go to state 11
    EXTEND1         shift and go to state 13
    EXTEND2         shift and go to state 14
    UNDO            shift and go to state 15
    SOPEN           shift and go to state 18
    FOPEN           shift and go to state 20
    ACONST          shift and go to state 30
    LCONST          shift and go to state 31
    INCDEC          shift and go to state 32
    NOT             shift and go to state 33
    OPEN            shift and go to state 19
    IF              shift and go to state 34
    WHILE           shift and go to state 35
    L2ARR           shift and go to state 36
    A2ARR           shift and go to state 37
    L1ARR           shift and go to state 38
    A1ARR           shift and go to state 39
    LVAR            shift and go to state 40
    AVAR            shift and go to state 41
    CLVAR           shift and go to state 42
    CAVAR           shift and go to state 43
    MOVE            shift and go to state 44
    GET             shift and go to state 45
    PUSH            shift and go to state 46
    SIZE1           shift and go to state 47
    SIZE2           shift and go to state 48

    line                           shift and go to state 2
    fdecl                          shift and go to state 3
    sent                           shift and go to state 4
    logic                          shift and go to state 5
    fcall                          shift and go to state 6
    group                          shift and go to state 7
    decl                           shift and go to state 8
    cdecl                          shift and go to state 9
    fovars                         shift and go to state 10
    expr                           shift and go to state 12
    cond                           shift and go to state 16
    loop                           shift and go to state 17
    2ldecl                         shift and go to state 21
    2adecl                         shift and go to state 22
    1ldecl                         shift and go to state 23
    1adecl                         shift and go to state 24
    lvdecl                         shift and go to state 25
    avdecl                         shift and go to state 26
    cldecl                         shift and go to state 27
    cadecl                         shift and go to state 28
    oper                           shift and go to state 29

state 2

    (1) prog -> prog line . es
    (4) es -> . es es
    (5) es -> . ES

    ES              shift and go to state 50

    es                             shift and go to state 49

state 3

    (2) prog -> prog fdecl . es
    (4) es -> . es es
    (5) es -> . ES

    ES              shift and go to state 50

    es                             shift and go to state 51

state 4

    (6) line -> sent .

    ES              reduce using rule 6 (line -> sent .)
    FCLOSE          reduce using rule 6 (line -> sent .)


state 5

    (7) line -> logic .

    ES              reduce using rule 7 (line -> logic .)
    FCLOSE          reduce using rule 7 (line -> logic .)


state 6

    (8) line -> fcall .

    ES              reduce using rule 8 (line -> fcall .)
    FCLOSE          reduce using rule 8 (line -> fcall .)


state 7

    (9) line -> group .

    ES              reduce using rule 9 (line -> group .)
    FCLOSE          reduce using rule 9 (line -> group .)


state 8

    (10) line -> decl .

    ES              reduce using rule 10 (line -> decl .)
    FCLOSE          reduce using rule 10 (line -> decl .)


state 9

    (11) line -> cdecl .

    ES              reduce using rule 11 (line -> cdecl .)
    FCLOSE          reduce using rule 11 (line -> cdecl .)


state 10

    (50) fdecl -> fovars . FUNCTION ID fivars group

    FUNCTION        shift and go to state 52


state 11

    (13) sent -> ID . EQ expr
    (51) fovars -> ID . EQ expr
    (60) expr -> ID .
    (71) oper -> ID . OPEN expr COMA expr CLOSE
    (72) oper -> ID . OPEN expr CLOSE

    EQ              shift and go to state 53
    GTLT            reduce using rule 60 (expr -> ID .)
    OR              reduce using rule 60 (expr -> ID .)
    ES              reduce using rule 60 (expr -> ID .)
    OPEN            shift and go to state 54


state 12

    (16) sent -> expr .
    (63) expr -> expr . GTLT expr
    (64) expr -> expr . OR expr

    ES              reduce using rule 16 (sent -> expr .)
    FCLOSE          reduce using rule 16 (sent -> expr .)
    ELSE            reduce using rule 16 (sent -> expr .)
    GTLT            shift and go to state 55
    OR              shift and go to state 56


state 13

    (14) sent -> EXTEND1 . ID expr

    ID              shift and go to state 57


state 14

    (15) sent -> EXTEND2 . ID expr expr

    ID              shift and go to state 58


state 15

    (17) sent -> UNDO .

    ES              reduce using rule 17 (sent -> UNDO .)
    FCLOSE          reduce using rule 17 (sent -> UNDO .)
    ELSE            reduce using rule 17 (sent -> UNDO .)


state 16

    (73) logic -> cond .

    ES              reduce using rule 73 (logic -> cond .)
    FCLOSE          reduce using rule 73 (logic -> cond .)


state 17

    (74) logic -> loop .

    ES              reduce using rule 74 (logic -> loop .)
    FCLOSE          reduce using rule 74 (logic -> loop .)


state 18

    (82) fcall -> SOPEN . vars SCLOSE EQ ID OPEN pars CLOSE
    (52) fovars -> SOPEN . fvars SCLOSE
    (83) vars -> . ID COMA vars
    (84) vars -> . COMA vars
    (85) vars -> . ID
    (86) vars -> .
    (54) fvars -> . ID EQ expr
    (55) fvars -> . ID EQ expr COMA fvars
    (56) fvars -> .

  ! reduce/reduce conflict for SCLOSE resolved using rule 56 (fvars -> .)
    ID              shift and go to state 60
    COMA            shift and go to state 62
    SCLOSE          reduce using rule 56 (fvars -> .)

  ! SCLOSE          [ reduce using rule 86 (vars -> .) ]

    vars                           shift and go to state 59
    fvars                          shift and go to state 61

state 19

    (65) expr -> OPEN . expr CLOSE
    (57) expr -> . oper
    (58) expr -> . ACONST
    (59) expr -> . LCONST
    (60) expr -> . ID
    (61) expr -> . INCDEC ID
    (62) expr -> . NOT expr
    (63) expr -> . expr GTLT expr
    (64) expr -> . expr OR expr
    (65) expr -> . OPEN expr CLOSE
    (66) oper -> . MOVE
    (67) oper -> . GET
    (68) oper -> . PUSH
    (69) oper -> . SIZE1 ID
    (70) oper -> . SIZE2 ID expr
    (71) oper -> . ID OPEN expr COMA expr CLOSE
    (72) oper -> . ID OPEN expr CLOSE

    ACONST          shift and go to state 30
    LCONST          shift and go to state 31
    ID              shift and go to state 64
    INCDEC          shift and go to state 32
    NOT             shift and go to state 33
    OPEN            shift and go to state 19
    MOVE            shift and go to state 44
    GET             shift and go to state 45
    PUSH            shift and go to state 46
    SIZE1           shift and go to state 47
    SIZE2           shift and go to state 48

    expr                           shift and go to state 63
    oper                           shift and go to state 29

state 20

    (18) group -> FOPEN . lines line FCLOSE
    (19) group -> FOPEN . lines FCLOSE
    (20) lines -> . lines line es
    (21) lines -> .

    FCLOSE          reduce using rule 21 (lines -> .)
    ID              reduce using rule 21 (lines -> .)
    EXTEND1         reduce using rule 21 (lines -> .)
    EXTEND2         reduce using rule 21 (lines -> .)
    UNDO            reduce using rule 21 (lines -> .)
    SOPEN           reduce using rule 21 (lines -> .)
    FOPEN           reduce using rule 21 (lines -> .)
    ACONST          reduce using rule 21 (lines -> .)
    LCONST          reduce using rule 21 (lines -> .)
    INCDEC          reduce using rule 21 (lines -> .)
    NOT             reduce using rule 21 (lines -> .)
    OPEN            reduce using rule 21 (lines -> .)
    IF              reduce using rule 21 (lines -> .)
    WHILE           reduce using rule 21 (lines -> .)
    L2ARR           reduce using rule 21 (lines -> .)
    A2ARR           reduce using rule 21 (lines -> .)
    L1ARR           reduce using rule 21 (lines -> .)
    A1ARR           reduce using rule 21 (lines -> .)
    LVAR            reduce using rule 21 (lines -> .)
    AVAR            reduce using rule 21 (lines -> .)
    CLVAR           reduce using rule 21 (lines -> .)
    CAVAR           reduce using rule 21 (lines -> .)
    MOVE            reduce using rule 21 (lines -> .)
    GET             reduce using rule 21 (lines -> .)
    PUSH            reduce using rule 21 (lines -> .)
    SIZE1           reduce using rule 21 (lines -> .)
    SIZE2           reduce using rule 21 (lines -> .)
    ES              reduce using rule 21 (lines -> .)

    lines                          shift and go to state 65

state 21

    (22) decl -> 2ldecl .

    ES              reduce using rule 22 (decl -> 2ldecl .)
    FCLOSE          reduce using rule 22 (decl -> 2ldecl .)


state 22

    (23) decl -> 2adecl .

    ES              reduce using rule 23 (decl -> 2adecl .)
    FCLOSE          reduce using rule 23 (decl -> 2adecl .)


state 23

    (24) decl -> 1ldecl .

    ES              reduce using rule 24 (decl -> 1ldecl .)
    FCLOSE          reduce using rule 24 (decl -> 1ldecl .)


state 24

    (25) decl -> 1adecl .

    ES              reduce using rule 25 (decl -> 1adecl .)
    FCLOSE          reduce using rule 25 (decl -> 1adecl .)


state 25

    (26) decl -> lvdecl .

    ES              reduce using rule 26 (decl -> lvdecl .)
    FCLOSE          reduce using rule 26 (decl -> lvdecl .)


state 26

    (27) decl -> avdecl .

    ES              reduce using rule 27 (decl -> avdecl .)
    FCLOSE          reduce using rule 27 (decl -> avdecl .)


state 27

    (28) cdecl -> cldecl .

    ES              reduce using rule 28 (cdecl -> cldecl .)
    FCLOSE          reduce using rule 28 (cdecl -> cldecl .)


state 28

    (29) cdecl -> cadecl .

    ES              reduce using rule 29 (cdecl -> cadecl .)
    FCLOSE          reduce using rule 29 (cdecl -> cadecl .)


state 29

    (57) expr -> oper .

    GTLT            reduce using rule 57 (expr -> oper .)
    OR              reduce using rule 57 (expr -> oper .)
    ES              reduce using rule 57 (expr -> oper .)
    CLOSE           reduce using rule 57 (expr -> oper .)
    ID              reduce using rule 57 (expr -> oper .)
    EXTEND1         reduce using rule 57 (expr -> oper .)
    EXTEND2         reduce using rule 57 (expr -> oper .)
    UNDO            reduce using rule 57 (expr -> oper .)
    FOPEN           reduce using rule 57 (expr -> oper .)
    ACONST          reduce using rule 57 (expr -> oper .)
    LCONST          reduce using rule 57 (expr -> oper .)
    INCDEC          reduce using rule 57 (expr -> oper .)
    NOT             reduce using rule 57 (expr -> oper .)
    OPEN            reduce using rule 57 (expr -> oper .)
    MOVE            reduce using rule 57 (expr -> oper .)
    GET             reduce using rule 57 (expr -> oper .)
    PUSH            reduce using rule 57 (expr -> oper .)
    SIZE1           reduce using rule 57 (expr -> oper .)
    SIZE2           reduce using rule 57 (expr -> oper .)
    DO              reduce using rule 57 (expr -> oper .)
    FUNCTION        reduce using rule 57 (expr -> oper .)
    COMA            reduce using rule 57 (expr -> oper .)
    FCLOSE          reduce using rule 57 (expr -> oper .)
    ELSE            reduce using rule 57 (expr -> oper .)
    SCLOSE          reduce using rule 57 (expr -> oper .)
    COMD            reduce using rule 57 (expr -> oper .)


state 30

    (58) expr -> ACONST .

    GTLT            reduce using rule 58 (expr -> ACONST .)
    OR              reduce using rule 58 (expr -> ACONST .)
    ES              reduce using rule 58 (expr -> ACONST .)
    CLOSE           reduce using rule 58 (expr -> ACONST .)
    ID              reduce using rule 58 (expr -> ACONST .)
    EXTEND1         reduce using rule 58 (expr -> ACONST .)
    EXTEND2         reduce using rule 58 (expr -> ACONST .)
    UNDO            reduce using rule 58 (expr -> ACONST .)
    FOPEN           reduce using rule 58 (expr -> ACONST .)
    ACONST          reduce using rule 58 (expr -> ACONST .)
    LCONST          reduce using rule 58 (expr -> ACONST .)
    INCDEC          reduce using rule 58 (expr -> ACONST .)
    NOT             reduce using rule 58 (expr -> ACONST .)
    OPEN            reduce using rule 58 (expr -> ACONST .)
    MOVE            reduce using rule 58 (expr -> ACONST .)
    GET             reduce using rule 58 (expr -> ACONST .)
    PUSH            reduce using rule 58 (expr -> ACONST .)
    SIZE1           reduce using rule 58 (expr -> ACONST .)
    SIZE2           reduce using rule 58 (expr -> ACONST .)
    DO              reduce using rule 58 (expr -> ACONST .)
    FUNCTION        reduce using rule 58 (expr -> ACONST .)
    COMA            reduce using rule 58 (expr -> ACONST .)
    FCLOSE          reduce using rule 58 (expr -> ACONST .)
    ELSE            reduce using rule 58 (expr -> ACONST .)
    SCLOSE          reduce using rule 58 (expr -> ACONST .)
    COMD            reduce using rule 58 (expr -> ACONST .)


state 31

    (59) expr -> LCONST .

    GTLT            reduce using rule 59 (expr -> LCONST .)
    OR              reduce using rule 59 (expr -> LCONST .)
    ES              reduce using rule 59 (expr -> LCONST .)
    CLOSE           reduce using rule 59 (expr -> LCONST .)
    ID              reduce using rule 59 (expr -> LCONST .)
    EXTEND1         reduce using rule 59 (expr -> LCONST .)
    EXTEND2         reduce using rule 59 (expr -> LCONST .)
    UNDO            reduce using rule 59 (expr -> LCONST .)
    FOPEN           reduce using rule 59 (expr -> LCONST .)
    ACONST          reduce using rule 59 (expr -> LCONST .)
    LCONST          reduce using rule 59 (expr -> LCONST .)
    INCDEC          reduce using rule 59 (expr -> LCONST .)
    NOT             reduce using rule 59 (expr -> LCONST .)
    OPEN            reduce using rule 59 (expr -> LCONST .)
    MOVE            reduce using rule 59 (expr -> LCONST .)
    GET             reduce using rule 59 (expr -> LCONST .)
    PUSH            reduce using rule 59 (expr -> LCONST .)
    SIZE1           reduce using rule 59 (expr -> LCONST .)
    SIZE2           reduce using rule 59 (expr -> LCONST .)
    DO              reduce using rule 59 (expr -> LCONST .)
    FUNCTION        reduce using rule 59 (expr -> LCONST .)
    COMA            reduce using rule 59 (expr -> LCONST .)
    FCLOSE          reduce using rule 59 (expr -> LCONST .)
    ELSE            reduce using rule 59 (expr -> LCONST .)
    SCLOSE          reduce using rule 59 (expr -> LCONST .)
    COMD            reduce using rule 59 (expr -> LCONST .)


state 32

    (61) expr -> INCDEC . ID

    ID              shift and go to state 66


state 33

    (62) expr -> NOT . expr
    (57) expr -> . oper
    (58) expr -> . ACONST
    (59) expr -> . LCONST
    (60) expr -> . ID
    (61) expr -> . INCDEC ID
    (62) expr -> . NOT expr
    (63) expr -> . expr GTLT expr
    (64) expr -> . expr OR expr
    (65) expr -> . OPEN expr CLOSE
    (66) oper -> . MOVE
    (67) oper -> . GET
    (68) oper -> . PUSH
    (69) oper -> . SIZE1 ID
    (70) oper -> . SIZE2 ID expr
    (71) oper -> . ID OPEN expr COMA expr CLOSE
    (72) oper -> . ID OPEN expr CLOSE

    ACONST          shift and go to state 30
    LCONST          shift and go to state 31
    ID              shift and go to state 64
    INCDEC          shift and go to state 32
    NOT             shift and go to state 33
    OPEN            shift and go to state 19
    MOVE            shift and go to state 44
    GET             shift and go to state 45
    PUSH            shift and go to state 46
    SIZE1           shift and go to state 47
    SIZE2           shift and go to state 48

    expr                           shift and go to state 67
    oper                           shift and go to state 29

state 34

    (75) cond -> IF . expr sent else
    (76) cond -> IF . expr group else
    (57) expr -> . oper
    (58) expr -> . ACONST
    (59) expr -> . LCONST
    (60) expr -> . ID
    (61) expr -> . INCDEC ID
    (62) expr -> . NOT expr
    (63) expr -> . expr GTLT expr
    (64) expr -> . expr OR expr
    (65) expr -> . OPEN expr CLOSE
    (66) oper -> . MOVE
    (67) oper -> . GET
    (68) oper -> . PUSH
    (69) oper -> . SIZE1 ID
    (70) oper -> . SIZE2 ID expr
    (71) oper -> . ID OPEN expr COMA expr CLOSE
    (72) oper -> . ID OPEN expr CLOSE

    ACONST          shift and go to state 30
    LCONST          shift and go to state 31
    ID              shift and go to state 64
    INCDEC          shift and go to state 32
    NOT             shift and go to state 33
    OPEN            shift and go to state 19
    MOVE            shift and go to state 44
    GET             shift and go to state 45
    PUSH            shift and go to state 46
    SIZE1           shift and go to state 47
    SIZE2           shift and go to state 48

    expr                           shift and go to state 68
    oper                           shift and go to state 29

state 35

    (80) loop -> WHILE . expr DO sent
    (81) loop -> WHILE . expr DO group
    (57) expr -> . oper
    (58) expr -> . ACONST
    (59) expr -> . LCONST
    (60) expr -> . ID
    (61) expr -> . INCDEC ID
    (62) expr -> . NOT expr
    (63) expr -> . expr GTLT expr
    (64) expr -> . expr OR expr
    (65) expr -> . OPEN expr CLOSE
    (66) oper -> . MOVE
    (67) oper -> . GET
    (68) oper -> . PUSH
    (69) oper -> . SIZE1 ID
    (70) oper -> . SIZE2 ID expr
    (71) oper -> . ID OPEN expr COMA expr CLOSE
    (72) oper -> . ID OPEN expr CLOSE

    ACONST          shift and go to state 30
    LCONST          shift and go to state 31
    ID              shift and go to state 64
    INCDEC          shift and go to state 32
    NOT             shift and go to state 33
    OPEN            shift and go to state 19
    MOVE            shift and go to state 44
    GET             shift and go to state 45
    PUSH            shift and go to state 46
    SIZE1           shift and go to state 47
    SIZE2           shift and go to state 48

    expr                           shift and go to state 69
    oper                           shift and go to state 29

state 36

    (40) 2ldecl -> L2ARR . ID
    (41) 2ldecl -> L2ARR . ID EQ SOPEN arrs SCLOSE

    ID              shift and go to state 70


state 37

    (42) 2adecl -> A2ARR . ID
    (43) 2adecl -> A2ARR . ID EQ SOPEN arrs SCLOSE

    ID              shift and go to state 71


state 38

    (36) 1ldecl -> L1ARR . ID
    (37) 1ldecl -> L1ARR . ID EQ SOPEN vals SCLOSE

    ID              shift and go to state 72


state 39

    (38) 1adecl -> A1ARR . ID
    (39) 1adecl -> A1ARR . ID EQ SOPEN vals SCLOSE

    ID              shift and go to state 73


state 40

    (32) lvdecl -> LVAR . ID
    (33) lvdecl -> LVAR . ID EQ expr

    ID              shift and go to state 74


state 41

    (34) avdecl -> AVAR . ID
    (35) avdecl -> AVAR . ID EQ expr

    ID              shift and go to state 75


state 42

    (30) cldecl -> CLVAR . ID EQ expr

    ID              shift and go to state 76


state 43

    (31) cadecl -> CAVAR . ID EQ expr

    ID              shift and go to state 77


state 44

    (66) oper -> MOVE .

    GTLT            reduce using rule 66 (oper -> MOVE .)
    OR              reduce using rule 66 (oper -> MOVE .)
    ES              reduce using rule 66 (oper -> MOVE .)
    CLOSE           reduce using rule 66 (oper -> MOVE .)
    ID              reduce using rule 66 (oper -> MOVE .)
    EXTEND1         reduce using rule 66 (oper -> MOVE .)
    EXTEND2         reduce using rule 66 (oper -> MOVE .)
    UNDO            reduce using rule 66 (oper -> MOVE .)
    FOPEN           reduce using rule 66 (oper -> MOVE .)
    ACONST          reduce using rule 66 (oper -> MOVE .)
    LCONST          reduce using rule 66 (oper -> MOVE .)
    INCDEC          reduce using rule 66 (oper -> MOVE .)
    NOT             reduce using rule 66 (oper -> MOVE .)
    OPEN            reduce using rule 66 (oper -> MOVE .)
    MOVE            reduce using rule 66 (oper -> MOVE .)
    GET             reduce using rule 66 (oper -> MOVE .)
    PUSH            reduce using rule 66 (oper -> MOVE .)
    SIZE1           reduce using rule 66 (oper -> MOVE .)
    SIZE2           reduce using rule 66 (oper -> MOVE .)
    DO              reduce using rule 66 (oper -> MOVE .)
    FUNCTION        reduce using rule 66 (oper -> MOVE .)
    COMA            reduce using rule 66 (oper -> MOVE .)
    FCLOSE          reduce using rule 66 (oper -> MOVE .)
    ELSE            reduce using rule 66 (oper -> MOVE .)
    SCLOSE          reduce using rule 66 (oper -> MOVE .)
    COMD            reduce using rule 66 (oper -> MOVE .)


state 45

    (67) oper -> GET .

    GTLT            reduce using rule 67 (oper -> GET .)
    OR              reduce using rule 67 (oper -> GET .)
    ES              reduce using rule 67 (oper -> GET .)
    CLOSE           reduce using rule 67 (oper -> GET .)
    ID              reduce using rule 67 (oper -> GET .)
    EXTEND1         reduce using rule 67 (oper -> GET .)
    EXTEND2         reduce using rule 67 (oper -> GET .)
    UNDO            reduce using rule 67 (oper -> GET .)
    FOPEN           reduce using rule 67 (oper -> GET .)
    ACONST          reduce using rule 67 (oper -> GET .)
    LCONST          reduce using rule 67 (oper -> GET .)
    INCDEC          reduce using rule 67 (oper -> GET .)
    NOT             reduce using rule 67 (oper -> GET .)
    OPEN            reduce using rule 67 (oper -> GET .)
    MOVE            reduce using rule 67 (oper -> GET .)
    GET             reduce using rule 67 (oper -> GET .)
    PUSH            reduce using rule 67 (oper -> GET .)
    SIZE1           reduce using rule 67 (oper -> GET .)
    SIZE2           reduce using rule 67 (oper -> GET .)
    DO              reduce using rule 67 (oper -> GET .)
    FUNCTION        reduce using rule 67 (oper -> GET .)
    COMA            reduce using rule 67 (oper -> GET .)
    FCLOSE          reduce using rule 67 (oper -> GET .)
    ELSE            reduce using rule 67 (oper -> GET .)
    SCLOSE          reduce using rule 67 (oper -> GET .)
    COMD            reduce using rule 67 (oper -> GET .)


state 46

    (68) oper -> PUSH .

    GTLT            reduce using rule 68 (oper -> PUSH .)
    OR              reduce using rule 68 (oper -> PUSH .)
    ES              reduce using rule 68 (oper -> PUSH .)
    CLOSE           reduce using rule 68 (oper -> PUSH .)
    ID              reduce using rule 68 (oper -> PUSH .)
    EXTEND1         reduce using rule 68 (oper -> PUSH .)
    EXTEND2         reduce using rule 68 (oper -> PUSH .)
    UNDO            reduce using rule 68 (oper -> PUSH .)
    FOPEN           reduce using rule 68 (oper -> PUSH .)
    ACONST          reduce using rule 68 (oper -> PUSH .)
    LCONST          reduce using rule 68 (oper -> PUSH .)
    INCDEC          reduce using rule 68 (oper -> PUSH .)
    NOT             reduce using rule 68 (oper -> PUSH .)
    OPEN            reduce using rule 68 (oper -> PUSH .)
    MOVE            reduce using rule 68 (oper -> PUSH .)
    GET             reduce using rule 68 (oper -> PUSH .)
    PUSH            reduce using rule 68 (oper -> PUSH .)
    SIZE1           reduce using rule 68 (oper -> PUSH .)
    SIZE2           reduce using rule 68 (oper -> PUSH .)
    DO              reduce using rule 68 (oper -> PUSH .)
    FUNCTION        reduce using rule 68 (oper -> PUSH .)
    COMA            reduce using rule 68 (oper -> PUSH .)
    FCLOSE          reduce using rule 68 (oper -> PUSH .)
    ELSE            reduce using rule 68 (oper -> PUSH .)
    SCLOSE          reduce using rule 68 (oper -> PUSH .)
    COMD            reduce using rule 68 (oper -> PUSH .)


state 47

    (69) oper -> SIZE1 . ID

    ID              shift and go to state 78


state 48

    (70) oper -> SIZE2 . ID expr

    ID              shift and go to state 79


state 49

    (1) prog -> prog line es .
    (4) es -> es . es
    (4) es -> . es es
    (5) es -> . ES

  ! shift/reduce conflict for ES resolved as shift
    ID              reduce using rule 1 (prog -> prog line es .)
    EXTEND1         reduce using rule 1 (prog -> prog line es .)
    EXTEND2         reduce using rule 1 (prog -> prog line es .)
    UNDO            reduce using rule 1 (prog -> prog line es .)
    SOPEN           reduce using rule 1 (prog -> prog line es .)
    FOPEN           reduce using rule 1 (prog -> prog line es .)
    ACONST          reduce using rule 1 (prog -> prog line es .)
    LCONST          reduce using rule 1 (prog -> prog line es .)
    INCDEC          reduce using rule 1 (prog -> prog line es .)
    NOT             reduce using rule 1 (prog -> prog line es .)
    OPEN            reduce using rule 1 (prog -> prog line es .)
    IF              reduce using rule 1 (prog -> prog line es .)
    WHILE           reduce using rule 1 (prog -> prog line es .)
    L2ARR           reduce using rule 1 (prog -> prog line es .)
    A2ARR           reduce using rule 1 (prog -> prog line es .)
    L1ARR           reduce using rule 1 (prog -> prog line es .)
    A1ARR           reduce using rule 1 (prog -> prog line es .)
    LVAR            reduce using rule 1 (prog -> prog line es .)
    AVAR            reduce using rule 1 (prog -> prog line es .)
    CLVAR           reduce using rule 1 (prog -> prog line es .)
    CAVAR           reduce using rule 1 (prog -> prog line es .)
    MOVE            reduce using rule 1 (prog -> prog line es .)
    GET             reduce using rule 1 (prog -> prog line es .)
    PUSH            reduce using rule 1 (prog -> prog line es .)
    SIZE1           reduce using rule 1 (prog -> prog line es .)
    SIZE2           reduce using rule 1 (prog -> prog line es .)
    $end            reduce using rule 1 (prog -> prog line es .)
    ES              shift and go to state 50

  ! ES              [ reduce using rule 1 (prog -> prog line es .) ]

    es                             shift and go to state 80

state 50

    (5) es -> ES .

    ES              reduce using rule 5 (es -> ES .)
    ID              reduce using rule 5 (es -> ES .)
    EXTEND1         reduce using rule 5 (es -> ES .)
    EXTEND2         reduce using rule 5 (es -> ES .)
    UNDO            reduce using rule 5 (es -> ES .)
    SOPEN           reduce using rule 5 (es -> ES .)
    FOPEN           reduce using rule 5 (es -> ES .)
    ACONST          reduce using rule 5 (es -> ES .)
    LCONST          reduce using rule 5 (es -> ES .)
    INCDEC          reduce using rule 5 (es -> ES .)
    NOT             reduce using rule 5 (es -> ES .)
    OPEN            reduce using rule 5 (es -> ES .)
    IF              reduce using rule 5 (es -> ES .)
    WHILE           reduce using rule 5 (es -> ES .)
    L2ARR           reduce using rule 5 (es -> ES .)
    A2ARR           reduce using rule 5 (es -> ES .)
    L1ARR           reduce using rule 5 (es -> ES .)
    A1ARR           reduce using rule 5 (es -> ES .)
    LVAR            reduce using rule 5 (es -> ES .)
    AVAR            reduce using rule 5 (es -> ES .)
    CLVAR           reduce using rule 5 (es -> ES .)
    CAVAR           reduce using rule 5 (es -> ES .)
    MOVE            reduce using rule 5 (es -> ES .)
    GET             reduce using rule 5 (es -> ES .)
    PUSH            reduce using rule 5 (es -> ES .)
    SIZE1           reduce using rule 5 (es -> ES .)
    SIZE2           reduce using rule 5 (es -> ES .)
    $end            reduce using rule 5 (es -> ES .)
    FCLOSE          reduce using rule 5 (es -> ES .)


state 51

    (2) prog -> prog fdecl es .
    (4) es -> es . es
    (4) es -> . es es
    (5) es -> . ES

  ! shift/reduce conflict for ES resolved as shift
    ID              reduce using rule 2 (prog -> prog fdecl es .)
    EXTEND1         reduce using rule 2 (prog -> prog fdecl es .)
    EXTEND2         reduce using rule 2 (prog -> prog fdecl es .)
    UNDO            reduce using rule 2 (prog -> prog fdecl es .)
    SOPEN           reduce using rule 2 (prog -> prog fdecl es .)
    FOPEN           reduce using rule 2 (prog -> prog fdecl es .)
    ACONST          reduce using rule 2 (prog -> prog fdecl es .)
    LCONST          reduce using rule 2 (prog -> prog fdecl es .)
    INCDEC          reduce using rule 2 (prog -> prog fdecl es .)
    NOT             reduce using rule 2 (prog -> prog fdecl es .)
    OPEN            reduce using rule 2 (prog -> prog fdecl es .)
    IF              reduce using rule 2 (prog -> prog fdecl es .)
    WHILE           reduce using rule 2 (prog -> prog fdecl es .)
    L2ARR           reduce using rule 2 (prog -> prog fdecl es .)
    A2ARR           reduce using rule 2 (prog -> prog fdecl es .)
    L1ARR           reduce using rule 2 (prog -> prog fdecl es .)
    A1ARR           reduce using rule 2 (prog -> prog fdecl es .)
    LVAR            reduce using rule 2 (prog -> prog fdecl es .)
    AVAR            reduce using rule 2 (prog -> prog fdecl es .)
    CLVAR           reduce using rule 2 (prog -> prog fdecl es .)
    CAVAR           reduce using rule 2 (prog -> prog fdecl es .)
    MOVE            reduce using rule 2 (prog -> prog fdecl es .)
    GET             reduce using rule 2 (prog -> prog fdecl es .)
    PUSH            reduce using rule 2 (prog -> prog fdecl es .)
    SIZE1           reduce using rule 2 (prog -> prog fdecl es .)
    SIZE2           reduce using rule 2 (prog -> prog fdecl es .)
    $end            reduce using rule 2 (prog -> prog fdecl es .)
    ES              shift and go to state 50

  ! ES              [ reduce using rule 2 (prog -> prog fdecl es .) ]

    es                             shift and go to state 80

state 52

    (50) fdecl -> fovars FUNCTION . ID fivars group

    ID              shift and go to state 81


state 53

    (13) sent -> ID EQ . expr
    (51) fovars -> ID EQ . expr
    (57) expr -> . oper
    (58) expr -> . ACONST
    (59) expr -> . LCONST
    (60) expr -> . ID
    (61) expr -> . INCDEC ID
    (62) expr -> . NOT expr
    (63) expr -> . expr GTLT expr
    (64) expr -> . expr OR expr
    (65) expr -> . OPEN expr CLOSE
    (66) oper -> . MOVE
    (67) oper -> . GET
    (68) oper -> . PUSH
    (69) oper -> . SIZE1 ID
    (70) oper -> . SIZE2 ID expr
    (71) oper -> . ID OPEN expr COMA expr CLOSE
    (72) oper -> . ID OPEN expr CLOSE

    ACONST          shift and go to state 30
    LCONST          shift and go to state 31
    ID              shift and go to state 64
    INCDEC          shift and go to state 32
    NOT             shift and go to state 33
    OPEN            shift and go to state 19
    MOVE            shift and go to state 44
    GET             shift and go to state 45
    PUSH            shift and go to state 46
    SIZE1           shift and go to state 47
    SIZE2           shift and go to state 48

    expr                           shift and go to state 82
    oper                           shift and go to state 29

state 54

    (71) oper -> ID OPEN . expr COMA expr CLOSE
    (72) oper -> ID OPEN . expr CLOSE
    (57) expr -> . oper
    (58) expr -> . ACONST
    (59) expr -> . LCONST
    (60) expr -> . ID
    (61) expr -> . INCDEC ID
    (62) expr -> . NOT expr
    (63) expr -> . expr GTLT expr
    (64) expr -> . expr OR expr
    (65) expr -> . OPEN expr CLOSE
    (66) oper -> . MOVE
    (67) oper -> . GET
    (68) oper -> . PUSH
    (69) oper -> . SIZE1 ID
    (70) oper -> . SIZE2 ID expr
    (71) oper -> . ID OPEN expr COMA expr CLOSE
    (72) oper -> . ID OPEN expr CLOSE

    ACONST          shift and go to state 30
    LCONST          shift and go to state 31
    ID              shift and go to state 64
    INCDEC          shift and go to state 32
    NOT             shift and go to state 33
    OPEN            shift and go to state 19
    MOVE            shift and go to state 44
    GET             shift and go to state 45
    PUSH            shift and go to state 46
    SIZE1           shift and go to state 47
    SIZE2           shift and go to state 48

    expr                           shift and go to state 83
    oper                           shift and go to state 29

state 55

    (63) expr -> expr GTLT . expr
    (57) expr -> . oper
    (58) expr -> . ACONST
    (59) expr -> . LCONST
    (60) expr -> . ID
    (61) expr -> . INCDEC ID
    (62) expr -> . NOT expr
    (63) expr -> . expr GTLT expr
    (64) expr -> . expr OR expr
    (65) expr -> . OPEN expr CLOSE
    (66) oper -> . MOVE
    (67) oper -> . GET
    (68) oper -> . PUSH
    (69) oper -> . SIZE1 ID
    (70) oper -> . SIZE2 ID expr
    (71) oper -> . ID OPEN expr COMA expr CLOSE
    (72) oper -> . ID OPEN expr CLOSE

    ACONST          shift and go to state 30
    LCONST          shift and go to state 31
    ID              shift and go to state 64
    INCDEC          shift and go to state 32
    NOT             shift and go to state 33
    OPEN            shift and go to state 19
    MOVE            shift and go to state 44
    GET             shift and go to state 45
    PUSH            shift and go to state 46
    SIZE1           shift and go to state 47
    SIZE2           shift and go to state 48

    expr                           shift and go to state 84
    oper                           shift and go to state 29

state 56

    (64) expr -> expr OR . expr
    (57) expr -> . oper
    (58) expr -> . ACONST
    (59) expr -> . LCONST
    (60) expr -> . ID
    (61) expr -> . INCDEC ID
    (62) expr -> . NOT expr
    (63) expr -> . expr GTLT expr
    (64) expr -> . expr OR expr
    (65) expr -> . OPEN expr CLOSE
    (66) oper -> . MOVE
    (67) oper -> . GET
    (68) oper -> . PUSH
    (69) oper -> . SIZE1 ID
    (70) oper -> . SIZE2 ID expr
    (71) oper -> . ID OPEN expr COMA expr CLOSE
    (72) oper -> . ID OPEN expr CLOSE

    ACONST          shift and go to state 30
    LCONST          shift and go to state 31
    ID              shift and go to state 64
    INCDEC          shift and go to state 32
    NOT             shift and go to state 33
    OPEN            shift and go to state 19
    MOVE            shift and go to state 44
    GET             shift and go to state 45
    PUSH            shift and go to state 46
    SIZE1           shift and go to state 47
    SIZE2           shift and go to state 48

    expr                           shift and go to state 85
    oper                           shift and go to state 29

state 57

    (14) sent -> EXTEND1 ID . expr
    (57) expr -> . oper
    (58) expr -> . ACONST
    (59) expr -> . LCONST
    (60) expr -> . ID
    (61) expr -> . INCDEC ID
    (62) expr -> . NOT expr
    (63) expr -> . expr GTLT expr
    (64) expr -> . expr OR expr
    (65) expr -> . OPEN expr CLOSE
    (66) oper -> . MOVE
    (67) oper -> . GET
    (68) oper -> . PUSH
    (69) oper -> . SIZE1 ID
    (70) oper -> . SIZE2 ID expr
    (71) oper -> . ID OPEN expr COMA expr CLOSE
    (72) oper -> . ID OPEN expr CLOSE

    ACONST          shift and go to state 30
    LCONST          shift and go to state 31
    ID              shift and go to state 64
    INCDEC          shift and go to state 32
    NOT             shift and go to state 33
    OPEN            shift and go to state 19
    MOVE            shift and go to state 44
    GET             shift and go to state 45
    PUSH            shift and go to state 46
    SIZE1           shift and go to state 47
    SIZE2           shift and go to state 48

    expr                           shift and go to state 86
    oper                           shift and go to state 29

state 58

    (15) sent -> EXTEND2 ID . expr expr
    (57) expr -> . oper
    (58) expr -> . ACONST
    (59) expr -> . LCONST
    (60) expr -> . ID
    (61) expr -> . INCDEC ID
    (62) expr -> . NOT expr
    (63) expr -> . expr GTLT expr
    (64) expr -> . expr OR expr
    (65) expr -> . OPEN expr CLOSE
    (66) oper -> . MOVE
    (67) oper -> . GET
    (68) oper -> . PUSH
    (69) oper -> . SIZE1 ID
    (70) oper -> . SIZE2 ID expr
    (71) oper -> . ID OPEN expr COMA expr CLOSE
    (72) oper -> . ID OPEN expr CLOSE

    ACONST          shift and go to state 30
    LCONST          shift and go to state 31
    ID              shift and go to state 64
    INCDEC          shift and go to state 32
    NOT             shift and go to state 33
    OPEN            shift and go to state 19
    MOVE            shift and go to state 44
    GET             shift and go to state 45
    PUSH            shift and go to state 46
    SIZE1           shift and go to state 47
    SIZE2           shift and go to state 48

    expr                           shift and go to state 87
    oper                           shift and go to state 29

state 59

    (82) fcall -> SOPEN vars . SCLOSE EQ ID OPEN pars CLOSE

    SCLOSE          shift and go to state 88


state 60

    (83) vars -> ID . COMA vars
    (85) vars -> ID .
    (54) fvars -> ID . EQ expr
    (55) fvars -> ID . EQ expr COMA fvars

    COMA            shift and go to state 89
    SCLOSE          reduce using rule 85 (vars -> ID .)
    EQ              shift and go to state 90


state 61

    (52) fovars -> SOPEN fvars . SCLOSE

    SCLOSE          shift and go to state 91


state 62

    (84) vars -> COMA . vars
    (83) vars -> . ID COMA vars
    (84) vars -> . COMA vars
    (85) vars -> . ID
    (86) vars -> .

    ID              shift and go to state 93
    COMA            shift and go to state 62
    SCLOSE          reduce using rule 86 (vars -> .)

    vars                           shift and go to state 92

state 63

    (65) expr -> OPEN expr . CLOSE
    (63) expr -> expr . GTLT expr
    (64) expr -> expr . OR expr

    CLOSE           shift and go to state 94
    GTLT            shift and go to state 55
    OR              shift and go to state 56


state 64

    (60) expr -> ID .
    (71) oper -> ID . OPEN expr COMA expr CLOSE
    (72) oper -> ID . OPEN expr CLOSE

  ! shift/reduce conflict for OPEN resolved as shift
    CLOSE           reduce using rule 60 (expr -> ID .)
    GTLT            reduce using rule 60 (expr -> ID .)
    OR              reduce using rule 60 (expr -> ID .)
    ES              reduce using rule 60 (expr -> ID .)
    ID              reduce using rule 60 (expr -> ID .)
    EXTEND1         reduce using rule 60 (expr -> ID .)
    EXTEND2         reduce using rule 60 (expr -> ID .)
    UNDO            reduce using rule 60 (expr -> ID .)
    FOPEN           reduce using rule 60 (expr -> ID .)
    ACONST          reduce using rule 60 (expr -> ID .)
    LCONST          reduce using rule 60 (expr -> ID .)
    INCDEC          reduce using rule 60 (expr -> ID .)
    NOT             reduce using rule 60 (expr -> ID .)
    MOVE            reduce using rule 60 (expr -> ID .)
    GET             reduce using rule 60 (expr -> ID .)
    PUSH            reduce using rule 60 (expr -> ID .)
    SIZE1           reduce using rule 60 (expr -> ID .)
    SIZE2           reduce using rule 60 (expr -> ID .)
    DO              reduce using rule 60 (expr -> ID .)
    FUNCTION        reduce using rule 60 (expr -> ID .)
    COMA            reduce using rule 60 (expr -> ID .)
    FCLOSE          reduce using rule 60 (expr -> ID .)
    ELSE            reduce using rule 60 (expr -> ID .)
    SCLOSE          reduce using rule 60 (expr -> ID .)
    COMD            reduce using rule 60 (expr -> ID .)
    OPEN            shift and go to state 54

  ! OPEN            [ reduce using rule 60 (expr -> ID .) ]


state 65

    (18) group -> FOPEN lines . line FCLOSE
    (19) group -> FOPEN lines . FCLOSE
    (20) lines -> lines . line es
    (6) line -> . sent
    (7) line -> . logic
    (8) line -> . fcall
    (9) line -> . group
    (10) line -> . decl
    (11) line -> . cdecl
    (12) line -> .
    (13) sent -> . ID EQ expr
    (14) sent -> . EXTEND1 ID expr
    (15) sent -> . EXTEND2 ID expr expr
    (16) sent -> . expr
    (17) sent -> . UNDO
    (73) logic -> . cond
    (74) logic -> . loop
    (82) fcall -> . SOPEN vars SCLOSE EQ ID OPEN pars CLOSE
    (18) group -> . FOPEN lines line FCLOSE
    (19) group -> . FOPEN lines FCLOSE
    (22) decl -> . 2ldecl
    (23) decl -> . 2adecl
    (24) decl -> . 1ldecl
    (25) decl -> . 1adecl
    (26) decl -> . lvdecl
    (27) decl -> . avdecl
    (28) cdecl -> . cldecl
    (29) cdecl -> . cadecl
    (57) expr -> . oper
    (58) expr -> . ACONST
    (59) expr -> . LCONST
    (60) expr -> . ID
    (61) expr -> . INCDEC ID
    (62) expr -> . NOT expr
    (63) expr -> . expr GTLT expr
    (64) expr -> . expr OR expr
    (65) expr -> . OPEN expr CLOSE
    (75) cond -> . IF expr sent else
    (76) cond -> . IF expr group else
    (80) loop -> . WHILE expr DO sent
    (81) loop -> . WHILE expr DO group
    (40) 2ldecl -> . L2ARR ID
    (41) 2ldecl -> . L2ARR ID EQ SOPEN arrs SCLOSE
    (42) 2adecl -> . A2ARR ID
    (43) 2adecl -> . A2ARR ID EQ SOPEN arrs SCLOSE
    (36) 1ldecl -> . L1ARR ID
    (37) 1ldecl -> . L1ARR ID EQ SOPEN vals SCLOSE
    (38) 1adecl -> . A1ARR ID
    (39) 1adecl -> . A1ARR ID EQ SOPEN vals SCLOSE
    (32) lvdecl -> . LVAR ID
    (33) lvdecl -> . LVAR ID EQ expr
    (34) avdecl -> . AVAR ID
    (35) avdecl -> . AVAR ID EQ expr
    (30) cldecl -> . CLVAR ID EQ expr
    (31) cadecl -> . CAVAR ID EQ expr
    (66) oper -> . MOVE
    (67) oper -> . GET
    (68) oper -> . PUSH
    (69) oper -> . SIZE1 ID
    (70) oper -> . SIZE2 ID expr
    (71) oper -> . ID OPEN expr COMA expr CLOSE
    (72) oper -> . ID OPEN expr CLOSE

  ! shift/reduce conflict for FCLOSE resolved as shift
    FCLOSE          shift and go to state 96
    ES              reduce using rule 12 (line -> .)
    ID              shift and go to state 97
    EXTEND1         shift and go to state 13
    EXTEND2         shift and go to state 14
    UNDO            shift and go to state 15
    SOPEN           shift and go to state 98
    FOPEN           shift and go to state 20
    ACONST          shift and go to state 30
    LCONST          shift and go to state 31
    INCDEC          shift and go to state 32
    NOT             shift and go to state 33
    OPEN            shift and go to state 19
    IF              shift and go to state 34
    WHILE           shift and go to state 35
    L2ARR           shift and go to state 36
    A2ARR           shift and go to state 37
    L1ARR           shift and go to state 38
    A1ARR           shift and go to state 39
    LVAR            shift and go to state 40
    AVAR            shift and go to state 41
    CLVAR           shift and go to state 42
    CAVAR           shift and go to state 43
    MOVE            shift and go to state 44
    GET             shift and go to state 45
    PUSH            shift and go to state 46
    SIZE1           shift and go to state 47
    SIZE2           shift and go to state 48

  ! FCLOSE          [ reduce using rule 12 (line -> .) ]

    line                           shift and go to state 95
    sent                           shift and go to state 4
    logic                          shift and go to state 5
    fcall                          shift and go to state 6
    group                          shift and go to state 7
    decl                           shift and go to state 8
    cdecl                          shift and go to state 9
    expr                           shift and go to state 12
    cond                           shift and go to state 16
    loop                           shift and go to state 17
    2ldecl                         shift and go to state 21
    2adecl                         shift and go to state 22
    1ldecl                         shift and go to state 23
    1adecl                         shift and go to state 24
    lvdecl                         shift and go to state 25
    avdecl                         shift and go to state 26
    cldecl                         shift and go to state 27
    cadecl                         shift and go to state 28
    oper                           shift and go to state 29

state 66

    (61) expr -> INCDEC ID .

    GTLT            reduce using rule 61 (expr -> INCDEC ID .)
    OR              reduce using rule 61 (expr -> INCDEC ID .)
    ES              reduce using rule 61 (expr -> INCDEC ID .)
    CLOSE           reduce using rule 61 (expr -> INCDEC ID .)
    ID              reduce using rule 61 (expr -> INCDEC ID .)
    EXTEND1         reduce using rule 61 (expr -> INCDEC ID .)
    EXTEND2         reduce using rule 61 (expr -> INCDEC ID .)
    UNDO            reduce using rule 61 (expr -> INCDEC ID .)
    FOPEN           reduce using rule 61 (expr -> INCDEC ID .)
    ACONST          reduce using rule 61 (expr -> INCDEC ID .)
    LCONST          reduce using rule 61 (expr -> INCDEC ID .)
    INCDEC          reduce using rule 61 (expr -> INCDEC ID .)
    NOT             reduce using rule 61 (expr -> INCDEC ID .)
    OPEN            reduce using rule 61 (expr -> INCDEC ID .)
    MOVE            reduce using rule 61 (expr -> INCDEC ID .)
    GET             reduce using rule 61 (expr -> INCDEC ID .)
    PUSH            reduce using rule 61 (expr -> INCDEC ID .)
    SIZE1           reduce using rule 61 (expr -> INCDEC ID .)
    SIZE2           reduce using rule 61 (expr -> INCDEC ID .)
    DO              reduce using rule 61 (expr -> INCDEC ID .)
    FUNCTION        reduce using rule 61 (expr -> INCDEC ID .)
    COMA            reduce using rule 61 (expr -> INCDEC ID .)
    FCLOSE          reduce using rule 61 (expr -> INCDEC ID .)
    ELSE            reduce using rule 61 (expr -> INCDEC ID .)
    SCLOSE          reduce using rule 61 (expr -> INCDEC ID .)
    COMD            reduce using rule 61 (expr -> INCDEC ID .)


state 67

    (62) expr -> NOT expr .
    (63) expr -> expr . GTLT expr
    (64) expr -> expr . OR expr

  ! shift/reduce conflict for GTLT resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    ES              reduce using rule 62 (expr -> NOT expr .)
    CLOSE           reduce using rule 62 (expr -> NOT expr .)
    ID              reduce using rule 62 (expr -> NOT expr .)
    EXTEND1         reduce using rule 62 (expr -> NOT expr .)
    EXTEND2         reduce using rule 62 (expr -> NOT expr .)
    UNDO            reduce using rule 62 (expr -> NOT expr .)
    FOPEN           reduce using rule 62 (expr -> NOT expr .)
    ACONST          reduce using rule 62 (expr -> NOT expr .)
    LCONST          reduce using rule 62 (expr -> NOT expr .)
    INCDEC          reduce using rule 62 (expr -> NOT expr .)
    NOT             reduce using rule 62 (expr -> NOT expr .)
    OPEN            reduce using rule 62 (expr -> NOT expr .)
    MOVE            reduce using rule 62 (expr -> NOT expr .)
    GET             reduce using rule 62 (expr -> NOT expr .)
    PUSH            reduce using rule 62 (expr -> NOT expr .)
    SIZE1           reduce using rule 62 (expr -> NOT expr .)
    SIZE2           reduce using rule 62 (expr -> NOT expr .)
    DO              reduce using rule 62 (expr -> NOT expr .)
    FUNCTION        reduce using rule 62 (expr -> NOT expr .)
    COMA            reduce using rule 62 (expr -> NOT expr .)
    FCLOSE          reduce using rule 62 (expr -> NOT expr .)
    ELSE            reduce using rule 62 (expr -> NOT expr .)
    SCLOSE          reduce using rule 62 (expr -> NOT expr .)
    COMD            reduce using rule 62 (expr -> NOT expr .)
    GTLT            shift and go to state 55
    OR              shift and go to state 56

  ! GTLT            [ reduce using rule 62 (expr -> NOT expr .) ]
  ! OR              [ reduce using rule 62 (expr -> NOT expr .) ]


state 68

    (75) cond -> IF expr . sent else
    (76) cond -> IF expr . group else
    (63) expr -> expr . GTLT expr
    (64) expr -> expr . OR expr
    (13) sent -> . ID EQ expr
    (14) sent -> . EXTEND1 ID expr
    (15) sent -> . EXTEND2 ID expr expr
    (16) sent -> . expr
    (17) sent -> . UNDO
    (18) group -> . FOPEN lines line FCLOSE
    (19) group -> . FOPEN lines FCLOSE
    (57) expr -> . oper
    (58) expr -> . ACONST
    (59) expr -> . LCONST
    (60) expr -> . ID
    (61) expr -> . INCDEC ID
    (62) expr -> . NOT expr
    (63) expr -> . expr GTLT expr
    (64) expr -> . expr OR expr
    (65) expr -> . OPEN expr CLOSE
    (66) oper -> . MOVE
    (67) oper -> . GET
    (68) oper -> . PUSH
    (69) oper -> . SIZE1 ID
    (70) oper -> . SIZE2 ID expr
    (71) oper -> . ID OPEN expr COMA expr CLOSE
    (72) oper -> . ID OPEN expr CLOSE

    GTLT            shift and go to state 55
    OR              shift and go to state 56
    ID              shift and go to state 97
    EXTEND1         shift and go to state 13
    EXTEND2         shift and go to state 14
    UNDO            shift and go to state 15
    FOPEN           shift and go to state 20
    ACONST          shift and go to state 30
    LCONST          shift and go to state 31
    INCDEC          shift and go to state 32
    NOT             shift and go to state 33
    OPEN            shift and go to state 19
    MOVE            shift and go to state 44
    GET             shift and go to state 45
    PUSH            shift and go to state 46
    SIZE1           shift and go to state 47
    SIZE2           shift and go to state 48

    expr                           shift and go to state 12
    sent                           shift and go to state 99
    group                          shift and go to state 100
    oper                           shift and go to state 29

state 69

    (80) loop -> WHILE expr . DO sent
    (81) loop -> WHILE expr . DO group
    (63) expr -> expr . GTLT expr
    (64) expr -> expr . OR expr

    DO              shift and go to state 101
    GTLT            shift and go to state 55
    OR              shift and go to state 56


state 70

    (40) 2ldecl -> L2ARR ID .
    (41) 2ldecl -> L2ARR ID . EQ SOPEN arrs SCLOSE

    ES              reduce using rule 40 (2ldecl -> L2ARR ID .)
    FCLOSE          reduce using rule 40 (2ldecl -> L2ARR ID .)
    EQ              shift and go to state 102


state 71

    (42) 2adecl -> A2ARR ID .
    (43) 2adecl -> A2ARR ID . EQ SOPEN arrs SCLOSE

    ES              reduce using rule 42 (2adecl -> A2ARR ID .)
    FCLOSE          reduce using rule 42 (2adecl -> A2ARR ID .)
    EQ              shift and go to state 103


state 72

    (36) 1ldecl -> L1ARR ID .
    (37) 1ldecl -> L1ARR ID . EQ SOPEN vals SCLOSE

    ES              reduce using rule 36 (1ldecl -> L1ARR ID .)
    FCLOSE          reduce using rule 36 (1ldecl -> L1ARR ID .)
    EQ              shift and go to state 104


state 73

    (38) 1adecl -> A1ARR ID .
    (39) 1adecl -> A1ARR ID . EQ SOPEN vals SCLOSE

    ES              reduce using rule 38 (1adecl -> A1ARR ID .)
    FCLOSE          reduce using rule 38 (1adecl -> A1ARR ID .)
    EQ              shift and go to state 105


state 74

    (32) lvdecl -> LVAR ID .
    (33) lvdecl -> LVAR ID . EQ expr

    ES              reduce using rule 32 (lvdecl -> LVAR ID .)
    FCLOSE          reduce using rule 32 (lvdecl -> LVAR ID .)
    EQ              shift and go to state 106


state 75

    (34) avdecl -> AVAR ID .
    (35) avdecl -> AVAR ID . EQ expr

    ES              reduce using rule 34 (avdecl -> AVAR ID .)
    FCLOSE          reduce using rule 34 (avdecl -> AVAR ID .)
    EQ              shift and go to state 107


state 76

    (30) cldecl -> CLVAR ID . EQ expr

    EQ              shift and go to state 108


state 77

    (31) cadecl -> CAVAR ID . EQ expr

    EQ              shift and go to state 109


state 78

    (69) oper -> SIZE1 ID .

    GTLT            reduce using rule 69 (oper -> SIZE1 ID .)
    OR              reduce using rule 69 (oper -> SIZE1 ID .)
    ES              reduce using rule 69 (oper -> SIZE1 ID .)
    CLOSE           reduce using rule 69 (oper -> SIZE1 ID .)
    ID              reduce using rule 69 (oper -> SIZE1 ID .)
    EXTEND1         reduce using rule 69 (oper -> SIZE1 ID .)
    EXTEND2         reduce using rule 69 (oper -> SIZE1 ID .)
    UNDO            reduce using rule 69 (oper -> SIZE1 ID .)
    FOPEN           reduce using rule 69 (oper -> SIZE1 ID .)
    ACONST          reduce using rule 69 (oper -> SIZE1 ID .)
    LCONST          reduce using rule 69 (oper -> SIZE1 ID .)
    INCDEC          reduce using rule 69 (oper -> SIZE1 ID .)
    NOT             reduce using rule 69 (oper -> SIZE1 ID .)
    OPEN            reduce using rule 69 (oper -> SIZE1 ID .)
    MOVE            reduce using rule 69 (oper -> SIZE1 ID .)
    GET             reduce using rule 69 (oper -> SIZE1 ID .)
    PUSH            reduce using rule 69 (oper -> SIZE1 ID .)
    SIZE1           reduce using rule 69 (oper -> SIZE1 ID .)
    SIZE2           reduce using rule 69 (oper -> SIZE1 ID .)
    DO              reduce using rule 69 (oper -> SIZE1 ID .)
    FUNCTION        reduce using rule 69 (oper -> SIZE1 ID .)
    COMA            reduce using rule 69 (oper -> SIZE1 ID .)
    FCLOSE          reduce using rule 69 (oper -> SIZE1 ID .)
    ELSE            reduce using rule 69 (oper -> SIZE1 ID .)
    SCLOSE          reduce using rule 69 (oper -> SIZE1 ID .)
    COMD            reduce using rule 69 (oper -> SIZE1 ID .)


state 79

    (70) oper -> SIZE2 ID . expr
    (57) expr -> . oper
    (58) expr -> . ACONST
    (59) expr -> . LCONST
    (60) expr -> . ID
    (61) expr -> . INCDEC ID
    (62) expr -> . NOT expr
    (63) expr -> . expr GTLT expr
    (64) expr -> . expr OR expr
    (65) expr -> . OPEN expr CLOSE
    (66) oper -> . MOVE
    (67) oper -> . GET
    (68) oper -> . PUSH
    (69) oper -> . SIZE1 ID
    (70) oper -> . SIZE2 ID expr
    (71) oper -> . ID OPEN expr COMA expr CLOSE
    (72) oper -> . ID OPEN expr CLOSE

    ACONST          shift and go to state 30
    LCONST          shift and go to state 31
    ID              shift and go to state 64
    INCDEC          shift and go to state 32
    NOT             shift and go to state 33
    OPEN            shift and go to state 19
    MOVE            shift and go to state 44
    GET             shift and go to state 45
    PUSH            shift and go to state 46
    SIZE1           shift and go to state 47
    SIZE2           shift and go to state 48

    expr                           shift and go to state 110
    oper                           shift and go to state 29

state 80

    (4) es -> es es .
    (4) es -> es . es
    (4) es -> . es es
    (5) es -> . ES

  ! shift/reduce conflict for ES resolved as shift
    ID              reduce using rule 4 (es -> es es .)
    EXTEND1         reduce using rule 4 (es -> es es .)
    EXTEND2         reduce using rule 4 (es -> es es .)
    UNDO            reduce using rule 4 (es -> es es .)
    SOPEN           reduce using rule 4 (es -> es es .)
    FOPEN           reduce using rule 4 (es -> es es .)
    ACONST          reduce using rule 4 (es -> es es .)
    LCONST          reduce using rule 4 (es -> es es .)
    INCDEC          reduce using rule 4 (es -> es es .)
    NOT             reduce using rule 4 (es -> es es .)
    OPEN            reduce using rule 4 (es -> es es .)
    IF              reduce using rule 4 (es -> es es .)
    WHILE           reduce using rule 4 (es -> es es .)
    L2ARR           reduce using rule 4 (es -> es es .)
    A2ARR           reduce using rule 4 (es -> es es .)
    L1ARR           reduce using rule 4 (es -> es es .)
    A1ARR           reduce using rule 4 (es -> es es .)
    LVAR            reduce using rule 4 (es -> es es .)
    AVAR            reduce using rule 4 (es -> es es .)
    CLVAR           reduce using rule 4 (es -> es es .)
    CAVAR           reduce using rule 4 (es -> es es .)
    MOVE            reduce using rule 4 (es -> es es .)
    GET             reduce using rule 4 (es -> es es .)
    PUSH            reduce using rule 4 (es -> es es .)
    SIZE1           reduce using rule 4 (es -> es es .)
    SIZE2           reduce using rule 4 (es -> es es .)
    $end            reduce using rule 4 (es -> es es .)
    FCLOSE          reduce using rule 4 (es -> es es .)
    ES              shift and go to state 50

  ! ES              [ reduce using rule 4 (es -> es es .) ]

    es                             shift and go to state 80

state 81

    (50) fdecl -> fovars FUNCTION ID . fivars group
    (53) fivars -> . OPEN fvars CLOSE

    OPEN            shift and go to state 112

    fivars                         shift and go to state 111

state 82

    (13) sent -> ID EQ expr .
    (51) fovars -> ID EQ expr .
    (63) expr -> expr . GTLT expr
    (64) expr -> expr . OR expr

    ES              reduce using rule 13 (sent -> ID EQ expr .)
    FUNCTION        reduce using rule 51 (fovars -> ID EQ expr .)
    GTLT            shift and go to state 55
    OR              shift and go to state 56


state 83

    (71) oper -> ID OPEN expr . COMA expr CLOSE
    (72) oper -> ID OPEN expr . CLOSE
    (63) expr -> expr . GTLT expr
    (64) expr -> expr . OR expr

    COMA            shift and go to state 113
    CLOSE           shift and go to state 114
    GTLT            shift and go to state 55
    OR              shift and go to state 56


state 84

    (63) expr -> expr GTLT expr .
    (63) expr -> expr . GTLT expr
    (64) expr -> expr . OR expr

  ! shift/reduce conflict for GTLT resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    ES              reduce using rule 63 (expr -> expr GTLT expr .)
    CLOSE           reduce using rule 63 (expr -> expr GTLT expr .)
    ID              reduce using rule 63 (expr -> expr GTLT expr .)
    EXTEND1         reduce using rule 63 (expr -> expr GTLT expr .)
    EXTEND2         reduce using rule 63 (expr -> expr GTLT expr .)
    UNDO            reduce using rule 63 (expr -> expr GTLT expr .)
    FOPEN           reduce using rule 63 (expr -> expr GTLT expr .)
    ACONST          reduce using rule 63 (expr -> expr GTLT expr .)
    LCONST          reduce using rule 63 (expr -> expr GTLT expr .)
    INCDEC          reduce using rule 63 (expr -> expr GTLT expr .)
    NOT             reduce using rule 63 (expr -> expr GTLT expr .)
    OPEN            reduce using rule 63 (expr -> expr GTLT expr .)
    MOVE            reduce using rule 63 (expr -> expr GTLT expr .)
    GET             reduce using rule 63 (expr -> expr GTLT expr .)
    PUSH            reduce using rule 63 (expr -> expr GTLT expr .)
    SIZE1           reduce using rule 63 (expr -> expr GTLT expr .)
    SIZE2           reduce using rule 63 (expr -> expr GTLT expr .)
    DO              reduce using rule 63 (expr -> expr GTLT expr .)
    FUNCTION        reduce using rule 63 (expr -> expr GTLT expr .)
    COMA            reduce using rule 63 (expr -> expr GTLT expr .)
    FCLOSE          reduce using rule 63 (expr -> expr GTLT expr .)
    ELSE            reduce using rule 63 (expr -> expr GTLT expr .)
    SCLOSE          reduce using rule 63 (expr -> expr GTLT expr .)
    COMD            reduce using rule 63 (expr -> expr GTLT expr .)
    GTLT            shift and go to state 55
    OR              shift and go to state 56

  ! GTLT            [ reduce using rule 63 (expr -> expr GTLT expr .) ]
  ! OR              [ reduce using rule 63 (expr -> expr GTLT expr .) ]


state 85

    (64) expr -> expr OR expr .
    (63) expr -> expr . GTLT expr
    (64) expr -> expr . OR expr

  ! shift/reduce conflict for GTLT resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    ES              reduce using rule 64 (expr -> expr OR expr .)
    CLOSE           reduce using rule 64 (expr -> expr OR expr .)
    ID              reduce using rule 64 (expr -> expr OR expr .)
    EXTEND1         reduce using rule 64 (expr -> expr OR expr .)
    EXTEND2         reduce using rule 64 (expr -> expr OR expr .)
    UNDO            reduce using rule 64 (expr -> expr OR expr .)
    FOPEN           reduce using rule 64 (expr -> expr OR expr .)
    ACONST          reduce using rule 64 (expr -> expr OR expr .)
    LCONST          reduce using rule 64 (expr -> expr OR expr .)
    INCDEC          reduce using rule 64 (expr -> expr OR expr .)
    NOT             reduce using rule 64 (expr -> expr OR expr .)
    OPEN            reduce using rule 64 (expr -> expr OR expr .)
    MOVE            reduce using rule 64 (expr -> expr OR expr .)
    GET             reduce using rule 64 (expr -> expr OR expr .)
    PUSH            reduce using rule 64 (expr -> expr OR expr .)
    SIZE1           reduce using rule 64 (expr -> expr OR expr .)
    SIZE2           reduce using rule 64 (expr -> expr OR expr .)
    DO              reduce using rule 64 (expr -> expr OR expr .)
    FUNCTION        reduce using rule 64 (expr -> expr OR expr .)
    COMA            reduce using rule 64 (expr -> expr OR expr .)
    FCLOSE          reduce using rule 64 (expr -> expr OR expr .)
    ELSE            reduce using rule 64 (expr -> expr OR expr .)
    SCLOSE          reduce using rule 64 (expr -> expr OR expr .)
    COMD            reduce using rule 64 (expr -> expr OR expr .)
    GTLT            shift and go to state 55
    OR              shift and go to state 56

  ! GTLT            [ reduce using rule 64 (expr -> expr OR expr .) ]
  ! OR              [ reduce using rule 64 (expr -> expr OR expr .) ]


state 86

    (14) sent -> EXTEND1 ID expr .
    (63) expr -> expr . GTLT expr
    (64) expr -> expr . OR expr

    ES              reduce using rule 14 (sent -> EXTEND1 ID expr .)
    FCLOSE          reduce using rule 14 (sent -> EXTEND1 ID expr .)
    ELSE            reduce using rule 14 (sent -> EXTEND1 ID expr .)
    GTLT            shift and go to state 55
    OR              shift and go to state 56


state 87

    (15) sent -> EXTEND2 ID expr . expr
    (63) expr -> expr . GTLT expr
    (64) expr -> expr . OR expr
    (57) expr -> . oper
    (58) expr -> . ACONST
    (59) expr -> . LCONST
    (60) expr -> . ID
    (61) expr -> . INCDEC ID
    (62) expr -> . NOT expr
    (63) expr -> . expr GTLT expr
    (64) expr -> . expr OR expr
    (65) expr -> . OPEN expr CLOSE
    (66) oper -> . MOVE
    (67) oper -> . GET
    (68) oper -> . PUSH
    (69) oper -> . SIZE1 ID
    (70) oper -> . SIZE2 ID expr
    (71) oper -> . ID OPEN expr COMA expr CLOSE
    (72) oper -> . ID OPEN expr CLOSE

    GTLT            shift and go to state 55
    OR              shift and go to state 56
    ACONST          shift and go to state 30
    LCONST          shift and go to state 31
    ID              shift and go to state 64
    INCDEC          shift and go to state 32
    NOT             shift and go to state 33
    OPEN            shift and go to state 19
    MOVE            shift and go to state 44
    GET             shift and go to state 45
    PUSH            shift and go to state 46
    SIZE1           shift and go to state 47
    SIZE2           shift and go to state 48

    expr                           shift and go to state 115
    oper                           shift and go to state 29

state 88

    (82) fcall -> SOPEN vars SCLOSE . EQ ID OPEN pars CLOSE

    EQ              shift and go to state 116


state 89

    (83) vars -> ID COMA . vars
    (83) vars -> . ID COMA vars
    (84) vars -> . COMA vars
    (85) vars -> . ID
    (86) vars -> .

    ID              shift and go to state 93
    COMA            shift and go to state 62
    SCLOSE          reduce using rule 86 (vars -> .)

    vars                           shift and go to state 117

state 90

    (54) fvars -> ID EQ . expr
    (55) fvars -> ID EQ . expr COMA fvars
    (57) expr -> . oper
    (58) expr -> . ACONST
    (59) expr -> . LCONST
    (60) expr -> . ID
    (61) expr -> . INCDEC ID
    (62) expr -> . NOT expr
    (63) expr -> . expr GTLT expr
    (64) expr -> . expr OR expr
    (65) expr -> . OPEN expr CLOSE
    (66) oper -> . MOVE
    (67) oper -> . GET
    (68) oper -> . PUSH
    (69) oper -> . SIZE1 ID
    (70) oper -> . SIZE2 ID expr
    (71) oper -> . ID OPEN expr COMA expr CLOSE
    (72) oper -> . ID OPEN expr CLOSE

    ACONST          shift and go to state 30
    LCONST          shift and go to state 31
    ID              shift and go to state 64
    INCDEC          shift and go to state 32
    NOT             shift and go to state 33
    OPEN            shift and go to state 19
    MOVE            shift and go to state 44
    GET             shift and go to state 45
    PUSH            shift and go to state 46
    SIZE1           shift and go to state 47
    SIZE2           shift and go to state 48

    expr                           shift and go to state 118
    oper                           shift and go to state 29

state 91

    (52) fovars -> SOPEN fvars SCLOSE .

    FUNCTION        reduce using rule 52 (fovars -> SOPEN fvars SCLOSE .)


state 92

    (84) vars -> COMA vars .

    SCLOSE          reduce using rule 84 (vars -> COMA vars .)


state 93

    (83) vars -> ID . COMA vars
    (85) vars -> ID .

    COMA            shift and go to state 89
    SCLOSE          reduce using rule 85 (vars -> ID .)


state 94

    (65) expr -> OPEN expr CLOSE .

    GTLT            reduce using rule 65 (expr -> OPEN expr CLOSE .)
    OR              reduce using rule 65 (expr -> OPEN expr CLOSE .)
    ES              reduce using rule 65 (expr -> OPEN expr CLOSE .)
    CLOSE           reduce using rule 65 (expr -> OPEN expr CLOSE .)
    ID              reduce using rule 65 (expr -> OPEN expr CLOSE .)
    EXTEND1         reduce using rule 65 (expr -> OPEN expr CLOSE .)
    EXTEND2         reduce using rule 65 (expr -> OPEN expr CLOSE .)
    UNDO            reduce using rule 65 (expr -> OPEN expr CLOSE .)
    FOPEN           reduce using rule 65 (expr -> OPEN expr CLOSE .)
    ACONST          reduce using rule 65 (expr -> OPEN expr CLOSE .)
    LCONST          reduce using rule 65 (expr -> OPEN expr CLOSE .)
    INCDEC          reduce using rule 65 (expr -> OPEN expr CLOSE .)
    NOT             reduce using rule 65 (expr -> OPEN expr CLOSE .)
    OPEN            reduce using rule 65 (expr -> OPEN expr CLOSE .)
    MOVE            reduce using rule 65 (expr -> OPEN expr CLOSE .)
    GET             reduce using rule 65 (expr -> OPEN expr CLOSE .)
    PUSH            reduce using rule 65 (expr -> OPEN expr CLOSE .)
    SIZE1           reduce using rule 65 (expr -> OPEN expr CLOSE .)
    SIZE2           reduce using rule 65 (expr -> OPEN expr CLOSE .)
    DO              reduce using rule 65 (expr -> OPEN expr CLOSE .)
    FUNCTION        reduce using rule 65 (expr -> OPEN expr CLOSE .)
    COMA            reduce using rule 65 (expr -> OPEN expr CLOSE .)
    FCLOSE          reduce using rule 65 (expr -> OPEN expr CLOSE .)
    ELSE            reduce using rule 65 (expr -> OPEN expr CLOSE .)
    SCLOSE          reduce using rule 65 (expr -> OPEN expr CLOSE .)
    COMD            reduce using rule 65 (expr -> OPEN expr CLOSE .)


state 95

    (18) group -> FOPEN lines line . FCLOSE
    (20) lines -> lines line . es
    (4) es -> . es es
    (5) es -> . ES

    FCLOSE          shift and go to state 119
    ES              shift and go to state 50

    es                             shift and go to state 120

state 96

    (19) group -> FOPEN lines FCLOSE .

    ES              reduce using rule 19 (group -> FOPEN lines FCLOSE .)
    FCLOSE          reduce using rule 19 (group -> FOPEN lines FCLOSE .)
    ELSE            reduce using rule 19 (group -> FOPEN lines FCLOSE .)


state 97

    (13) sent -> ID . EQ expr
    (60) expr -> ID .
    (71) oper -> ID . OPEN expr COMA expr CLOSE
    (72) oper -> ID . OPEN expr CLOSE

    EQ              shift and go to state 121
    GTLT            reduce using rule 60 (expr -> ID .)
    OR              reduce using rule 60 (expr -> ID .)
    FCLOSE          reduce using rule 60 (expr -> ID .)
    ES              reduce using rule 60 (expr -> ID .)
    ELSE            reduce using rule 60 (expr -> ID .)
    OPEN            shift and go to state 54


state 98

    (82) fcall -> SOPEN . vars SCLOSE EQ ID OPEN pars CLOSE
    (83) vars -> . ID COMA vars
    (84) vars -> . COMA vars
    (85) vars -> . ID
    (86) vars -> .

    ID              shift and go to state 93
    COMA            shift and go to state 62
    SCLOSE          reduce using rule 86 (vars -> .)

    vars                           shift and go to state 59

state 99

    (75) cond -> IF expr sent . else
    (77) else -> . ELSE sent
    (78) else -> . ELSE group
    (79) else -> .

    ELSE            shift and go to state 123
    ES              reduce using rule 79 (else -> .)
    FCLOSE          reduce using rule 79 (else -> .)

    else                           shift and go to state 122

state 100

    (76) cond -> IF expr group . else
    (77) else -> . ELSE sent
    (78) else -> . ELSE group
    (79) else -> .

    ELSE            shift and go to state 123
    ES              reduce using rule 79 (else -> .)
    FCLOSE          reduce using rule 79 (else -> .)

    else                           shift and go to state 124

state 101

    (80) loop -> WHILE expr DO . sent
    (81) loop -> WHILE expr DO . group
    (13) sent -> . ID EQ expr
    (14) sent -> . EXTEND1 ID expr
    (15) sent -> . EXTEND2 ID expr expr
    (16) sent -> . expr
    (17) sent -> . UNDO
    (18) group -> . FOPEN lines line FCLOSE
    (19) group -> . FOPEN lines FCLOSE
    (57) expr -> . oper
    (58) expr -> . ACONST
    (59) expr -> . LCONST
    (60) expr -> . ID
    (61) expr -> . INCDEC ID
    (62) expr -> . NOT expr
    (63) expr -> . expr GTLT expr
    (64) expr -> . expr OR expr
    (65) expr -> . OPEN expr CLOSE
    (66) oper -> . MOVE
    (67) oper -> . GET
    (68) oper -> . PUSH
    (69) oper -> . SIZE1 ID
    (70) oper -> . SIZE2 ID expr
    (71) oper -> . ID OPEN expr COMA expr CLOSE
    (72) oper -> . ID OPEN expr CLOSE

    ID              shift and go to state 97
    EXTEND1         shift and go to state 13
    EXTEND2         shift and go to state 14
    UNDO            shift and go to state 15
    FOPEN           shift and go to state 20
    ACONST          shift and go to state 30
    LCONST          shift and go to state 31
    INCDEC          shift and go to state 32
    NOT             shift and go to state 33
    OPEN            shift and go to state 19
    MOVE            shift and go to state 44
    GET             shift and go to state 45
    PUSH            shift and go to state 46
    SIZE1           shift and go to state 47
    SIZE2           shift and go to state 48

    expr                           shift and go to state 12
    sent                           shift and go to state 125
    group                          shift and go to state 126
    oper                           shift and go to state 29

state 102

    (41) 2ldecl -> L2ARR ID EQ . SOPEN arrs SCLOSE

    SOPEN           shift and go to state 127


state 103

    (43) 2adecl -> A2ARR ID EQ . SOPEN arrs SCLOSE

    SOPEN           shift and go to state 128


state 104

    (37) 1ldecl -> L1ARR ID EQ . SOPEN vals SCLOSE

    SOPEN           shift and go to state 129


state 105

    (39) 1adecl -> A1ARR ID EQ . SOPEN vals SCLOSE

    SOPEN           shift and go to state 130


state 106

    (33) lvdecl -> LVAR ID EQ . expr
    (57) expr -> . oper
    (58) expr -> . ACONST
    (59) expr -> . LCONST
    (60) expr -> . ID
    (61) expr -> . INCDEC ID
    (62) expr -> . NOT expr
    (63) expr -> . expr GTLT expr
    (64) expr -> . expr OR expr
    (65) expr -> . OPEN expr CLOSE
    (66) oper -> . MOVE
    (67) oper -> . GET
    (68) oper -> . PUSH
    (69) oper -> . SIZE1 ID
    (70) oper -> . SIZE2 ID expr
    (71) oper -> . ID OPEN expr COMA expr CLOSE
    (72) oper -> . ID OPEN expr CLOSE

    ACONST          shift and go to state 30
    LCONST          shift and go to state 31
    ID              shift and go to state 64
    INCDEC          shift and go to state 32
    NOT             shift and go to state 33
    OPEN            shift and go to state 19
    MOVE            shift and go to state 44
    GET             shift and go to state 45
    PUSH            shift and go to state 46
    SIZE1           shift and go to state 47
    SIZE2           shift and go to state 48

    expr                           shift and go to state 131
    oper                           shift and go to state 29

state 107

    (35) avdecl -> AVAR ID EQ . expr
    (57) expr -> . oper
    (58) expr -> . ACONST
    (59) expr -> . LCONST
    (60) expr -> . ID
    (61) expr -> . INCDEC ID
    (62) expr -> . NOT expr
    (63) expr -> . expr GTLT expr
    (64) expr -> . expr OR expr
    (65) expr -> . OPEN expr CLOSE
    (66) oper -> . MOVE
    (67) oper -> . GET
    (68) oper -> . PUSH
    (69) oper -> . SIZE1 ID
    (70) oper -> . SIZE2 ID expr
    (71) oper -> . ID OPEN expr COMA expr CLOSE
    (72) oper -> . ID OPEN expr CLOSE

    ACONST          shift and go to state 30
    LCONST          shift and go to state 31
    ID              shift and go to state 64
    INCDEC          shift and go to state 32
    NOT             shift and go to state 33
    OPEN            shift and go to state 19
    MOVE            shift and go to state 44
    GET             shift and go to state 45
    PUSH            shift and go to state 46
    SIZE1           shift and go to state 47
    SIZE2           shift and go to state 48

    expr                           shift and go to state 132
    oper                           shift and go to state 29

state 108

    (30) cldecl -> CLVAR ID EQ . expr
    (57) expr -> . oper
    (58) expr -> . ACONST
    (59) expr -> . LCONST
    (60) expr -> . ID
    (61) expr -> . INCDEC ID
    (62) expr -> . NOT expr
    (63) expr -> . expr GTLT expr
    (64) expr -> . expr OR expr
    (65) expr -> . OPEN expr CLOSE
    (66) oper -> . MOVE
    (67) oper -> . GET
    (68) oper -> . PUSH
    (69) oper -> . SIZE1 ID
    (70) oper -> . SIZE2 ID expr
    (71) oper -> . ID OPEN expr COMA expr CLOSE
    (72) oper -> . ID OPEN expr CLOSE

    ACONST          shift and go to state 30
    LCONST          shift and go to state 31
    ID              shift and go to state 64
    INCDEC          shift and go to state 32
    NOT             shift and go to state 33
    OPEN            shift and go to state 19
    MOVE            shift and go to state 44
    GET             shift and go to state 45
    PUSH            shift and go to state 46
    SIZE1           shift and go to state 47
    SIZE2           shift and go to state 48

    expr                           shift and go to state 133
    oper                           shift and go to state 29

state 109

    (31) cadecl -> CAVAR ID EQ . expr
    (57) expr -> . oper
    (58) expr -> . ACONST
    (59) expr -> . LCONST
    (60) expr -> . ID
    (61) expr -> . INCDEC ID
    (62) expr -> . NOT expr
    (63) expr -> . expr GTLT expr
    (64) expr -> . expr OR expr
    (65) expr -> . OPEN expr CLOSE
    (66) oper -> . MOVE
    (67) oper -> . GET
    (68) oper -> . PUSH
    (69) oper -> . SIZE1 ID
    (70) oper -> . SIZE2 ID expr
    (71) oper -> . ID OPEN expr COMA expr CLOSE
    (72) oper -> . ID OPEN expr CLOSE

    ACONST          shift and go to state 30
    LCONST          shift and go to state 31
    ID              shift and go to state 64
    INCDEC          shift and go to state 32
    NOT             shift and go to state 33
    OPEN            shift and go to state 19
    MOVE            shift and go to state 44
    GET             shift and go to state 45
    PUSH            shift and go to state 46
    SIZE1           shift and go to state 47
    SIZE2           shift and go to state 48

    expr                           shift and go to state 134
    oper                           shift and go to state 29

state 110

    (70) oper -> SIZE2 ID expr .
    (63) expr -> expr . GTLT expr
    (64) expr -> expr . OR expr

  ! shift/reduce conflict for GTLT resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    ES              reduce using rule 70 (oper -> SIZE2 ID expr .)
    CLOSE           reduce using rule 70 (oper -> SIZE2 ID expr .)
    ID              reduce using rule 70 (oper -> SIZE2 ID expr .)
    EXTEND1         reduce using rule 70 (oper -> SIZE2 ID expr .)
    EXTEND2         reduce using rule 70 (oper -> SIZE2 ID expr .)
    UNDO            reduce using rule 70 (oper -> SIZE2 ID expr .)
    FOPEN           reduce using rule 70 (oper -> SIZE2 ID expr .)
    ACONST          reduce using rule 70 (oper -> SIZE2 ID expr .)
    LCONST          reduce using rule 70 (oper -> SIZE2 ID expr .)
    INCDEC          reduce using rule 70 (oper -> SIZE2 ID expr .)
    NOT             reduce using rule 70 (oper -> SIZE2 ID expr .)
    OPEN            reduce using rule 70 (oper -> SIZE2 ID expr .)
    MOVE            reduce using rule 70 (oper -> SIZE2 ID expr .)
    GET             reduce using rule 70 (oper -> SIZE2 ID expr .)
    PUSH            reduce using rule 70 (oper -> SIZE2 ID expr .)
    SIZE1           reduce using rule 70 (oper -> SIZE2 ID expr .)
    SIZE2           reduce using rule 70 (oper -> SIZE2 ID expr .)
    DO              reduce using rule 70 (oper -> SIZE2 ID expr .)
    FUNCTION        reduce using rule 70 (oper -> SIZE2 ID expr .)
    COMA            reduce using rule 70 (oper -> SIZE2 ID expr .)
    FCLOSE          reduce using rule 70 (oper -> SIZE2 ID expr .)
    ELSE            reduce using rule 70 (oper -> SIZE2 ID expr .)
    SCLOSE          reduce using rule 70 (oper -> SIZE2 ID expr .)
    COMD            reduce using rule 70 (oper -> SIZE2 ID expr .)
    GTLT            shift and go to state 55
    OR              shift and go to state 56

  ! GTLT            [ reduce using rule 70 (oper -> SIZE2 ID expr .) ]
  ! OR              [ reduce using rule 70 (oper -> SIZE2 ID expr .) ]


state 111

    (50) fdecl -> fovars FUNCTION ID fivars . group
    (18) group -> . FOPEN lines line FCLOSE
    (19) group -> . FOPEN lines FCLOSE

    FOPEN           shift and go to state 20

    group                          shift and go to state 135

state 112

    (53) fivars -> OPEN . fvars CLOSE
    (54) fvars -> . ID EQ expr
    (55) fvars -> . ID EQ expr COMA fvars
    (56) fvars -> .

    ID              shift and go to state 137
    CLOSE           reduce using rule 56 (fvars -> .)

    fvars                          shift and go to state 136

state 113

    (71) oper -> ID OPEN expr COMA . expr CLOSE
    (57) expr -> . oper
    (58) expr -> . ACONST
    (59) expr -> . LCONST
    (60) expr -> . ID
    (61) expr -> . INCDEC ID
    (62) expr -> . NOT expr
    (63) expr -> . expr GTLT expr
    (64) expr -> . expr OR expr
    (65) expr -> . OPEN expr CLOSE
    (66) oper -> . MOVE
    (67) oper -> . GET
    (68) oper -> . PUSH
    (69) oper -> . SIZE1 ID
    (70) oper -> . SIZE2 ID expr
    (71) oper -> . ID OPEN expr COMA expr CLOSE
    (72) oper -> . ID OPEN expr CLOSE

    ACONST          shift and go to state 30
    LCONST          shift and go to state 31
    ID              shift and go to state 64
    INCDEC          shift and go to state 32
    NOT             shift and go to state 33
    OPEN            shift and go to state 19
    MOVE            shift and go to state 44
    GET             shift and go to state 45
    PUSH            shift and go to state 46
    SIZE1           shift and go to state 47
    SIZE2           shift and go to state 48

    expr                           shift and go to state 138
    oper                           shift and go to state 29

state 114

    (72) oper -> ID OPEN expr CLOSE .

    GTLT            reduce using rule 72 (oper -> ID OPEN expr CLOSE .)
    OR              reduce using rule 72 (oper -> ID OPEN expr CLOSE .)
    ES              reduce using rule 72 (oper -> ID OPEN expr CLOSE .)
    CLOSE           reduce using rule 72 (oper -> ID OPEN expr CLOSE .)
    ID              reduce using rule 72 (oper -> ID OPEN expr CLOSE .)
    EXTEND1         reduce using rule 72 (oper -> ID OPEN expr CLOSE .)
    EXTEND2         reduce using rule 72 (oper -> ID OPEN expr CLOSE .)
    UNDO            reduce using rule 72 (oper -> ID OPEN expr CLOSE .)
    FOPEN           reduce using rule 72 (oper -> ID OPEN expr CLOSE .)
    ACONST          reduce using rule 72 (oper -> ID OPEN expr CLOSE .)
    LCONST          reduce using rule 72 (oper -> ID OPEN expr CLOSE .)
    INCDEC          reduce using rule 72 (oper -> ID OPEN expr CLOSE .)
    NOT             reduce using rule 72 (oper -> ID OPEN expr CLOSE .)
    OPEN            reduce using rule 72 (oper -> ID OPEN expr CLOSE .)
    MOVE            reduce using rule 72 (oper -> ID OPEN expr CLOSE .)
    GET             reduce using rule 72 (oper -> ID OPEN expr CLOSE .)
    PUSH            reduce using rule 72 (oper -> ID OPEN expr CLOSE .)
    SIZE1           reduce using rule 72 (oper -> ID OPEN expr CLOSE .)
    SIZE2           reduce using rule 72 (oper -> ID OPEN expr CLOSE .)
    DO              reduce using rule 72 (oper -> ID OPEN expr CLOSE .)
    FUNCTION        reduce using rule 72 (oper -> ID OPEN expr CLOSE .)
    COMA            reduce using rule 72 (oper -> ID OPEN expr CLOSE .)
    FCLOSE          reduce using rule 72 (oper -> ID OPEN expr CLOSE .)
    ELSE            reduce using rule 72 (oper -> ID OPEN expr CLOSE .)
    SCLOSE          reduce using rule 72 (oper -> ID OPEN expr CLOSE .)
    COMD            reduce using rule 72 (oper -> ID OPEN expr CLOSE .)


state 115

    (15) sent -> EXTEND2 ID expr expr .
    (63) expr -> expr . GTLT expr
    (64) expr -> expr . OR expr

    ES              reduce using rule 15 (sent -> EXTEND2 ID expr expr .)
    FCLOSE          reduce using rule 15 (sent -> EXTEND2 ID expr expr .)
    ELSE            reduce using rule 15 (sent -> EXTEND2 ID expr expr .)
    GTLT            shift and go to state 55
    OR              shift and go to state 56


state 116

    (82) fcall -> SOPEN vars SCLOSE EQ . ID OPEN pars CLOSE

    ID              shift and go to state 139


state 117

    (83) vars -> ID COMA vars .

    SCLOSE          reduce using rule 83 (vars -> ID COMA vars .)


state 118

    (54) fvars -> ID EQ expr .
    (55) fvars -> ID EQ expr . COMA fvars
    (63) expr -> expr . GTLT expr
    (64) expr -> expr . OR expr

    SCLOSE          reduce using rule 54 (fvars -> ID EQ expr .)
    CLOSE           reduce using rule 54 (fvars -> ID EQ expr .)
    COMA            shift and go to state 140
    GTLT            shift and go to state 55
    OR              shift and go to state 56


state 119

    (18) group -> FOPEN lines line FCLOSE .

    ES              reduce using rule 18 (group -> FOPEN lines line FCLOSE .)
    FCLOSE          reduce using rule 18 (group -> FOPEN lines line FCLOSE .)
    ELSE            reduce using rule 18 (group -> FOPEN lines line FCLOSE .)


state 120

    (20) lines -> lines line es .
    (4) es -> es . es
    (4) es -> . es es
    (5) es -> . ES

  ! shift/reduce conflict for ES resolved as shift
    FCLOSE          reduce using rule 20 (lines -> lines line es .)
    ID              reduce using rule 20 (lines -> lines line es .)
    EXTEND1         reduce using rule 20 (lines -> lines line es .)
    EXTEND2         reduce using rule 20 (lines -> lines line es .)
    UNDO            reduce using rule 20 (lines -> lines line es .)
    SOPEN           reduce using rule 20 (lines -> lines line es .)
    FOPEN           reduce using rule 20 (lines -> lines line es .)
    ACONST          reduce using rule 20 (lines -> lines line es .)
    LCONST          reduce using rule 20 (lines -> lines line es .)
    INCDEC          reduce using rule 20 (lines -> lines line es .)
    NOT             reduce using rule 20 (lines -> lines line es .)
    OPEN            reduce using rule 20 (lines -> lines line es .)
    IF              reduce using rule 20 (lines -> lines line es .)
    WHILE           reduce using rule 20 (lines -> lines line es .)
    L2ARR           reduce using rule 20 (lines -> lines line es .)
    A2ARR           reduce using rule 20 (lines -> lines line es .)
    L1ARR           reduce using rule 20 (lines -> lines line es .)
    A1ARR           reduce using rule 20 (lines -> lines line es .)
    LVAR            reduce using rule 20 (lines -> lines line es .)
    AVAR            reduce using rule 20 (lines -> lines line es .)
    CLVAR           reduce using rule 20 (lines -> lines line es .)
    CAVAR           reduce using rule 20 (lines -> lines line es .)
    MOVE            reduce using rule 20 (lines -> lines line es .)
    GET             reduce using rule 20 (lines -> lines line es .)
    PUSH            reduce using rule 20 (lines -> lines line es .)
    SIZE1           reduce using rule 20 (lines -> lines line es .)
    SIZE2           reduce using rule 20 (lines -> lines line es .)
    ES              shift and go to state 50

  ! ES              [ reduce using rule 20 (lines -> lines line es .) ]

    es                             shift and go to state 80

state 121

    (13) sent -> ID EQ . expr
    (57) expr -> . oper
    (58) expr -> . ACONST
    (59) expr -> . LCONST
    (60) expr -> . ID
    (61) expr -> . INCDEC ID
    (62) expr -> . NOT expr
    (63) expr -> . expr GTLT expr
    (64) expr -> . expr OR expr
    (65) expr -> . OPEN expr CLOSE
    (66) oper -> . MOVE
    (67) oper -> . GET
    (68) oper -> . PUSH
    (69) oper -> . SIZE1 ID
    (70) oper -> . SIZE2 ID expr
    (71) oper -> . ID OPEN expr COMA expr CLOSE
    (72) oper -> . ID OPEN expr CLOSE

    ACONST          shift and go to state 30
    LCONST          shift and go to state 31
    ID              shift and go to state 64
    INCDEC          shift and go to state 32
    NOT             shift and go to state 33
    OPEN            shift and go to state 19
    MOVE            shift and go to state 44
    GET             shift and go to state 45
    PUSH            shift and go to state 46
    SIZE1           shift and go to state 47
    SIZE2           shift and go to state 48

    expr                           shift and go to state 141
    oper                           shift and go to state 29

state 122

    (75) cond -> IF expr sent else .

    ES              reduce using rule 75 (cond -> IF expr sent else .)
    FCLOSE          reduce using rule 75 (cond -> IF expr sent else .)


state 123

    (77) else -> ELSE . sent
    (78) else -> ELSE . group
    (13) sent -> . ID EQ expr
    (14) sent -> . EXTEND1 ID expr
    (15) sent -> . EXTEND2 ID expr expr
    (16) sent -> . expr
    (17) sent -> . UNDO
    (18) group -> . FOPEN lines line FCLOSE
    (19) group -> . FOPEN lines FCLOSE
    (57) expr -> . oper
    (58) expr -> . ACONST
    (59) expr -> . LCONST
    (60) expr -> . ID
    (61) expr -> . INCDEC ID
    (62) expr -> . NOT expr
    (63) expr -> . expr GTLT expr
    (64) expr -> . expr OR expr
    (65) expr -> . OPEN expr CLOSE
    (66) oper -> . MOVE
    (67) oper -> . GET
    (68) oper -> . PUSH
    (69) oper -> . SIZE1 ID
    (70) oper -> . SIZE2 ID expr
    (71) oper -> . ID OPEN expr COMA expr CLOSE
    (72) oper -> . ID OPEN expr CLOSE

    ID              shift and go to state 97
    EXTEND1         shift and go to state 13
    EXTEND2         shift and go to state 14
    UNDO            shift and go to state 15
    FOPEN           shift and go to state 20
    ACONST          shift and go to state 30
    LCONST          shift and go to state 31
    INCDEC          shift and go to state 32
    NOT             shift and go to state 33
    OPEN            shift and go to state 19
    MOVE            shift and go to state 44
    GET             shift and go to state 45
    PUSH            shift and go to state 46
    SIZE1           shift and go to state 47
    SIZE2           shift and go to state 48

    sent                           shift and go to state 142
    group                          shift and go to state 143
    expr                           shift and go to state 12
    oper                           shift and go to state 29

state 124

    (76) cond -> IF expr group else .

    ES              reduce using rule 76 (cond -> IF expr group else .)
    FCLOSE          reduce using rule 76 (cond -> IF expr group else .)


state 125

    (80) loop -> WHILE expr DO sent .

    ES              reduce using rule 80 (loop -> WHILE expr DO sent .)
    FCLOSE          reduce using rule 80 (loop -> WHILE expr DO sent .)


state 126

    (81) loop -> WHILE expr DO group .

    ES              reduce using rule 81 (loop -> WHILE expr DO group .)
    FCLOSE          reduce using rule 81 (loop -> WHILE expr DO group .)


state 127

    (41) 2ldecl -> L2ARR ID EQ SOPEN . arrs SCLOSE
    (46) arrs -> . vals COMD arrs
    (47) arrs -> . COMD arrs
    (48) arrs -> . vals
    (49) arrs -> .
    (44) vals -> . expr COMA vals
    (45) vals -> . expr
    (57) expr -> . oper
    (58) expr -> . ACONST
    (59) expr -> . LCONST
    (60) expr -> . ID
    (61) expr -> . INCDEC ID
    (62) expr -> . NOT expr
    (63) expr -> . expr GTLT expr
    (64) expr -> . expr OR expr
    (65) expr -> . OPEN expr CLOSE
    (66) oper -> . MOVE
    (67) oper -> . GET
    (68) oper -> . PUSH
    (69) oper -> . SIZE1 ID
    (70) oper -> . SIZE2 ID expr
    (71) oper -> . ID OPEN expr COMA expr CLOSE
    (72) oper -> . ID OPEN expr CLOSE

    COMD            shift and go to state 146
    SCLOSE          reduce using rule 49 (arrs -> .)
    ACONST          shift and go to state 30
    LCONST          shift and go to state 31
    ID              shift and go to state 64
    INCDEC          shift and go to state 32
    NOT             shift and go to state 33
    OPEN            shift and go to state 19
    MOVE            shift and go to state 44
    GET             shift and go to state 45
    PUSH            shift and go to state 46
    SIZE1           shift and go to state 47
    SIZE2           shift and go to state 48

    arrs                           shift and go to state 144
    vals                           shift and go to state 145
    expr                           shift and go to state 147
    oper                           shift and go to state 29

state 128

    (43) 2adecl -> A2ARR ID EQ SOPEN . arrs SCLOSE
    (46) arrs -> . vals COMD arrs
    (47) arrs -> . COMD arrs
    (48) arrs -> . vals
    (49) arrs -> .
    (44) vals -> . expr COMA vals
    (45) vals -> . expr
    (57) expr -> . oper
    (58) expr -> . ACONST
    (59) expr -> . LCONST
    (60) expr -> . ID
    (61) expr -> . INCDEC ID
    (62) expr -> . NOT expr
    (63) expr -> . expr GTLT expr
    (64) expr -> . expr OR expr
    (65) expr -> . OPEN expr CLOSE
    (66) oper -> . MOVE
    (67) oper -> . GET
    (68) oper -> . PUSH
    (69) oper -> . SIZE1 ID
    (70) oper -> . SIZE2 ID expr
    (71) oper -> . ID OPEN expr COMA expr CLOSE
    (72) oper -> . ID OPEN expr CLOSE

    COMD            shift and go to state 146
    SCLOSE          reduce using rule 49 (arrs -> .)
    ACONST          shift and go to state 30
    LCONST          shift and go to state 31
    ID              shift and go to state 64
    INCDEC          shift and go to state 32
    NOT             shift and go to state 33
    OPEN            shift and go to state 19
    MOVE            shift and go to state 44
    GET             shift and go to state 45
    PUSH            shift and go to state 46
    SIZE1           shift and go to state 47
    SIZE2           shift and go to state 48

    arrs                           shift and go to state 148
    vals                           shift and go to state 145
    expr                           shift and go to state 147
    oper                           shift and go to state 29

state 129

    (37) 1ldecl -> L1ARR ID EQ SOPEN . vals SCLOSE
    (44) vals -> . expr COMA vals
    (45) vals -> . expr
    (57) expr -> . oper
    (58) expr -> . ACONST
    (59) expr -> . LCONST
    (60) expr -> . ID
    (61) expr -> . INCDEC ID
    (62) expr -> . NOT expr
    (63) expr -> . expr GTLT expr
    (64) expr -> . expr OR expr
    (65) expr -> . OPEN expr CLOSE
    (66) oper -> . MOVE
    (67) oper -> . GET
    (68) oper -> . PUSH
    (69) oper -> . SIZE1 ID
    (70) oper -> . SIZE2 ID expr
    (71) oper -> . ID OPEN expr COMA expr CLOSE
    (72) oper -> . ID OPEN expr CLOSE

    ACONST          shift and go to state 30
    LCONST          shift and go to state 31
    ID              shift and go to state 64
    INCDEC          shift and go to state 32
    NOT             shift and go to state 33
    OPEN            shift and go to state 19
    MOVE            shift and go to state 44
    GET             shift and go to state 45
    PUSH            shift and go to state 46
    SIZE1           shift and go to state 47
    SIZE2           shift and go to state 48

    vals                           shift and go to state 149
    expr                           shift and go to state 147
    oper                           shift and go to state 29

state 130

    (39) 1adecl -> A1ARR ID EQ SOPEN . vals SCLOSE
    (44) vals -> . expr COMA vals
    (45) vals -> . expr
    (57) expr -> . oper
    (58) expr -> . ACONST
    (59) expr -> . LCONST
    (60) expr -> . ID
    (61) expr -> . INCDEC ID
    (62) expr -> . NOT expr
    (63) expr -> . expr GTLT expr
    (64) expr -> . expr OR expr
    (65) expr -> . OPEN expr CLOSE
    (66) oper -> . MOVE
    (67) oper -> . GET
    (68) oper -> . PUSH
    (69) oper -> . SIZE1 ID
    (70) oper -> . SIZE2 ID expr
    (71) oper -> . ID OPEN expr COMA expr CLOSE
    (72) oper -> . ID OPEN expr CLOSE

    ACONST          shift and go to state 30
    LCONST          shift and go to state 31
    ID              shift and go to state 64
    INCDEC          shift and go to state 32
    NOT             shift and go to state 33
    OPEN            shift and go to state 19
    MOVE            shift and go to state 44
    GET             shift and go to state 45
    PUSH            shift and go to state 46
    SIZE1           shift and go to state 47
    SIZE2           shift and go to state 48

    vals                           shift and go to state 150
    expr                           shift and go to state 147
    oper                           shift and go to state 29

state 131

    (33) lvdecl -> LVAR ID EQ expr .
    (63) expr -> expr . GTLT expr
    (64) expr -> expr . OR expr

    ES              reduce using rule 33 (lvdecl -> LVAR ID EQ expr .)
    FCLOSE          reduce using rule 33 (lvdecl -> LVAR ID EQ expr .)
    GTLT            shift and go to state 55
    OR              shift and go to state 56


state 132

    (35) avdecl -> AVAR ID EQ expr .
    (63) expr -> expr . GTLT expr
    (64) expr -> expr . OR expr

    ES              reduce using rule 35 (avdecl -> AVAR ID EQ expr .)
    FCLOSE          reduce using rule 35 (avdecl -> AVAR ID EQ expr .)
    GTLT            shift and go to state 55
    OR              shift and go to state 56


state 133

    (30) cldecl -> CLVAR ID EQ expr .
    (63) expr -> expr . GTLT expr
    (64) expr -> expr . OR expr

    ES              reduce using rule 30 (cldecl -> CLVAR ID EQ expr .)
    FCLOSE          reduce using rule 30 (cldecl -> CLVAR ID EQ expr .)
    GTLT            shift and go to state 55
    OR              shift and go to state 56


state 134

    (31) cadecl -> CAVAR ID EQ expr .
    (63) expr -> expr . GTLT expr
    (64) expr -> expr . OR expr

    ES              reduce using rule 31 (cadecl -> CAVAR ID EQ expr .)
    FCLOSE          reduce using rule 31 (cadecl -> CAVAR ID EQ expr .)
    GTLT            shift and go to state 55
    OR              shift and go to state 56


state 135

    (50) fdecl -> fovars FUNCTION ID fivars group .

    ES              reduce using rule 50 (fdecl -> fovars FUNCTION ID fivars group .)


state 136

    (53) fivars -> OPEN fvars . CLOSE

    CLOSE           shift and go to state 151


state 137

    (54) fvars -> ID . EQ expr
    (55) fvars -> ID . EQ expr COMA fvars

    EQ              shift and go to state 90


state 138

    (71) oper -> ID OPEN expr COMA expr . CLOSE
    (63) expr -> expr . GTLT expr
    (64) expr -> expr . OR expr

    CLOSE           shift and go to state 152
    GTLT            shift and go to state 55
    OR              shift and go to state 56


state 139

    (82) fcall -> SOPEN vars SCLOSE EQ ID . OPEN pars CLOSE

    OPEN            shift and go to state 153


state 140

    (55) fvars -> ID EQ expr COMA . fvars
    (54) fvars -> . ID EQ expr
    (55) fvars -> . ID EQ expr COMA fvars
    (56) fvars -> .

    ID              shift and go to state 137
    SCLOSE          reduce using rule 56 (fvars -> .)
    CLOSE           reduce using rule 56 (fvars -> .)

    fvars                          shift and go to state 154

state 141

    (13) sent -> ID EQ expr .
    (63) expr -> expr . GTLT expr
    (64) expr -> expr . OR expr

    FCLOSE          reduce using rule 13 (sent -> ID EQ expr .)
    ES              reduce using rule 13 (sent -> ID EQ expr .)
    ELSE            reduce using rule 13 (sent -> ID EQ expr .)
    GTLT            shift and go to state 55
    OR              shift and go to state 56


state 142

    (77) else -> ELSE sent .

    ES              reduce using rule 77 (else -> ELSE sent .)
    FCLOSE          reduce using rule 77 (else -> ELSE sent .)


state 143

    (78) else -> ELSE group .

    ES              reduce using rule 78 (else -> ELSE group .)
    FCLOSE          reduce using rule 78 (else -> ELSE group .)


state 144

    (41) 2ldecl -> L2ARR ID EQ SOPEN arrs . SCLOSE

    SCLOSE          shift and go to state 155


state 145

    (46) arrs -> vals . COMD arrs
    (48) arrs -> vals .

    COMD            shift and go to state 156
    SCLOSE          reduce using rule 48 (arrs -> vals .)


state 146

    (47) arrs -> COMD . arrs
    (46) arrs -> . vals COMD arrs
    (47) arrs -> . COMD arrs
    (48) arrs -> . vals
    (49) arrs -> .
    (44) vals -> . expr COMA vals
    (45) vals -> . expr
    (57) expr -> . oper
    (58) expr -> . ACONST
    (59) expr -> . LCONST
    (60) expr -> . ID
    (61) expr -> . INCDEC ID
    (62) expr -> . NOT expr
    (63) expr -> . expr GTLT expr
    (64) expr -> . expr OR expr
    (65) expr -> . OPEN expr CLOSE
    (66) oper -> . MOVE
    (67) oper -> . GET
    (68) oper -> . PUSH
    (69) oper -> . SIZE1 ID
    (70) oper -> . SIZE2 ID expr
    (71) oper -> . ID OPEN expr COMA expr CLOSE
    (72) oper -> . ID OPEN expr CLOSE

    COMD            shift and go to state 146
    SCLOSE          reduce using rule 49 (arrs -> .)
    ACONST          shift and go to state 30
    LCONST          shift and go to state 31
    ID              shift and go to state 64
    INCDEC          shift and go to state 32
    NOT             shift and go to state 33
    OPEN            shift and go to state 19
    MOVE            shift and go to state 44
    GET             shift and go to state 45
    PUSH            shift and go to state 46
    SIZE1           shift and go to state 47
    SIZE2           shift and go to state 48

    arrs                           shift and go to state 157
    vals                           shift and go to state 145
    expr                           shift and go to state 147
    oper                           shift and go to state 29

state 147

    (44) vals -> expr . COMA vals
    (45) vals -> expr .
    (63) expr -> expr . GTLT expr
    (64) expr -> expr . OR expr

    COMA            shift and go to state 158
    COMD            reduce using rule 45 (vals -> expr .)
    SCLOSE          reduce using rule 45 (vals -> expr .)
    GTLT            shift and go to state 55
    OR              shift and go to state 56


state 148

    (43) 2adecl -> A2ARR ID EQ SOPEN arrs . SCLOSE

    SCLOSE          shift and go to state 159


state 149

    (37) 1ldecl -> L1ARR ID EQ SOPEN vals . SCLOSE

    SCLOSE          shift and go to state 160


state 150

    (39) 1adecl -> A1ARR ID EQ SOPEN vals . SCLOSE

    SCLOSE          shift and go to state 161


state 151

    (53) fivars -> OPEN fvars CLOSE .

    FOPEN           reduce using rule 53 (fivars -> OPEN fvars CLOSE .)


state 152

    (71) oper -> ID OPEN expr COMA expr CLOSE .

    GTLT            reduce using rule 71 (oper -> ID OPEN expr COMA expr CLOSE .)
    OR              reduce using rule 71 (oper -> ID OPEN expr COMA expr CLOSE .)
    ES              reduce using rule 71 (oper -> ID OPEN expr COMA expr CLOSE .)
    CLOSE           reduce using rule 71 (oper -> ID OPEN expr COMA expr CLOSE .)
    ID              reduce using rule 71 (oper -> ID OPEN expr COMA expr CLOSE .)
    EXTEND1         reduce using rule 71 (oper -> ID OPEN expr COMA expr CLOSE .)
    EXTEND2         reduce using rule 71 (oper -> ID OPEN expr COMA expr CLOSE .)
    UNDO            reduce using rule 71 (oper -> ID OPEN expr COMA expr CLOSE .)
    FOPEN           reduce using rule 71 (oper -> ID OPEN expr COMA expr CLOSE .)
    ACONST          reduce using rule 71 (oper -> ID OPEN expr COMA expr CLOSE .)
    LCONST          reduce using rule 71 (oper -> ID OPEN expr COMA expr CLOSE .)
    INCDEC          reduce using rule 71 (oper -> ID OPEN expr COMA expr CLOSE .)
    NOT             reduce using rule 71 (oper -> ID OPEN expr COMA expr CLOSE .)
    OPEN            reduce using rule 71 (oper -> ID OPEN expr COMA expr CLOSE .)
    MOVE            reduce using rule 71 (oper -> ID OPEN expr COMA expr CLOSE .)
    GET             reduce using rule 71 (oper -> ID OPEN expr COMA expr CLOSE .)
    PUSH            reduce using rule 71 (oper -> ID OPEN expr COMA expr CLOSE .)
    SIZE1           reduce using rule 71 (oper -> ID OPEN expr COMA expr CLOSE .)
    SIZE2           reduce using rule 71 (oper -> ID OPEN expr COMA expr CLOSE .)
    DO              reduce using rule 71 (oper -> ID OPEN expr COMA expr CLOSE .)
    FUNCTION        reduce using rule 71 (oper -> ID OPEN expr COMA expr CLOSE .)
    COMA            reduce using rule 71 (oper -> ID OPEN expr COMA expr CLOSE .)
    FCLOSE          reduce using rule 71 (oper -> ID OPEN expr COMA expr CLOSE .)
    ELSE            reduce using rule 71 (oper -> ID OPEN expr COMA expr CLOSE .)
    SCLOSE          reduce using rule 71 (oper -> ID OPEN expr COMA expr CLOSE .)
    COMD            reduce using rule 71 (oper -> ID OPEN expr COMA expr CLOSE .)


state 153

    (82) fcall -> SOPEN vars SCLOSE EQ ID OPEN . pars CLOSE
    (87) pars -> . expr COMA pars
    (88) pars -> . COMA pars
    (89) pars -> . expr
    (90) pars -> .
    (57) expr -> . oper
    (58) expr -> . ACONST
    (59) expr -> . LCONST
    (60) expr -> . ID
    (61) expr -> . INCDEC ID
    (62) expr -> . NOT expr
    (63) expr -> . expr GTLT expr
    (64) expr -> . expr OR expr
    (65) expr -> . OPEN expr CLOSE
    (66) oper -> . MOVE
    (67) oper -> . GET
    (68) oper -> . PUSH
    (69) oper -> . SIZE1 ID
    (70) oper -> . SIZE2 ID expr
    (71) oper -> . ID OPEN expr COMA expr CLOSE
    (72) oper -> . ID OPEN expr CLOSE

    COMA            shift and go to state 164
    CLOSE           reduce using rule 90 (pars -> .)
    ACONST          shift and go to state 30
    LCONST          shift and go to state 31
    ID              shift and go to state 64
    INCDEC          shift and go to state 32
    NOT             shift and go to state 33
    OPEN            shift and go to state 19
    MOVE            shift and go to state 44
    GET             shift and go to state 45
    PUSH            shift and go to state 46
    SIZE1           shift and go to state 47
    SIZE2           shift and go to state 48

    pars                           shift and go to state 162
    expr                           shift and go to state 163
    oper                           shift and go to state 29

state 154

    (55) fvars -> ID EQ expr COMA fvars .

    SCLOSE          reduce using rule 55 (fvars -> ID EQ expr COMA fvars .)
    CLOSE           reduce using rule 55 (fvars -> ID EQ expr COMA fvars .)


state 155

    (41) 2ldecl -> L2ARR ID EQ SOPEN arrs SCLOSE .

    ES              reduce using rule 41 (2ldecl -> L2ARR ID EQ SOPEN arrs SCLOSE .)
    FCLOSE          reduce using rule 41 (2ldecl -> L2ARR ID EQ SOPEN arrs SCLOSE .)


state 156

    (46) arrs -> vals COMD . arrs
    (46) arrs -> . vals COMD arrs
    (47) arrs -> . COMD arrs
    (48) arrs -> . vals
    (49) arrs -> .
    (44) vals -> . expr COMA vals
    (45) vals -> . expr
    (57) expr -> . oper
    (58) expr -> . ACONST
    (59) expr -> . LCONST
    (60) expr -> . ID
    (61) expr -> . INCDEC ID
    (62) expr -> . NOT expr
    (63) expr -> . expr GTLT expr
    (64) expr -> . expr OR expr
    (65) expr -> . OPEN expr CLOSE
    (66) oper -> . MOVE
    (67) oper -> . GET
    (68) oper -> . PUSH
    (69) oper -> . SIZE1 ID
    (70) oper -> . SIZE2 ID expr
    (71) oper -> . ID OPEN expr COMA expr CLOSE
    (72) oper -> . ID OPEN expr CLOSE

    COMD            shift and go to state 146
    SCLOSE          reduce using rule 49 (arrs -> .)
    ACONST          shift and go to state 30
    LCONST          shift and go to state 31
    ID              shift and go to state 64
    INCDEC          shift and go to state 32
    NOT             shift and go to state 33
    OPEN            shift and go to state 19
    MOVE            shift and go to state 44
    GET             shift and go to state 45
    PUSH            shift and go to state 46
    SIZE1           shift and go to state 47
    SIZE2           shift and go to state 48

    vals                           shift and go to state 145
    arrs                           shift and go to state 165
    expr                           shift and go to state 147
    oper                           shift and go to state 29

state 157

    (47) arrs -> COMD arrs .

    SCLOSE          reduce using rule 47 (arrs -> COMD arrs .)


state 158

    (44) vals -> expr COMA . vals
    (44) vals -> . expr COMA vals
    (45) vals -> . expr
    (57) expr -> . oper
    (58) expr -> . ACONST
    (59) expr -> . LCONST
    (60) expr -> . ID
    (61) expr -> . INCDEC ID
    (62) expr -> . NOT expr
    (63) expr -> . expr GTLT expr
    (64) expr -> . expr OR expr
    (65) expr -> . OPEN expr CLOSE
    (66) oper -> . MOVE
    (67) oper -> . GET
    (68) oper -> . PUSH
    (69) oper -> . SIZE1 ID
    (70) oper -> . SIZE2 ID expr
    (71) oper -> . ID OPEN expr COMA expr CLOSE
    (72) oper -> . ID OPEN expr CLOSE

    ACONST          shift and go to state 30
    LCONST          shift and go to state 31
    ID              shift and go to state 64
    INCDEC          shift and go to state 32
    NOT             shift and go to state 33
    OPEN            shift and go to state 19
    MOVE            shift and go to state 44
    GET             shift and go to state 45
    PUSH            shift and go to state 46
    SIZE1           shift and go to state 47
    SIZE2           shift and go to state 48

    expr                           shift and go to state 147
    vals                           shift and go to state 166
    oper                           shift and go to state 29

state 159

    (43) 2adecl -> A2ARR ID EQ SOPEN arrs SCLOSE .

    ES              reduce using rule 43 (2adecl -> A2ARR ID EQ SOPEN arrs SCLOSE .)
    FCLOSE          reduce using rule 43 (2adecl -> A2ARR ID EQ SOPEN arrs SCLOSE .)


state 160

    (37) 1ldecl -> L1ARR ID EQ SOPEN vals SCLOSE .

    ES              reduce using rule 37 (1ldecl -> L1ARR ID EQ SOPEN vals SCLOSE .)
    FCLOSE          reduce using rule 37 (1ldecl -> L1ARR ID EQ SOPEN vals SCLOSE .)


state 161

    (39) 1adecl -> A1ARR ID EQ SOPEN vals SCLOSE .

    ES              reduce using rule 39 (1adecl -> A1ARR ID EQ SOPEN vals SCLOSE .)
    FCLOSE          reduce using rule 39 (1adecl -> A1ARR ID EQ SOPEN vals SCLOSE .)


state 162

    (82) fcall -> SOPEN vars SCLOSE EQ ID OPEN pars . CLOSE

    CLOSE           shift and go to state 167


state 163

    (87) pars -> expr . COMA pars
    (89) pars -> expr .
    (63) expr -> expr . GTLT expr
    (64) expr -> expr . OR expr

    COMA            shift and go to state 168
    CLOSE           reduce using rule 89 (pars -> expr .)
    GTLT            shift and go to state 55
    OR              shift and go to state 56


state 164

    (88) pars -> COMA . pars
    (87) pars -> . expr COMA pars
    (88) pars -> . COMA pars
    (89) pars -> . expr
    (90) pars -> .
    (57) expr -> . oper
    (58) expr -> . ACONST
    (59) expr -> . LCONST
    (60) expr -> . ID
    (61) expr -> . INCDEC ID
    (62) expr -> . NOT expr
    (63) expr -> . expr GTLT expr
    (64) expr -> . expr OR expr
    (65) expr -> . OPEN expr CLOSE
    (66) oper -> . MOVE
    (67) oper -> . GET
    (68) oper -> . PUSH
    (69) oper -> . SIZE1 ID
    (70) oper -> . SIZE2 ID expr
    (71) oper -> . ID OPEN expr COMA expr CLOSE
    (72) oper -> . ID OPEN expr CLOSE

    COMA            shift and go to state 164
    CLOSE           reduce using rule 90 (pars -> .)
    ACONST          shift and go to state 30
    LCONST          shift and go to state 31
    ID              shift and go to state 64
    INCDEC          shift and go to state 32
    NOT             shift and go to state 33
    OPEN            shift and go to state 19
    MOVE            shift and go to state 44
    GET             shift and go to state 45
    PUSH            shift and go to state 46
    SIZE1           shift and go to state 47
    SIZE2           shift and go to state 48

    pars                           shift and go to state 169
    expr                           shift and go to state 163
    oper                           shift and go to state 29

state 165

    (46) arrs -> vals COMD arrs .

    SCLOSE          reduce using rule 46 (arrs -> vals COMD arrs .)


state 166

    (44) vals -> expr COMA vals .

    COMD            reduce using rule 44 (vals -> expr COMA vals .)
    SCLOSE          reduce using rule 44 (vals -> expr COMA vals .)


state 167

    (82) fcall -> SOPEN vars SCLOSE EQ ID OPEN pars CLOSE .

    ES              reduce using rule 82 (fcall -> SOPEN vars SCLOSE EQ ID OPEN pars CLOSE .)
    FCLOSE          reduce using rule 82 (fcall -> SOPEN vars SCLOSE EQ ID OPEN pars CLOSE .)


state 168

    (87) pars -> expr COMA . pars
    (87) pars -> . expr COMA pars
    (88) pars -> . COMA pars
    (89) pars -> . expr
    (90) pars -> .
    (57) expr -> . oper
    (58) expr -> . ACONST
    (59) expr -> . LCONST
    (60) expr -> . ID
    (61) expr -> . INCDEC ID
    (62) expr -> . NOT expr
    (63) expr -> . expr GTLT expr
    (64) expr -> . expr OR expr
    (65) expr -> . OPEN expr CLOSE
    (66) oper -> . MOVE
    (67) oper -> . GET
    (68) oper -> . PUSH
    (69) oper -> . SIZE1 ID
    (70) oper -> . SIZE2 ID expr
    (71) oper -> . ID OPEN expr COMA expr CLOSE
    (72) oper -> . ID OPEN expr CLOSE

    COMA            shift and go to state 164
    CLOSE           reduce using rule 90 (pars -> .)
    ACONST          shift and go to state 30
    LCONST          shift and go to state 31
    ID              shift and go to state 64
    INCDEC          shift and go to state 32
    NOT             shift and go to state 33
    OPEN            shift and go to state 19
    MOVE            shift and go to state 44
    GET             shift and go to state 45
    PUSH            shift and go to state 46
    SIZE1           shift and go to state 47
    SIZE2           shift and go to state 48

    expr                           shift and go to state 163
    pars                           shift and go to state 170
    oper                           shift and go to state 29

state 169

    (88) pars -> COMA pars .

    CLOSE           reduce using rule 88 (pars -> COMA pars .)


state 170

    (87) pars -> expr COMA pars .

    CLOSE           reduce using rule 87 (pars -> expr COMA pars .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ES in state 49 resolved as shift
WARNING: shift/reduce conflict for ES in state 51 resolved as shift
WARNING: shift/reduce conflict for OPEN in state 64 resolved as shift
WARNING: shift/reduce conflict for FCLOSE in state 65 resolved as shift
WARNING: shift/reduce conflict for GTLT in state 67 resolved as shift
WARNING: shift/reduce conflict for OR in state 67 resolved as shift
WARNING: shift/reduce conflict for ES in state 80 resolved as shift
WARNING: shift/reduce conflict for GTLT in state 84 resolved as shift
WARNING: shift/reduce conflict for OR in state 84 resolved as shift
WARNING: shift/reduce conflict for GTLT in state 85 resolved as shift
WARNING: shift/reduce conflict for OR in state 85 resolved as shift
WARNING: shift/reduce conflict for GTLT in state 110 resolved as shift
WARNING: shift/reduce conflict for OR in state 110 resolved as shift
WARNING: shift/reduce conflict for ES in state 120 resolved as shift
WARNING: reduce/reduce conflict in state 18 resolved using rule (fvars -> <empty>)
WARNING: rejected rule (vars -> <empty>) in state 18
