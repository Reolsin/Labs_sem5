Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> prog
Rule 1     prog -> prog line es
Rule 2     prog -> prog fdecl es
Rule 3     prog -> <empty>
Rule 4     es -> es es
Rule 5     es -> ES
Rule 6     line -> sent
Rule 7     line -> logic
Rule 8     line -> fcall
Rule 9     line -> group
Rule 10    line -> decl
Rule 11    line -> cdecl
Rule 12    line -> <empty>
Rule 13    sent -> ID EQ expr
Rule 14    sent -> access EQ expr
Rule 15    sent -> EXTEND1 ID expr
Rule 16    sent -> EXTEND2 ID expr expr
Rule 17    sent -> expr
Rule 18    sent -> UNDO
Rule 19    group -> FOPEN lines line FCLOSE
Rule 20    group -> FOPEN lines FCLOSE
Rule 21    lines -> lines line es
Rule 22    lines -> <empty>
Rule 23    decl -> 2ldecl
Rule 24    decl -> 2adecl
Rule 25    decl -> 1ldecl
Rule 26    decl -> 1adecl
Rule 27    decl -> lvdecl
Rule 28    decl -> avdecl
Rule 29    cdecl -> cldecl
Rule 30    cdecl -> cadecl
Rule 31    cldecl -> CLVAR ID EQ expr
Rule 32    cadecl -> CAVAR ID EQ expr
Rule 33    lvdecl -> LVAR ID
Rule 34    lvdecl -> LVAR ID EQ expr
Rule 35    avdecl -> AVAR ID
Rule 36    avdecl -> AVAR ID EQ expr
Rule 37    1ldecl -> L1ARR ID
Rule 38    1ldecl -> L1ARR ID EQ SOPEN vals SCLOSE
Rule 39    1adecl -> A1ARR ID
Rule 40    1adecl -> A1ARR ID EQ SOPEN vals SCLOSE
Rule 41    2ldecl -> L2ARR ID
Rule 42    2ldecl -> L2ARR ID EQ SOPEN arrs SCLOSE
Rule 43    2adecl -> A2ARR ID
Rule 44    2adecl -> A2ARR ID EQ SOPEN arrs SCLOSE
Rule 45    vals -> expr COMA vals
Rule 46    vals -> expr
Rule 47    arrs -> vals COMD arrs
Rule 48    arrs -> COMD arrs
Rule 49    arrs -> vals
Rule 50    arrs -> <empty>
Rule 51    fdecl -> fovars FUNCTION ID fivars group
Rule 52    fovars -> ID EQ expr
Rule 53    fovars -> SOPEN fvars SCLOSE
Rule 54    fivars -> OPEN fvars CLOSE
Rule 55    fvars -> ID EQ expr
Rule 56    fvars -> ID EQ expr COMA fvars
Rule 57    fvars -> <empty>
Rule 58    expr -> oper
Rule 59    expr -> ACONST
Rule 60    expr -> LCONST
Rule 61    expr -> ID
Rule 62    expr -> NOT expr
Rule 63    expr -> INCDEC ID
Rule 64    expr -> expr GTLT expr
Rule 65    expr -> expr OR expr
Rule 66    expr -> OPEN expr CLOSE
Rule 67    oper -> MOVE
Rule 68    oper -> GET
Rule 69    oper -> PUSH
Rule 70    oper -> SIZE1 ID
Rule 71    oper -> SIZE2 ID expr
Rule 72    oper -> access
Rule 73    access -> ID OPEN expr COMA expr CLOSE
Rule 74    access -> ID OPEN expr CLOSE
Rule 75    logic -> cond
Rule 76    logic -> loop
Rule 77    cond -> IF expr sent else
Rule 78    cond -> IF expr group else
Rule 79    else -> ELSE sent
Rule 80    else -> ELSE group
Rule 81    else -> <empty>
Rule 82    loop -> WHILE expr DO sent
Rule 83    loop -> WHILE expr DO group
Rule 84    fcall -> SOPEN vars SCLOSE EQ ID OPEN pars CLOSE
Rule 85    fcall -> ID EQ ID OPEN pars CLOSE
Rule 86    vars -> ID COMA vars
Rule 87    vars -> COMA vars
Rule 88    vars -> ID
Rule 89    vars -> <empty>
Rule 90    pars -> expr COMA pars
Rule 91    pars -> COMA pars
Rule 92    pars -> expr
Rule 93    pars -> <empty>

Terminals, with rules where they appear

A1ARR                : 39 40
A2ARR                : 43 44
ACONST               : 59
AVAR                 : 35 36
CAVAR                : 32
CLOSE                : 54 66 73 74 84 85
CLVAR                : 31
COMA                 : 45 56 73 86 87 90 91
COMD                 : 47 48
DO                   : 82 83
ELSE                 : 79 80
EQ                   : 13 14 31 32 34 36 38 40 42 44 52 55 56 84 85
ES                   : 5
EXTEND1              : 15
EXTEND2              : 16
FCLOSE               : 19 20
FOPEN                : 19 20
FUNCTION             : 51
GET                  : 68
GTLT                 : 64
ID                   : 13 15 16 31 32 33 34 35 36 37 38 39 40 41 42 43 44 51 52 55 56 61 63 70 71 73 74 84 85 85 86 88
IF                   : 77 78
INCDEC               : 63
L1ARR                : 37 38
L2ARR                : 41 42
LCONST               : 60
LVAR                 : 33 34
MOVE                 : 67
NOT                  : 62
OPEN                 : 54 66 73 74 84 85
OR                   : 65
PUSH                 : 69
SCLOSE               : 38 40 42 44 53 84
SIZE1                : 70
SIZE2                : 71
SOPEN                : 38 40 42 44 53 84
UNDO                 : 18
WHILE                : 82 83
error                : 

Nonterminals, with rules where they appear

1adecl               : 26
1ldecl               : 25
2adecl               : 24
2ldecl               : 23
access               : 14 72
arrs                 : 42 44 47 48
avdecl               : 28
cadecl               : 30
cdecl                : 11
cldecl               : 29
cond                 : 75
decl                 : 10
else                 : 77 78
es                   : 1 2 4 4 21
expr                 : 13 14 15 16 16 17 31 32 34 36 45 46 52 55 56 62 64 64 65 65 66 71 73 73 74 77 78 82 83 90 92
fcall                : 8
fdecl                : 2
fivars               : 51
fovars               : 51
fvars                : 53 54 56
group                : 9 51 78 80 83
line                 : 1 19 21
lines                : 19 20 21
logic                : 7
loop                 : 76
lvdecl               : 27
oper                 : 58
pars                 : 84 85 90 91
prog                 : 1 2 0
sent                 : 6 77 79 82
vals                 : 38 40 45 47 49
vars                 : 84 86 87

Parsing method: LALR

state 0

    (0) S' -> . prog
    (1) prog -> . prog line es
    (2) prog -> . prog fdecl es
    (3) prog -> .

    ID              reduce using rule 3 (prog -> .)
    EXTEND1         reduce using rule 3 (prog -> .)
    EXTEND2         reduce using rule 3 (prog -> .)
    UNDO            reduce using rule 3 (prog -> .)
    SOPEN           reduce using rule 3 (prog -> .)
    FOPEN           reduce using rule 3 (prog -> .)
    ACONST          reduce using rule 3 (prog -> .)
    LCONST          reduce using rule 3 (prog -> .)
    NOT             reduce using rule 3 (prog -> .)
    INCDEC          reduce using rule 3 (prog -> .)
    OPEN            reduce using rule 3 (prog -> .)
    IF              reduce using rule 3 (prog -> .)
    WHILE           reduce using rule 3 (prog -> .)
    L2ARR           reduce using rule 3 (prog -> .)
    A2ARR           reduce using rule 3 (prog -> .)
    L1ARR           reduce using rule 3 (prog -> .)
    A1ARR           reduce using rule 3 (prog -> .)
    LVAR            reduce using rule 3 (prog -> .)
    AVAR            reduce using rule 3 (prog -> .)
    CLVAR           reduce using rule 3 (prog -> .)
    CAVAR           reduce using rule 3 (prog -> .)
    MOVE            reduce using rule 3 (prog -> .)
    GET             reduce using rule 3 (prog -> .)
    PUSH            reduce using rule 3 (prog -> .)
    SIZE1           reduce using rule 3 (prog -> .)
    SIZE2           reduce using rule 3 (prog -> .)
    $end            reduce using rule 3 (prog -> .)
    ES              reduce using rule 3 (prog -> .)

    prog                           shift and go to state 1

state 1

    (0) S' -> prog .
    (1) prog -> prog . line es
    (2) prog -> prog . fdecl es
    (6) line -> . sent
    (7) line -> . logic
    (8) line -> . fcall
    (9) line -> . group
    (10) line -> . decl
    (11) line -> . cdecl
    (12) line -> .
    (51) fdecl -> . fovars FUNCTION ID fivars group
    (13) sent -> . ID EQ expr
    (14) sent -> . access EQ expr
    (15) sent -> . EXTEND1 ID expr
    (16) sent -> . EXTEND2 ID expr expr
    (17) sent -> . expr
    (18) sent -> . UNDO
    (75) logic -> . cond
    (76) logic -> . loop
    (84) fcall -> . SOPEN vars SCLOSE EQ ID OPEN pars CLOSE
    (85) fcall -> . ID EQ ID OPEN pars CLOSE
    (19) group -> . FOPEN lines line FCLOSE
    (20) group -> . FOPEN lines FCLOSE
    (23) decl -> . 2ldecl
    (24) decl -> . 2adecl
    (25) decl -> . 1ldecl
    (26) decl -> . 1adecl
    (27) decl -> . lvdecl
    (28) decl -> . avdecl
    (29) cdecl -> . cldecl
    (30) cdecl -> . cadecl
    (52) fovars -> . ID EQ expr
    (53) fovars -> . SOPEN fvars SCLOSE
    (73) access -> . ID OPEN expr COMA expr CLOSE
    (74) access -> . ID OPEN expr CLOSE
    (58) expr -> . oper
    (59) expr -> . ACONST
    (60) expr -> . LCONST
    (61) expr -> . ID
    (62) expr -> . NOT expr
    (63) expr -> . INCDEC ID
    (64) expr -> . expr GTLT expr
    (65) expr -> . expr OR expr
    (66) expr -> . OPEN expr CLOSE
    (77) cond -> . IF expr sent else
    (78) cond -> . IF expr group else
    (82) loop -> . WHILE expr DO sent
    (83) loop -> . WHILE expr DO group
    (41) 2ldecl -> . L2ARR ID
    (42) 2ldecl -> . L2ARR ID EQ SOPEN arrs SCLOSE
    (43) 2adecl -> . A2ARR ID
    (44) 2adecl -> . A2ARR ID EQ SOPEN arrs SCLOSE
    (37) 1ldecl -> . L1ARR ID
    (38) 1ldecl -> . L1ARR ID EQ SOPEN vals SCLOSE
    (39) 1adecl -> . A1ARR ID
    (40) 1adecl -> . A1ARR ID EQ SOPEN vals SCLOSE
    (33) lvdecl -> . LVAR ID
    (34) lvdecl -> . LVAR ID EQ expr
    (35) avdecl -> . AVAR ID
    (36) avdecl -> . AVAR ID EQ expr
    (31) cldecl -> . CLVAR ID EQ expr
    (32) cadecl -> . CAVAR ID EQ expr
    (67) oper -> . MOVE
    (68) oper -> . GET
    (69) oper -> . PUSH
    (70) oper -> . SIZE1 ID
    (71) oper -> . SIZE2 ID expr
    (72) oper -> . access

    ES              reduce using rule 12 (line -> .)
    ID              shift and go to state 11
    EXTEND1         shift and go to state 14
    EXTEND2         shift and go to state 15
    UNDO            shift and go to state 16
    SOPEN           shift and go to state 19
    FOPEN           shift and go to state 21
    ACONST          shift and go to state 31
    LCONST          shift and go to state 32
    NOT             shift and go to state 33
    INCDEC          shift and go to state 34
    OPEN            shift and go to state 20
    IF              shift and go to state 35
    WHILE           shift and go to state 36
    L2ARR           shift and go to state 37
    A2ARR           shift and go to state 38
    L1ARR           shift and go to state 39
    A1ARR           shift and go to state 40
    LVAR            shift and go to state 41
    AVAR            shift and go to state 42
    CLVAR           shift and go to state 43
    CAVAR           shift and go to state 44
    MOVE            shift and go to state 45
    GET             shift and go to state 46
    PUSH            shift and go to state 47
    SIZE1           shift and go to state 48
    SIZE2           shift and go to state 49

    line                           shift and go to state 2
    fdecl                          shift and go to state 3
    sent                           shift and go to state 4
    logic                          shift and go to state 5
    fcall                          shift and go to state 6
    group                          shift and go to state 7
    decl                           shift and go to state 8
    cdecl                          shift and go to state 9
    fovars                         shift and go to state 10
    expr                           shift and go to state 12
    access                         shift and go to state 13
    cond                           shift and go to state 17
    loop                           shift and go to state 18
    2ldecl                         shift and go to state 22
    2adecl                         shift and go to state 23
    1ldecl                         shift and go to state 24
    1adecl                         shift and go to state 25
    lvdecl                         shift and go to state 26
    avdecl                         shift and go to state 27
    cldecl                         shift and go to state 28
    cadecl                         shift and go to state 29
    oper                           shift and go to state 30

state 2

    (1) prog -> prog line . es
    (4) es -> . es es
    (5) es -> . ES

    ES              shift and go to state 51

    es                             shift and go to state 50

state 3

    (2) prog -> prog fdecl . es
    (4) es -> . es es
    (5) es -> . ES

    ES              shift and go to state 51

    es                             shift and go to state 52

state 4

    (6) line -> sent .

    ES              reduce using rule 6 (line -> sent .)
    FCLOSE          reduce using rule 6 (line -> sent .)


state 5

    (7) line -> logic .

    ES              reduce using rule 7 (line -> logic .)
    FCLOSE          reduce using rule 7 (line -> logic .)


state 6

    (8) line -> fcall .

    ES              reduce using rule 8 (line -> fcall .)
    FCLOSE          reduce using rule 8 (line -> fcall .)


state 7

    (9) line -> group .

    ES              reduce using rule 9 (line -> group .)
    FCLOSE          reduce using rule 9 (line -> group .)


state 8

    (10) line -> decl .

    ES              reduce using rule 10 (line -> decl .)
    FCLOSE          reduce using rule 10 (line -> decl .)


state 9

    (11) line -> cdecl .

    ES              reduce using rule 11 (line -> cdecl .)
    FCLOSE          reduce using rule 11 (line -> cdecl .)


state 10

    (51) fdecl -> fovars . FUNCTION ID fivars group

    FUNCTION        shift and go to state 53


state 11

    (13) sent -> ID . EQ expr
    (85) fcall -> ID . EQ ID OPEN pars CLOSE
    (52) fovars -> ID . EQ expr
    (73) access -> ID . OPEN expr COMA expr CLOSE
    (74) access -> ID . OPEN expr CLOSE
    (61) expr -> ID .

    EQ              shift and go to state 54
    OPEN            shift and go to state 55
    GTLT            reduce using rule 61 (expr -> ID .)
    OR              reduce using rule 61 (expr -> ID .)
    ES              reduce using rule 61 (expr -> ID .)


state 12

    (17) sent -> expr .
    (64) expr -> expr . GTLT expr
    (65) expr -> expr . OR expr

    ES              reduce using rule 17 (sent -> expr .)
    FCLOSE          reduce using rule 17 (sent -> expr .)
    ELSE            reduce using rule 17 (sent -> expr .)
    GTLT            shift and go to state 56
    OR              shift and go to state 57


state 13

    (14) sent -> access . EQ expr
    (72) oper -> access .

    EQ              shift and go to state 58
    GTLT            reduce using rule 72 (oper -> access .)
    OR              reduce using rule 72 (oper -> access .)
    ES              reduce using rule 72 (oper -> access .)
    FCLOSE          reduce using rule 72 (oper -> access .)
    ELSE            reduce using rule 72 (oper -> access .)


state 14

    (15) sent -> EXTEND1 . ID expr

    ID              shift and go to state 59


state 15

    (16) sent -> EXTEND2 . ID expr expr

    ID              shift and go to state 60


state 16

    (18) sent -> UNDO .

    ES              reduce using rule 18 (sent -> UNDO .)
    FCLOSE          reduce using rule 18 (sent -> UNDO .)
    ELSE            reduce using rule 18 (sent -> UNDO .)


state 17

    (75) logic -> cond .

    ES              reduce using rule 75 (logic -> cond .)
    FCLOSE          reduce using rule 75 (logic -> cond .)


state 18

    (76) logic -> loop .

    ES              reduce using rule 76 (logic -> loop .)
    FCLOSE          reduce using rule 76 (logic -> loop .)


state 19

    (84) fcall -> SOPEN . vars SCLOSE EQ ID OPEN pars CLOSE
    (53) fovars -> SOPEN . fvars SCLOSE
    (86) vars -> . ID COMA vars
    (87) vars -> . COMA vars
    (88) vars -> . ID
    (89) vars -> .
    (55) fvars -> . ID EQ expr
    (56) fvars -> . ID EQ expr COMA fvars
    (57) fvars -> .

  ! reduce/reduce conflict for SCLOSE resolved using rule 57 (fvars -> .)
    ID              shift and go to state 62
    COMA            shift and go to state 64
    SCLOSE          reduce using rule 57 (fvars -> .)

  ! SCLOSE          [ reduce using rule 89 (vars -> .) ]

    vars                           shift and go to state 61
    fvars                          shift and go to state 63

state 20

    (66) expr -> OPEN . expr CLOSE
    (58) expr -> . oper
    (59) expr -> . ACONST
    (60) expr -> . LCONST
    (61) expr -> . ID
    (62) expr -> . NOT expr
    (63) expr -> . INCDEC ID
    (64) expr -> . expr GTLT expr
    (65) expr -> . expr OR expr
    (66) expr -> . OPEN expr CLOSE
    (67) oper -> . MOVE
    (68) oper -> . GET
    (69) oper -> . PUSH
    (70) oper -> . SIZE1 ID
    (71) oper -> . SIZE2 ID expr
    (72) oper -> . access
    (73) access -> . ID OPEN expr COMA expr CLOSE
    (74) access -> . ID OPEN expr CLOSE

    ACONST          shift and go to state 31
    LCONST          shift and go to state 32
    ID              shift and go to state 66
    NOT             shift and go to state 33
    INCDEC          shift and go to state 34
    OPEN            shift and go to state 20
    MOVE            shift and go to state 45
    GET             shift and go to state 46
    PUSH            shift and go to state 47
    SIZE1           shift and go to state 48
    SIZE2           shift and go to state 49

    expr                           shift and go to state 65
    oper                           shift and go to state 30
    access                         shift and go to state 67

state 21

    (19) group -> FOPEN . lines line FCLOSE
    (20) group -> FOPEN . lines FCLOSE
    (21) lines -> . lines line es
    (22) lines -> .

    FCLOSE          reduce using rule 22 (lines -> .)
    ID              reduce using rule 22 (lines -> .)
    EXTEND1         reduce using rule 22 (lines -> .)
    EXTEND2         reduce using rule 22 (lines -> .)
    UNDO            reduce using rule 22 (lines -> .)
    SOPEN           reduce using rule 22 (lines -> .)
    FOPEN           reduce using rule 22 (lines -> .)
    ACONST          reduce using rule 22 (lines -> .)
    LCONST          reduce using rule 22 (lines -> .)
    NOT             reduce using rule 22 (lines -> .)
    INCDEC          reduce using rule 22 (lines -> .)
    OPEN            reduce using rule 22 (lines -> .)
    IF              reduce using rule 22 (lines -> .)
    WHILE           reduce using rule 22 (lines -> .)
    L2ARR           reduce using rule 22 (lines -> .)
    A2ARR           reduce using rule 22 (lines -> .)
    L1ARR           reduce using rule 22 (lines -> .)
    A1ARR           reduce using rule 22 (lines -> .)
    LVAR            reduce using rule 22 (lines -> .)
    AVAR            reduce using rule 22 (lines -> .)
    CLVAR           reduce using rule 22 (lines -> .)
    CAVAR           reduce using rule 22 (lines -> .)
    MOVE            reduce using rule 22 (lines -> .)
    GET             reduce using rule 22 (lines -> .)
    PUSH            reduce using rule 22 (lines -> .)
    SIZE1           reduce using rule 22 (lines -> .)
    SIZE2           reduce using rule 22 (lines -> .)
    ES              reduce using rule 22 (lines -> .)

    lines                          shift and go to state 68

state 22

    (23) decl -> 2ldecl .

    ES              reduce using rule 23 (decl -> 2ldecl .)
    FCLOSE          reduce using rule 23 (decl -> 2ldecl .)


state 23

    (24) decl -> 2adecl .

    ES              reduce using rule 24 (decl -> 2adecl .)
    FCLOSE          reduce using rule 24 (decl -> 2adecl .)


state 24

    (25) decl -> 1ldecl .

    ES              reduce using rule 25 (decl -> 1ldecl .)
    FCLOSE          reduce using rule 25 (decl -> 1ldecl .)


state 25

    (26) decl -> 1adecl .

    ES              reduce using rule 26 (decl -> 1adecl .)
    FCLOSE          reduce using rule 26 (decl -> 1adecl .)


state 26

    (27) decl -> lvdecl .

    ES              reduce using rule 27 (decl -> lvdecl .)
    FCLOSE          reduce using rule 27 (decl -> lvdecl .)


state 27

    (28) decl -> avdecl .

    ES              reduce using rule 28 (decl -> avdecl .)
    FCLOSE          reduce using rule 28 (decl -> avdecl .)


state 28

    (29) cdecl -> cldecl .

    ES              reduce using rule 29 (cdecl -> cldecl .)
    FCLOSE          reduce using rule 29 (cdecl -> cldecl .)


state 29

    (30) cdecl -> cadecl .

    ES              reduce using rule 30 (cdecl -> cadecl .)
    FCLOSE          reduce using rule 30 (cdecl -> cadecl .)


state 30

    (58) expr -> oper .

    GTLT            reduce using rule 58 (expr -> oper .)
    OR              reduce using rule 58 (expr -> oper .)
    ES              reduce using rule 58 (expr -> oper .)
    CLOSE           reduce using rule 58 (expr -> oper .)
    ID              reduce using rule 58 (expr -> oper .)
    EXTEND1         reduce using rule 58 (expr -> oper .)
    EXTEND2         reduce using rule 58 (expr -> oper .)
    UNDO            reduce using rule 58 (expr -> oper .)
    FOPEN           reduce using rule 58 (expr -> oper .)
    ACONST          reduce using rule 58 (expr -> oper .)
    LCONST          reduce using rule 58 (expr -> oper .)
    NOT             reduce using rule 58 (expr -> oper .)
    INCDEC          reduce using rule 58 (expr -> oper .)
    OPEN            reduce using rule 58 (expr -> oper .)
    MOVE            reduce using rule 58 (expr -> oper .)
    GET             reduce using rule 58 (expr -> oper .)
    PUSH            reduce using rule 58 (expr -> oper .)
    SIZE1           reduce using rule 58 (expr -> oper .)
    SIZE2           reduce using rule 58 (expr -> oper .)
    DO              reduce using rule 58 (expr -> oper .)
    FUNCTION        reduce using rule 58 (expr -> oper .)
    COMA            reduce using rule 58 (expr -> oper .)
    FCLOSE          reduce using rule 58 (expr -> oper .)
    ELSE            reduce using rule 58 (expr -> oper .)
    SCLOSE          reduce using rule 58 (expr -> oper .)
    COMD            reduce using rule 58 (expr -> oper .)


state 31

    (59) expr -> ACONST .

    GTLT            reduce using rule 59 (expr -> ACONST .)
    OR              reduce using rule 59 (expr -> ACONST .)
    ES              reduce using rule 59 (expr -> ACONST .)
    CLOSE           reduce using rule 59 (expr -> ACONST .)
    ID              reduce using rule 59 (expr -> ACONST .)
    EXTEND1         reduce using rule 59 (expr -> ACONST .)
    EXTEND2         reduce using rule 59 (expr -> ACONST .)
    UNDO            reduce using rule 59 (expr -> ACONST .)
    FOPEN           reduce using rule 59 (expr -> ACONST .)
    ACONST          reduce using rule 59 (expr -> ACONST .)
    LCONST          reduce using rule 59 (expr -> ACONST .)
    NOT             reduce using rule 59 (expr -> ACONST .)
    INCDEC          reduce using rule 59 (expr -> ACONST .)
    OPEN            reduce using rule 59 (expr -> ACONST .)
    MOVE            reduce using rule 59 (expr -> ACONST .)
    GET             reduce using rule 59 (expr -> ACONST .)
    PUSH            reduce using rule 59 (expr -> ACONST .)
    SIZE1           reduce using rule 59 (expr -> ACONST .)
    SIZE2           reduce using rule 59 (expr -> ACONST .)
    DO              reduce using rule 59 (expr -> ACONST .)
    FUNCTION        reduce using rule 59 (expr -> ACONST .)
    COMA            reduce using rule 59 (expr -> ACONST .)
    FCLOSE          reduce using rule 59 (expr -> ACONST .)
    ELSE            reduce using rule 59 (expr -> ACONST .)
    SCLOSE          reduce using rule 59 (expr -> ACONST .)
    COMD            reduce using rule 59 (expr -> ACONST .)


state 32

    (60) expr -> LCONST .

    GTLT            reduce using rule 60 (expr -> LCONST .)
    OR              reduce using rule 60 (expr -> LCONST .)
    ES              reduce using rule 60 (expr -> LCONST .)
    CLOSE           reduce using rule 60 (expr -> LCONST .)
    ID              reduce using rule 60 (expr -> LCONST .)
    EXTEND1         reduce using rule 60 (expr -> LCONST .)
    EXTEND2         reduce using rule 60 (expr -> LCONST .)
    UNDO            reduce using rule 60 (expr -> LCONST .)
    FOPEN           reduce using rule 60 (expr -> LCONST .)
    ACONST          reduce using rule 60 (expr -> LCONST .)
    LCONST          reduce using rule 60 (expr -> LCONST .)
    NOT             reduce using rule 60 (expr -> LCONST .)
    INCDEC          reduce using rule 60 (expr -> LCONST .)
    OPEN            reduce using rule 60 (expr -> LCONST .)
    MOVE            reduce using rule 60 (expr -> LCONST .)
    GET             reduce using rule 60 (expr -> LCONST .)
    PUSH            reduce using rule 60 (expr -> LCONST .)
    SIZE1           reduce using rule 60 (expr -> LCONST .)
    SIZE2           reduce using rule 60 (expr -> LCONST .)
    DO              reduce using rule 60 (expr -> LCONST .)
    FUNCTION        reduce using rule 60 (expr -> LCONST .)
    COMA            reduce using rule 60 (expr -> LCONST .)
    FCLOSE          reduce using rule 60 (expr -> LCONST .)
    ELSE            reduce using rule 60 (expr -> LCONST .)
    SCLOSE          reduce using rule 60 (expr -> LCONST .)
    COMD            reduce using rule 60 (expr -> LCONST .)


state 33

    (62) expr -> NOT . expr
    (58) expr -> . oper
    (59) expr -> . ACONST
    (60) expr -> . LCONST
    (61) expr -> . ID
    (62) expr -> . NOT expr
    (63) expr -> . INCDEC ID
    (64) expr -> . expr GTLT expr
    (65) expr -> . expr OR expr
    (66) expr -> . OPEN expr CLOSE
    (67) oper -> . MOVE
    (68) oper -> . GET
    (69) oper -> . PUSH
    (70) oper -> . SIZE1 ID
    (71) oper -> . SIZE2 ID expr
    (72) oper -> . access
    (73) access -> . ID OPEN expr COMA expr CLOSE
    (74) access -> . ID OPEN expr CLOSE

    ACONST          shift and go to state 31
    LCONST          shift and go to state 32
    ID              shift and go to state 66
    NOT             shift and go to state 33
    INCDEC          shift and go to state 34
    OPEN            shift and go to state 20
    MOVE            shift and go to state 45
    GET             shift and go to state 46
    PUSH            shift and go to state 47
    SIZE1           shift and go to state 48
    SIZE2           shift and go to state 49

    expr                           shift and go to state 69
    oper                           shift and go to state 30
    access                         shift and go to state 67

state 34

    (63) expr -> INCDEC . ID

    ID              shift and go to state 70


state 35

    (77) cond -> IF . expr sent else
    (78) cond -> IF . expr group else
    (58) expr -> . oper
    (59) expr -> . ACONST
    (60) expr -> . LCONST
    (61) expr -> . ID
    (62) expr -> . NOT expr
    (63) expr -> . INCDEC ID
    (64) expr -> . expr GTLT expr
    (65) expr -> . expr OR expr
    (66) expr -> . OPEN expr CLOSE
    (67) oper -> . MOVE
    (68) oper -> . GET
    (69) oper -> . PUSH
    (70) oper -> . SIZE1 ID
    (71) oper -> . SIZE2 ID expr
    (72) oper -> . access
    (73) access -> . ID OPEN expr COMA expr CLOSE
    (74) access -> . ID OPEN expr CLOSE

    ACONST          shift and go to state 31
    LCONST          shift and go to state 32
    ID              shift and go to state 66
    NOT             shift and go to state 33
    INCDEC          shift and go to state 34
    OPEN            shift and go to state 20
    MOVE            shift and go to state 45
    GET             shift and go to state 46
    PUSH            shift and go to state 47
    SIZE1           shift and go to state 48
    SIZE2           shift and go to state 49

    expr                           shift and go to state 71
    oper                           shift and go to state 30
    access                         shift and go to state 67

state 36

    (82) loop -> WHILE . expr DO sent
    (83) loop -> WHILE . expr DO group
    (58) expr -> . oper
    (59) expr -> . ACONST
    (60) expr -> . LCONST
    (61) expr -> . ID
    (62) expr -> . NOT expr
    (63) expr -> . INCDEC ID
    (64) expr -> . expr GTLT expr
    (65) expr -> . expr OR expr
    (66) expr -> . OPEN expr CLOSE
    (67) oper -> . MOVE
    (68) oper -> . GET
    (69) oper -> . PUSH
    (70) oper -> . SIZE1 ID
    (71) oper -> . SIZE2 ID expr
    (72) oper -> . access
    (73) access -> . ID OPEN expr COMA expr CLOSE
    (74) access -> . ID OPEN expr CLOSE

    ACONST          shift and go to state 31
    LCONST          shift and go to state 32
    ID              shift and go to state 66
    NOT             shift and go to state 33
    INCDEC          shift and go to state 34
    OPEN            shift and go to state 20
    MOVE            shift and go to state 45
    GET             shift and go to state 46
    PUSH            shift and go to state 47
    SIZE1           shift and go to state 48
    SIZE2           shift and go to state 49

    expr                           shift and go to state 72
    oper                           shift and go to state 30
    access                         shift and go to state 67

state 37

    (41) 2ldecl -> L2ARR . ID
    (42) 2ldecl -> L2ARR . ID EQ SOPEN arrs SCLOSE

    ID              shift and go to state 73


state 38

    (43) 2adecl -> A2ARR . ID
    (44) 2adecl -> A2ARR . ID EQ SOPEN arrs SCLOSE

    ID              shift and go to state 74


state 39

    (37) 1ldecl -> L1ARR . ID
    (38) 1ldecl -> L1ARR . ID EQ SOPEN vals SCLOSE

    ID              shift and go to state 75


state 40

    (39) 1adecl -> A1ARR . ID
    (40) 1adecl -> A1ARR . ID EQ SOPEN vals SCLOSE

    ID              shift and go to state 76


state 41

    (33) lvdecl -> LVAR . ID
    (34) lvdecl -> LVAR . ID EQ expr

    ID              shift and go to state 77


state 42

    (35) avdecl -> AVAR . ID
    (36) avdecl -> AVAR . ID EQ expr

    ID              shift and go to state 78


state 43

    (31) cldecl -> CLVAR . ID EQ expr

    ID              shift and go to state 79


state 44

    (32) cadecl -> CAVAR . ID EQ expr

    ID              shift and go to state 80


state 45

    (67) oper -> MOVE .

    GTLT            reduce using rule 67 (oper -> MOVE .)
    OR              reduce using rule 67 (oper -> MOVE .)
    ES              reduce using rule 67 (oper -> MOVE .)
    CLOSE           reduce using rule 67 (oper -> MOVE .)
    ID              reduce using rule 67 (oper -> MOVE .)
    EXTEND1         reduce using rule 67 (oper -> MOVE .)
    EXTEND2         reduce using rule 67 (oper -> MOVE .)
    UNDO            reduce using rule 67 (oper -> MOVE .)
    FOPEN           reduce using rule 67 (oper -> MOVE .)
    ACONST          reduce using rule 67 (oper -> MOVE .)
    LCONST          reduce using rule 67 (oper -> MOVE .)
    NOT             reduce using rule 67 (oper -> MOVE .)
    INCDEC          reduce using rule 67 (oper -> MOVE .)
    OPEN            reduce using rule 67 (oper -> MOVE .)
    MOVE            reduce using rule 67 (oper -> MOVE .)
    GET             reduce using rule 67 (oper -> MOVE .)
    PUSH            reduce using rule 67 (oper -> MOVE .)
    SIZE1           reduce using rule 67 (oper -> MOVE .)
    SIZE2           reduce using rule 67 (oper -> MOVE .)
    DO              reduce using rule 67 (oper -> MOVE .)
    FUNCTION        reduce using rule 67 (oper -> MOVE .)
    COMA            reduce using rule 67 (oper -> MOVE .)
    FCLOSE          reduce using rule 67 (oper -> MOVE .)
    ELSE            reduce using rule 67 (oper -> MOVE .)
    SCLOSE          reduce using rule 67 (oper -> MOVE .)
    COMD            reduce using rule 67 (oper -> MOVE .)


state 46

    (68) oper -> GET .

    GTLT            reduce using rule 68 (oper -> GET .)
    OR              reduce using rule 68 (oper -> GET .)
    ES              reduce using rule 68 (oper -> GET .)
    CLOSE           reduce using rule 68 (oper -> GET .)
    ID              reduce using rule 68 (oper -> GET .)
    EXTEND1         reduce using rule 68 (oper -> GET .)
    EXTEND2         reduce using rule 68 (oper -> GET .)
    UNDO            reduce using rule 68 (oper -> GET .)
    FOPEN           reduce using rule 68 (oper -> GET .)
    ACONST          reduce using rule 68 (oper -> GET .)
    LCONST          reduce using rule 68 (oper -> GET .)
    NOT             reduce using rule 68 (oper -> GET .)
    INCDEC          reduce using rule 68 (oper -> GET .)
    OPEN            reduce using rule 68 (oper -> GET .)
    MOVE            reduce using rule 68 (oper -> GET .)
    GET             reduce using rule 68 (oper -> GET .)
    PUSH            reduce using rule 68 (oper -> GET .)
    SIZE1           reduce using rule 68 (oper -> GET .)
    SIZE2           reduce using rule 68 (oper -> GET .)
    DO              reduce using rule 68 (oper -> GET .)
    FUNCTION        reduce using rule 68 (oper -> GET .)
    COMA            reduce using rule 68 (oper -> GET .)
    FCLOSE          reduce using rule 68 (oper -> GET .)
    ELSE            reduce using rule 68 (oper -> GET .)
    SCLOSE          reduce using rule 68 (oper -> GET .)
    COMD            reduce using rule 68 (oper -> GET .)


state 47

    (69) oper -> PUSH .

    GTLT            reduce using rule 69 (oper -> PUSH .)
    OR              reduce using rule 69 (oper -> PUSH .)
    ES              reduce using rule 69 (oper -> PUSH .)
    CLOSE           reduce using rule 69 (oper -> PUSH .)
    ID              reduce using rule 69 (oper -> PUSH .)
    EXTEND1         reduce using rule 69 (oper -> PUSH .)
    EXTEND2         reduce using rule 69 (oper -> PUSH .)
    UNDO            reduce using rule 69 (oper -> PUSH .)
    FOPEN           reduce using rule 69 (oper -> PUSH .)
    ACONST          reduce using rule 69 (oper -> PUSH .)
    LCONST          reduce using rule 69 (oper -> PUSH .)
    NOT             reduce using rule 69 (oper -> PUSH .)
    INCDEC          reduce using rule 69 (oper -> PUSH .)
    OPEN            reduce using rule 69 (oper -> PUSH .)
    MOVE            reduce using rule 69 (oper -> PUSH .)
    GET             reduce using rule 69 (oper -> PUSH .)
    PUSH            reduce using rule 69 (oper -> PUSH .)
    SIZE1           reduce using rule 69 (oper -> PUSH .)
    SIZE2           reduce using rule 69 (oper -> PUSH .)
    DO              reduce using rule 69 (oper -> PUSH .)
    FUNCTION        reduce using rule 69 (oper -> PUSH .)
    COMA            reduce using rule 69 (oper -> PUSH .)
    FCLOSE          reduce using rule 69 (oper -> PUSH .)
    ELSE            reduce using rule 69 (oper -> PUSH .)
    SCLOSE          reduce using rule 69 (oper -> PUSH .)
    COMD            reduce using rule 69 (oper -> PUSH .)


state 48

    (70) oper -> SIZE1 . ID

    ID              shift and go to state 81


state 49

    (71) oper -> SIZE2 . ID expr

    ID              shift and go to state 82


state 50

    (1) prog -> prog line es .
    (4) es -> es . es
    (4) es -> . es es
    (5) es -> . ES

  ! shift/reduce conflict for ES resolved as shift
    ID              reduce using rule 1 (prog -> prog line es .)
    EXTEND1         reduce using rule 1 (prog -> prog line es .)
    EXTEND2         reduce using rule 1 (prog -> prog line es .)
    UNDO            reduce using rule 1 (prog -> prog line es .)
    SOPEN           reduce using rule 1 (prog -> prog line es .)
    FOPEN           reduce using rule 1 (prog -> prog line es .)
    ACONST          reduce using rule 1 (prog -> prog line es .)
    LCONST          reduce using rule 1 (prog -> prog line es .)
    NOT             reduce using rule 1 (prog -> prog line es .)
    INCDEC          reduce using rule 1 (prog -> prog line es .)
    OPEN            reduce using rule 1 (prog -> prog line es .)
    IF              reduce using rule 1 (prog -> prog line es .)
    WHILE           reduce using rule 1 (prog -> prog line es .)
    L2ARR           reduce using rule 1 (prog -> prog line es .)
    A2ARR           reduce using rule 1 (prog -> prog line es .)
    L1ARR           reduce using rule 1 (prog -> prog line es .)
    A1ARR           reduce using rule 1 (prog -> prog line es .)
    LVAR            reduce using rule 1 (prog -> prog line es .)
    AVAR            reduce using rule 1 (prog -> prog line es .)
    CLVAR           reduce using rule 1 (prog -> prog line es .)
    CAVAR           reduce using rule 1 (prog -> prog line es .)
    MOVE            reduce using rule 1 (prog -> prog line es .)
    GET             reduce using rule 1 (prog -> prog line es .)
    PUSH            reduce using rule 1 (prog -> prog line es .)
    SIZE1           reduce using rule 1 (prog -> prog line es .)
    SIZE2           reduce using rule 1 (prog -> prog line es .)
    $end            reduce using rule 1 (prog -> prog line es .)
    ES              shift and go to state 51

  ! ES              [ reduce using rule 1 (prog -> prog line es .) ]

    es                             shift and go to state 83

state 51

    (5) es -> ES .

    ES              reduce using rule 5 (es -> ES .)
    ID              reduce using rule 5 (es -> ES .)
    EXTEND1         reduce using rule 5 (es -> ES .)
    EXTEND2         reduce using rule 5 (es -> ES .)
    UNDO            reduce using rule 5 (es -> ES .)
    SOPEN           reduce using rule 5 (es -> ES .)
    FOPEN           reduce using rule 5 (es -> ES .)
    ACONST          reduce using rule 5 (es -> ES .)
    LCONST          reduce using rule 5 (es -> ES .)
    NOT             reduce using rule 5 (es -> ES .)
    INCDEC          reduce using rule 5 (es -> ES .)
    OPEN            reduce using rule 5 (es -> ES .)
    IF              reduce using rule 5 (es -> ES .)
    WHILE           reduce using rule 5 (es -> ES .)
    L2ARR           reduce using rule 5 (es -> ES .)
    A2ARR           reduce using rule 5 (es -> ES .)
    L1ARR           reduce using rule 5 (es -> ES .)
    A1ARR           reduce using rule 5 (es -> ES .)
    LVAR            reduce using rule 5 (es -> ES .)
    AVAR            reduce using rule 5 (es -> ES .)
    CLVAR           reduce using rule 5 (es -> ES .)
    CAVAR           reduce using rule 5 (es -> ES .)
    MOVE            reduce using rule 5 (es -> ES .)
    GET             reduce using rule 5 (es -> ES .)
    PUSH            reduce using rule 5 (es -> ES .)
    SIZE1           reduce using rule 5 (es -> ES .)
    SIZE2           reduce using rule 5 (es -> ES .)
    $end            reduce using rule 5 (es -> ES .)
    FCLOSE          reduce using rule 5 (es -> ES .)


state 52

    (2) prog -> prog fdecl es .
    (4) es -> es . es
    (4) es -> . es es
    (5) es -> . ES

  ! shift/reduce conflict for ES resolved as shift
    ID              reduce using rule 2 (prog -> prog fdecl es .)
    EXTEND1         reduce using rule 2 (prog -> prog fdecl es .)
    EXTEND2         reduce using rule 2 (prog -> prog fdecl es .)
    UNDO            reduce using rule 2 (prog -> prog fdecl es .)
    SOPEN           reduce using rule 2 (prog -> prog fdecl es .)
    FOPEN           reduce using rule 2 (prog -> prog fdecl es .)
    ACONST          reduce using rule 2 (prog -> prog fdecl es .)
    LCONST          reduce using rule 2 (prog -> prog fdecl es .)
    NOT             reduce using rule 2 (prog -> prog fdecl es .)
    INCDEC          reduce using rule 2 (prog -> prog fdecl es .)
    OPEN            reduce using rule 2 (prog -> prog fdecl es .)
    IF              reduce using rule 2 (prog -> prog fdecl es .)
    WHILE           reduce using rule 2 (prog -> prog fdecl es .)
    L2ARR           reduce using rule 2 (prog -> prog fdecl es .)
    A2ARR           reduce using rule 2 (prog -> prog fdecl es .)
    L1ARR           reduce using rule 2 (prog -> prog fdecl es .)
    A1ARR           reduce using rule 2 (prog -> prog fdecl es .)
    LVAR            reduce using rule 2 (prog -> prog fdecl es .)
    AVAR            reduce using rule 2 (prog -> prog fdecl es .)
    CLVAR           reduce using rule 2 (prog -> prog fdecl es .)
    CAVAR           reduce using rule 2 (prog -> prog fdecl es .)
    MOVE            reduce using rule 2 (prog -> prog fdecl es .)
    GET             reduce using rule 2 (prog -> prog fdecl es .)
    PUSH            reduce using rule 2 (prog -> prog fdecl es .)
    SIZE1           reduce using rule 2 (prog -> prog fdecl es .)
    SIZE2           reduce using rule 2 (prog -> prog fdecl es .)
    $end            reduce using rule 2 (prog -> prog fdecl es .)
    ES              shift and go to state 51

  ! ES              [ reduce using rule 2 (prog -> prog fdecl es .) ]

    es                             shift and go to state 83

state 53

    (51) fdecl -> fovars FUNCTION . ID fivars group

    ID              shift and go to state 84


state 54

    (13) sent -> ID EQ . expr
    (85) fcall -> ID EQ . ID OPEN pars CLOSE
    (52) fovars -> ID EQ . expr
    (58) expr -> . oper
    (59) expr -> . ACONST
    (60) expr -> . LCONST
    (61) expr -> . ID
    (62) expr -> . NOT expr
    (63) expr -> . INCDEC ID
    (64) expr -> . expr GTLT expr
    (65) expr -> . expr OR expr
    (66) expr -> . OPEN expr CLOSE
    (67) oper -> . MOVE
    (68) oper -> . GET
    (69) oper -> . PUSH
    (70) oper -> . SIZE1 ID
    (71) oper -> . SIZE2 ID expr
    (72) oper -> . access
    (73) access -> . ID OPEN expr COMA expr CLOSE
    (74) access -> . ID OPEN expr CLOSE

    ID              shift and go to state 85
    ACONST          shift and go to state 31
    LCONST          shift and go to state 32
    NOT             shift and go to state 33
    INCDEC          shift and go to state 34
    OPEN            shift and go to state 20
    MOVE            shift and go to state 45
    GET             shift and go to state 46
    PUSH            shift and go to state 47
    SIZE1           shift and go to state 48
    SIZE2           shift and go to state 49

    expr                           shift and go to state 86
    oper                           shift and go to state 30
    access                         shift and go to state 67

state 55

    (73) access -> ID OPEN . expr COMA expr CLOSE
    (74) access -> ID OPEN . expr CLOSE
    (58) expr -> . oper
    (59) expr -> . ACONST
    (60) expr -> . LCONST
    (61) expr -> . ID
    (62) expr -> . NOT expr
    (63) expr -> . INCDEC ID
    (64) expr -> . expr GTLT expr
    (65) expr -> . expr OR expr
    (66) expr -> . OPEN expr CLOSE
    (67) oper -> . MOVE
    (68) oper -> . GET
    (69) oper -> . PUSH
    (70) oper -> . SIZE1 ID
    (71) oper -> . SIZE2 ID expr
    (72) oper -> . access
    (73) access -> . ID OPEN expr COMA expr CLOSE
    (74) access -> . ID OPEN expr CLOSE

    ACONST          shift and go to state 31
    LCONST          shift and go to state 32
    ID              shift and go to state 66
    NOT             shift and go to state 33
    INCDEC          shift and go to state 34
    OPEN            shift and go to state 20
    MOVE            shift and go to state 45
    GET             shift and go to state 46
    PUSH            shift and go to state 47
    SIZE1           shift and go to state 48
    SIZE2           shift and go to state 49

    expr                           shift and go to state 87
    oper                           shift and go to state 30
    access                         shift and go to state 67

state 56

    (64) expr -> expr GTLT . expr
    (58) expr -> . oper
    (59) expr -> . ACONST
    (60) expr -> . LCONST
    (61) expr -> . ID
    (62) expr -> . NOT expr
    (63) expr -> . INCDEC ID
    (64) expr -> . expr GTLT expr
    (65) expr -> . expr OR expr
    (66) expr -> . OPEN expr CLOSE
    (67) oper -> . MOVE
    (68) oper -> . GET
    (69) oper -> . PUSH
    (70) oper -> . SIZE1 ID
    (71) oper -> . SIZE2 ID expr
    (72) oper -> . access
    (73) access -> . ID OPEN expr COMA expr CLOSE
    (74) access -> . ID OPEN expr CLOSE

    ACONST          shift and go to state 31
    LCONST          shift and go to state 32
    ID              shift and go to state 66
    NOT             shift and go to state 33
    INCDEC          shift and go to state 34
    OPEN            shift and go to state 20
    MOVE            shift and go to state 45
    GET             shift and go to state 46
    PUSH            shift and go to state 47
    SIZE1           shift and go to state 48
    SIZE2           shift and go to state 49

    expr                           shift and go to state 88
    oper                           shift and go to state 30
    access                         shift and go to state 67

state 57

    (65) expr -> expr OR . expr
    (58) expr -> . oper
    (59) expr -> . ACONST
    (60) expr -> . LCONST
    (61) expr -> . ID
    (62) expr -> . NOT expr
    (63) expr -> . INCDEC ID
    (64) expr -> . expr GTLT expr
    (65) expr -> . expr OR expr
    (66) expr -> . OPEN expr CLOSE
    (67) oper -> . MOVE
    (68) oper -> . GET
    (69) oper -> . PUSH
    (70) oper -> . SIZE1 ID
    (71) oper -> . SIZE2 ID expr
    (72) oper -> . access
    (73) access -> . ID OPEN expr COMA expr CLOSE
    (74) access -> . ID OPEN expr CLOSE

    ACONST          shift and go to state 31
    LCONST          shift and go to state 32
    ID              shift and go to state 66
    NOT             shift and go to state 33
    INCDEC          shift and go to state 34
    OPEN            shift and go to state 20
    MOVE            shift and go to state 45
    GET             shift and go to state 46
    PUSH            shift and go to state 47
    SIZE1           shift and go to state 48
    SIZE2           shift and go to state 49

    expr                           shift and go to state 89
    oper                           shift and go to state 30
    access                         shift and go to state 67

state 58

    (14) sent -> access EQ . expr
    (58) expr -> . oper
    (59) expr -> . ACONST
    (60) expr -> . LCONST
    (61) expr -> . ID
    (62) expr -> . NOT expr
    (63) expr -> . INCDEC ID
    (64) expr -> . expr GTLT expr
    (65) expr -> . expr OR expr
    (66) expr -> . OPEN expr CLOSE
    (67) oper -> . MOVE
    (68) oper -> . GET
    (69) oper -> . PUSH
    (70) oper -> . SIZE1 ID
    (71) oper -> . SIZE2 ID expr
    (72) oper -> . access
    (73) access -> . ID OPEN expr COMA expr CLOSE
    (74) access -> . ID OPEN expr CLOSE

    ACONST          shift and go to state 31
    LCONST          shift and go to state 32
    ID              shift and go to state 66
    NOT             shift and go to state 33
    INCDEC          shift and go to state 34
    OPEN            shift and go to state 20
    MOVE            shift and go to state 45
    GET             shift and go to state 46
    PUSH            shift and go to state 47
    SIZE1           shift and go to state 48
    SIZE2           shift and go to state 49

    access                         shift and go to state 67
    expr                           shift and go to state 90
    oper                           shift and go to state 30

state 59

    (15) sent -> EXTEND1 ID . expr
    (58) expr -> . oper
    (59) expr -> . ACONST
    (60) expr -> . LCONST
    (61) expr -> . ID
    (62) expr -> . NOT expr
    (63) expr -> . INCDEC ID
    (64) expr -> . expr GTLT expr
    (65) expr -> . expr OR expr
    (66) expr -> . OPEN expr CLOSE
    (67) oper -> . MOVE
    (68) oper -> . GET
    (69) oper -> . PUSH
    (70) oper -> . SIZE1 ID
    (71) oper -> . SIZE2 ID expr
    (72) oper -> . access
    (73) access -> . ID OPEN expr COMA expr CLOSE
    (74) access -> . ID OPEN expr CLOSE

    ACONST          shift and go to state 31
    LCONST          shift and go to state 32
    ID              shift and go to state 66
    NOT             shift and go to state 33
    INCDEC          shift and go to state 34
    OPEN            shift and go to state 20
    MOVE            shift and go to state 45
    GET             shift and go to state 46
    PUSH            shift and go to state 47
    SIZE1           shift and go to state 48
    SIZE2           shift and go to state 49

    expr                           shift and go to state 91
    oper                           shift and go to state 30
    access                         shift and go to state 67

state 60

    (16) sent -> EXTEND2 ID . expr expr
    (58) expr -> . oper
    (59) expr -> . ACONST
    (60) expr -> . LCONST
    (61) expr -> . ID
    (62) expr -> . NOT expr
    (63) expr -> . INCDEC ID
    (64) expr -> . expr GTLT expr
    (65) expr -> . expr OR expr
    (66) expr -> . OPEN expr CLOSE
    (67) oper -> . MOVE
    (68) oper -> . GET
    (69) oper -> . PUSH
    (70) oper -> . SIZE1 ID
    (71) oper -> . SIZE2 ID expr
    (72) oper -> . access
    (73) access -> . ID OPEN expr COMA expr CLOSE
    (74) access -> . ID OPEN expr CLOSE

    ACONST          shift and go to state 31
    LCONST          shift and go to state 32
    ID              shift and go to state 66
    NOT             shift and go to state 33
    INCDEC          shift and go to state 34
    OPEN            shift and go to state 20
    MOVE            shift and go to state 45
    GET             shift and go to state 46
    PUSH            shift and go to state 47
    SIZE1           shift and go to state 48
    SIZE2           shift and go to state 49

    expr                           shift and go to state 92
    oper                           shift and go to state 30
    access                         shift and go to state 67

state 61

    (84) fcall -> SOPEN vars . SCLOSE EQ ID OPEN pars CLOSE

    SCLOSE          shift and go to state 93


state 62

    (86) vars -> ID . COMA vars
    (88) vars -> ID .
    (55) fvars -> ID . EQ expr
    (56) fvars -> ID . EQ expr COMA fvars

    COMA            shift and go to state 94
    SCLOSE          reduce using rule 88 (vars -> ID .)
    EQ              shift and go to state 95


state 63

    (53) fovars -> SOPEN fvars . SCLOSE

    SCLOSE          shift and go to state 96


state 64

    (87) vars -> COMA . vars
    (86) vars -> . ID COMA vars
    (87) vars -> . COMA vars
    (88) vars -> . ID
    (89) vars -> .

    ID              shift and go to state 98
    COMA            shift and go to state 64
    SCLOSE          reduce using rule 89 (vars -> .)

    vars                           shift and go to state 97

state 65

    (66) expr -> OPEN expr . CLOSE
    (64) expr -> expr . GTLT expr
    (65) expr -> expr . OR expr

    CLOSE           shift and go to state 99
    GTLT            shift and go to state 56
    OR              shift and go to state 57


state 66

    (61) expr -> ID .
    (73) access -> ID . OPEN expr COMA expr CLOSE
    (74) access -> ID . OPEN expr CLOSE

  ! shift/reduce conflict for OPEN resolved as shift
    CLOSE           reduce using rule 61 (expr -> ID .)
    GTLT            reduce using rule 61 (expr -> ID .)
    OR              reduce using rule 61 (expr -> ID .)
    ES              reduce using rule 61 (expr -> ID .)
    ID              reduce using rule 61 (expr -> ID .)
    EXTEND1         reduce using rule 61 (expr -> ID .)
    EXTEND2         reduce using rule 61 (expr -> ID .)
    UNDO            reduce using rule 61 (expr -> ID .)
    FOPEN           reduce using rule 61 (expr -> ID .)
    ACONST          reduce using rule 61 (expr -> ID .)
    LCONST          reduce using rule 61 (expr -> ID .)
    NOT             reduce using rule 61 (expr -> ID .)
    INCDEC          reduce using rule 61 (expr -> ID .)
    MOVE            reduce using rule 61 (expr -> ID .)
    GET             reduce using rule 61 (expr -> ID .)
    PUSH            reduce using rule 61 (expr -> ID .)
    SIZE1           reduce using rule 61 (expr -> ID .)
    SIZE2           reduce using rule 61 (expr -> ID .)
    DO              reduce using rule 61 (expr -> ID .)
    FUNCTION        reduce using rule 61 (expr -> ID .)
    COMA            reduce using rule 61 (expr -> ID .)
    FCLOSE          reduce using rule 61 (expr -> ID .)
    ELSE            reduce using rule 61 (expr -> ID .)
    SCLOSE          reduce using rule 61 (expr -> ID .)
    COMD            reduce using rule 61 (expr -> ID .)
    OPEN            shift and go to state 55

  ! OPEN            [ reduce using rule 61 (expr -> ID .) ]


state 67

    (72) oper -> access .

    CLOSE           reduce using rule 72 (oper -> access .)
    GTLT            reduce using rule 72 (oper -> access .)
    OR              reduce using rule 72 (oper -> access .)
    ES              reduce using rule 72 (oper -> access .)
    ID              reduce using rule 72 (oper -> access .)
    EXTEND1         reduce using rule 72 (oper -> access .)
    EXTEND2         reduce using rule 72 (oper -> access .)
    UNDO            reduce using rule 72 (oper -> access .)
    FOPEN           reduce using rule 72 (oper -> access .)
    ACONST          reduce using rule 72 (oper -> access .)
    LCONST          reduce using rule 72 (oper -> access .)
    NOT             reduce using rule 72 (oper -> access .)
    INCDEC          reduce using rule 72 (oper -> access .)
    OPEN            reduce using rule 72 (oper -> access .)
    MOVE            reduce using rule 72 (oper -> access .)
    GET             reduce using rule 72 (oper -> access .)
    PUSH            reduce using rule 72 (oper -> access .)
    SIZE1           reduce using rule 72 (oper -> access .)
    SIZE2           reduce using rule 72 (oper -> access .)
    DO              reduce using rule 72 (oper -> access .)
    FUNCTION        reduce using rule 72 (oper -> access .)
    COMA            reduce using rule 72 (oper -> access .)
    FCLOSE          reduce using rule 72 (oper -> access .)
    ELSE            reduce using rule 72 (oper -> access .)
    SCLOSE          reduce using rule 72 (oper -> access .)
    COMD            reduce using rule 72 (oper -> access .)


state 68

    (19) group -> FOPEN lines . line FCLOSE
    (20) group -> FOPEN lines . FCLOSE
    (21) lines -> lines . line es
    (6) line -> . sent
    (7) line -> . logic
    (8) line -> . fcall
    (9) line -> . group
    (10) line -> . decl
    (11) line -> . cdecl
    (12) line -> .
    (13) sent -> . ID EQ expr
    (14) sent -> . access EQ expr
    (15) sent -> . EXTEND1 ID expr
    (16) sent -> . EXTEND2 ID expr expr
    (17) sent -> . expr
    (18) sent -> . UNDO
    (75) logic -> . cond
    (76) logic -> . loop
    (84) fcall -> . SOPEN vars SCLOSE EQ ID OPEN pars CLOSE
    (85) fcall -> . ID EQ ID OPEN pars CLOSE
    (19) group -> . FOPEN lines line FCLOSE
    (20) group -> . FOPEN lines FCLOSE
    (23) decl -> . 2ldecl
    (24) decl -> . 2adecl
    (25) decl -> . 1ldecl
    (26) decl -> . 1adecl
    (27) decl -> . lvdecl
    (28) decl -> . avdecl
    (29) cdecl -> . cldecl
    (30) cdecl -> . cadecl
    (73) access -> . ID OPEN expr COMA expr CLOSE
    (74) access -> . ID OPEN expr CLOSE
    (58) expr -> . oper
    (59) expr -> . ACONST
    (60) expr -> . LCONST
    (61) expr -> . ID
    (62) expr -> . NOT expr
    (63) expr -> . INCDEC ID
    (64) expr -> . expr GTLT expr
    (65) expr -> . expr OR expr
    (66) expr -> . OPEN expr CLOSE
    (77) cond -> . IF expr sent else
    (78) cond -> . IF expr group else
    (82) loop -> . WHILE expr DO sent
    (83) loop -> . WHILE expr DO group
    (41) 2ldecl -> . L2ARR ID
    (42) 2ldecl -> . L2ARR ID EQ SOPEN arrs SCLOSE
    (43) 2adecl -> . A2ARR ID
    (44) 2adecl -> . A2ARR ID EQ SOPEN arrs SCLOSE
    (37) 1ldecl -> . L1ARR ID
    (38) 1ldecl -> . L1ARR ID EQ SOPEN vals SCLOSE
    (39) 1adecl -> . A1ARR ID
    (40) 1adecl -> . A1ARR ID EQ SOPEN vals SCLOSE
    (33) lvdecl -> . LVAR ID
    (34) lvdecl -> . LVAR ID EQ expr
    (35) avdecl -> . AVAR ID
    (36) avdecl -> . AVAR ID EQ expr
    (31) cldecl -> . CLVAR ID EQ expr
    (32) cadecl -> . CAVAR ID EQ expr
    (67) oper -> . MOVE
    (68) oper -> . GET
    (69) oper -> . PUSH
    (70) oper -> . SIZE1 ID
    (71) oper -> . SIZE2 ID expr
    (72) oper -> . access

  ! shift/reduce conflict for FCLOSE resolved as shift
    FCLOSE          shift and go to state 101
    ES              reduce using rule 12 (line -> .)
    ID              shift and go to state 102
    EXTEND1         shift and go to state 14
    EXTEND2         shift and go to state 15
    UNDO            shift and go to state 16
    SOPEN           shift and go to state 103
    FOPEN           shift and go to state 21
    ACONST          shift and go to state 31
    LCONST          shift and go to state 32
    NOT             shift and go to state 33
    INCDEC          shift and go to state 34
    OPEN            shift and go to state 20
    IF              shift and go to state 35
    WHILE           shift and go to state 36
    L2ARR           shift and go to state 37
    A2ARR           shift and go to state 38
    L1ARR           shift and go to state 39
    A1ARR           shift and go to state 40
    LVAR            shift and go to state 41
    AVAR            shift and go to state 42
    CLVAR           shift and go to state 43
    CAVAR           shift and go to state 44
    MOVE            shift and go to state 45
    GET             shift and go to state 46
    PUSH            shift and go to state 47
    SIZE1           shift and go to state 48
    SIZE2           shift and go to state 49

  ! FCLOSE          [ reduce using rule 12 (line -> .) ]

    line                           shift and go to state 100
    sent                           shift and go to state 4
    logic                          shift and go to state 5
    fcall                          shift and go to state 6
    group                          shift and go to state 7
    decl                           shift and go to state 8
    cdecl                          shift and go to state 9
    expr                           shift and go to state 12
    access                         shift and go to state 13
    cond                           shift and go to state 17
    loop                           shift and go to state 18
    2ldecl                         shift and go to state 22
    2adecl                         shift and go to state 23
    1ldecl                         shift and go to state 24
    1adecl                         shift and go to state 25
    lvdecl                         shift and go to state 26
    avdecl                         shift and go to state 27
    cldecl                         shift and go to state 28
    cadecl                         shift and go to state 29
    oper                           shift and go to state 30

state 69

    (62) expr -> NOT expr .
    (64) expr -> expr . GTLT expr
    (65) expr -> expr . OR expr

  ! shift/reduce conflict for GTLT resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    ES              reduce using rule 62 (expr -> NOT expr .)
    CLOSE           reduce using rule 62 (expr -> NOT expr .)
    ID              reduce using rule 62 (expr -> NOT expr .)
    EXTEND1         reduce using rule 62 (expr -> NOT expr .)
    EXTEND2         reduce using rule 62 (expr -> NOT expr .)
    UNDO            reduce using rule 62 (expr -> NOT expr .)
    FOPEN           reduce using rule 62 (expr -> NOT expr .)
    ACONST          reduce using rule 62 (expr -> NOT expr .)
    LCONST          reduce using rule 62 (expr -> NOT expr .)
    NOT             reduce using rule 62 (expr -> NOT expr .)
    INCDEC          reduce using rule 62 (expr -> NOT expr .)
    OPEN            reduce using rule 62 (expr -> NOT expr .)
    MOVE            reduce using rule 62 (expr -> NOT expr .)
    GET             reduce using rule 62 (expr -> NOT expr .)
    PUSH            reduce using rule 62 (expr -> NOT expr .)
    SIZE1           reduce using rule 62 (expr -> NOT expr .)
    SIZE2           reduce using rule 62 (expr -> NOT expr .)
    DO              reduce using rule 62 (expr -> NOT expr .)
    FUNCTION        reduce using rule 62 (expr -> NOT expr .)
    COMA            reduce using rule 62 (expr -> NOT expr .)
    FCLOSE          reduce using rule 62 (expr -> NOT expr .)
    ELSE            reduce using rule 62 (expr -> NOT expr .)
    SCLOSE          reduce using rule 62 (expr -> NOT expr .)
    COMD            reduce using rule 62 (expr -> NOT expr .)
    GTLT            shift and go to state 56
    OR              shift and go to state 57

  ! GTLT            [ reduce using rule 62 (expr -> NOT expr .) ]
  ! OR              [ reduce using rule 62 (expr -> NOT expr .) ]


state 70

    (63) expr -> INCDEC ID .

    GTLT            reduce using rule 63 (expr -> INCDEC ID .)
    OR              reduce using rule 63 (expr -> INCDEC ID .)
    ES              reduce using rule 63 (expr -> INCDEC ID .)
    CLOSE           reduce using rule 63 (expr -> INCDEC ID .)
    ID              reduce using rule 63 (expr -> INCDEC ID .)
    EXTEND1         reduce using rule 63 (expr -> INCDEC ID .)
    EXTEND2         reduce using rule 63 (expr -> INCDEC ID .)
    UNDO            reduce using rule 63 (expr -> INCDEC ID .)
    FOPEN           reduce using rule 63 (expr -> INCDEC ID .)
    ACONST          reduce using rule 63 (expr -> INCDEC ID .)
    LCONST          reduce using rule 63 (expr -> INCDEC ID .)
    NOT             reduce using rule 63 (expr -> INCDEC ID .)
    INCDEC          reduce using rule 63 (expr -> INCDEC ID .)
    OPEN            reduce using rule 63 (expr -> INCDEC ID .)
    MOVE            reduce using rule 63 (expr -> INCDEC ID .)
    GET             reduce using rule 63 (expr -> INCDEC ID .)
    PUSH            reduce using rule 63 (expr -> INCDEC ID .)
    SIZE1           reduce using rule 63 (expr -> INCDEC ID .)
    SIZE2           reduce using rule 63 (expr -> INCDEC ID .)
    DO              reduce using rule 63 (expr -> INCDEC ID .)
    FUNCTION        reduce using rule 63 (expr -> INCDEC ID .)
    COMA            reduce using rule 63 (expr -> INCDEC ID .)
    FCLOSE          reduce using rule 63 (expr -> INCDEC ID .)
    ELSE            reduce using rule 63 (expr -> INCDEC ID .)
    SCLOSE          reduce using rule 63 (expr -> INCDEC ID .)
    COMD            reduce using rule 63 (expr -> INCDEC ID .)


state 71

    (77) cond -> IF expr . sent else
    (78) cond -> IF expr . group else
    (64) expr -> expr . GTLT expr
    (65) expr -> expr . OR expr
    (13) sent -> . ID EQ expr
    (14) sent -> . access EQ expr
    (15) sent -> . EXTEND1 ID expr
    (16) sent -> . EXTEND2 ID expr expr
    (17) sent -> . expr
    (18) sent -> . UNDO
    (19) group -> . FOPEN lines line FCLOSE
    (20) group -> . FOPEN lines FCLOSE
    (73) access -> . ID OPEN expr COMA expr CLOSE
    (74) access -> . ID OPEN expr CLOSE
    (58) expr -> . oper
    (59) expr -> . ACONST
    (60) expr -> . LCONST
    (61) expr -> . ID
    (62) expr -> . NOT expr
    (63) expr -> . INCDEC ID
    (64) expr -> . expr GTLT expr
    (65) expr -> . expr OR expr
    (66) expr -> . OPEN expr CLOSE
    (67) oper -> . MOVE
    (68) oper -> . GET
    (69) oper -> . PUSH
    (70) oper -> . SIZE1 ID
    (71) oper -> . SIZE2 ID expr
    (72) oper -> . access

    GTLT            shift and go to state 56
    OR              shift and go to state 57
    ID              shift and go to state 106
    EXTEND1         shift and go to state 14
    EXTEND2         shift and go to state 15
    UNDO            shift and go to state 16
    FOPEN           shift and go to state 21
    ACONST          shift and go to state 31
    LCONST          shift and go to state 32
    NOT             shift and go to state 33
    INCDEC          shift and go to state 34
    OPEN            shift and go to state 20
    MOVE            shift and go to state 45
    GET             shift and go to state 46
    PUSH            shift and go to state 47
    SIZE1           shift and go to state 48
    SIZE2           shift and go to state 49

    expr                           shift and go to state 12
    sent                           shift and go to state 104
    group                          shift and go to state 105
    access                         shift and go to state 13
    oper                           shift and go to state 30

state 72

    (82) loop -> WHILE expr . DO sent
    (83) loop -> WHILE expr . DO group
    (64) expr -> expr . GTLT expr
    (65) expr -> expr . OR expr

    DO              shift and go to state 107
    GTLT            shift and go to state 56
    OR              shift and go to state 57


state 73

    (41) 2ldecl -> L2ARR ID .
    (42) 2ldecl -> L2ARR ID . EQ SOPEN arrs SCLOSE

    ES              reduce using rule 41 (2ldecl -> L2ARR ID .)
    FCLOSE          reduce using rule 41 (2ldecl -> L2ARR ID .)
    EQ              shift and go to state 108


state 74

    (43) 2adecl -> A2ARR ID .
    (44) 2adecl -> A2ARR ID . EQ SOPEN arrs SCLOSE

    ES              reduce using rule 43 (2adecl -> A2ARR ID .)
    FCLOSE          reduce using rule 43 (2adecl -> A2ARR ID .)
    EQ              shift and go to state 109


state 75

    (37) 1ldecl -> L1ARR ID .
    (38) 1ldecl -> L1ARR ID . EQ SOPEN vals SCLOSE

    ES              reduce using rule 37 (1ldecl -> L1ARR ID .)
    FCLOSE          reduce using rule 37 (1ldecl -> L1ARR ID .)
    EQ              shift and go to state 110


state 76

    (39) 1adecl -> A1ARR ID .
    (40) 1adecl -> A1ARR ID . EQ SOPEN vals SCLOSE

    ES              reduce using rule 39 (1adecl -> A1ARR ID .)
    FCLOSE          reduce using rule 39 (1adecl -> A1ARR ID .)
    EQ              shift and go to state 111


state 77

    (33) lvdecl -> LVAR ID .
    (34) lvdecl -> LVAR ID . EQ expr

    ES              reduce using rule 33 (lvdecl -> LVAR ID .)
    FCLOSE          reduce using rule 33 (lvdecl -> LVAR ID .)
    EQ              shift and go to state 112


state 78

    (35) avdecl -> AVAR ID .
    (36) avdecl -> AVAR ID . EQ expr

    ES              reduce using rule 35 (avdecl -> AVAR ID .)
    FCLOSE          reduce using rule 35 (avdecl -> AVAR ID .)
    EQ              shift and go to state 113


state 79

    (31) cldecl -> CLVAR ID . EQ expr

    EQ              shift and go to state 114


state 80

    (32) cadecl -> CAVAR ID . EQ expr

    EQ              shift and go to state 115


state 81

    (70) oper -> SIZE1 ID .

    GTLT            reduce using rule 70 (oper -> SIZE1 ID .)
    OR              reduce using rule 70 (oper -> SIZE1 ID .)
    ES              reduce using rule 70 (oper -> SIZE1 ID .)
    CLOSE           reduce using rule 70 (oper -> SIZE1 ID .)
    ID              reduce using rule 70 (oper -> SIZE1 ID .)
    EXTEND1         reduce using rule 70 (oper -> SIZE1 ID .)
    EXTEND2         reduce using rule 70 (oper -> SIZE1 ID .)
    UNDO            reduce using rule 70 (oper -> SIZE1 ID .)
    FOPEN           reduce using rule 70 (oper -> SIZE1 ID .)
    ACONST          reduce using rule 70 (oper -> SIZE1 ID .)
    LCONST          reduce using rule 70 (oper -> SIZE1 ID .)
    NOT             reduce using rule 70 (oper -> SIZE1 ID .)
    INCDEC          reduce using rule 70 (oper -> SIZE1 ID .)
    OPEN            reduce using rule 70 (oper -> SIZE1 ID .)
    MOVE            reduce using rule 70 (oper -> SIZE1 ID .)
    GET             reduce using rule 70 (oper -> SIZE1 ID .)
    PUSH            reduce using rule 70 (oper -> SIZE1 ID .)
    SIZE1           reduce using rule 70 (oper -> SIZE1 ID .)
    SIZE2           reduce using rule 70 (oper -> SIZE1 ID .)
    DO              reduce using rule 70 (oper -> SIZE1 ID .)
    FUNCTION        reduce using rule 70 (oper -> SIZE1 ID .)
    COMA            reduce using rule 70 (oper -> SIZE1 ID .)
    FCLOSE          reduce using rule 70 (oper -> SIZE1 ID .)
    ELSE            reduce using rule 70 (oper -> SIZE1 ID .)
    SCLOSE          reduce using rule 70 (oper -> SIZE1 ID .)
    COMD            reduce using rule 70 (oper -> SIZE1 ID .)


state 82

    (71) oper -> SIZE2 ID . expr
    (58) expr -> . oper
    (59) expr -> . ACONST
    (60) expr -> . LCONST
    (61) expr -> . ID
    (62) expr -> . NOT expr
    (63) expr -> . INCDEC ID
    (64) expr -> . expr GTLT expr
    (65) expr -> . expr OR expr
    (66) expr -> . OPEN expr CLOSE
    (67) oper -> . MOVE
    (68) oper -> . GET
    (69) oper -> . PUSH
    (70) oper -> . SIZE1 ID
    (71) oper -> . SIZE2 ID expr
    (72) oper -> . access
    (73) access -> . ID OPEN expr COMA expr CLOSE
    (74) access -> . ID OPEN expr CLOSE

    ACONST          shift and go to state 31
    LCONST          shift and go to state 32
    ID              shift and go to state 66
    NOT             shift and go to state 33
    INCDEC          shift and go to state 34
    OPEN            shift and go to state 20
    MOVE            shift and go to state 45
    GET             shift and go to state 46
    PUSH            shift and go to state 47
    SIZE1           shift and go to state 48
    SIZE2           shift and go to state 49

    expr                           shift and go to state 116
    oper                           shift and go to state 30
    access                         shift and go to state 67

state 83

    (4) es -> es es .
    (4) es -> es . es
    (4) es -> . es es
    (5) es -> . ES

  ! shift/reduce conflict for ES resolved as shift
    ID              reduce using rule 4 (es -> es es .)
    EXTEND1         reduce using rule 4 (es -> es es .)
    EXTEND2         reduce using rule 4 (es -> es es .)
    UNDO            reduce using rule 4 (es -> es es .)
    SOPEN           reduce using rule 4 (es -> es es .)
    FOPEN           reduce using rule 4 (es -> es es .)
    ACONST          reduce using rule 4 (es -> es es .)
    LCONST          reduce using rule 4 (es -> es es .)
    NOT             reduce using rule 4 (es -> es es .)
    INCDEC          reduce using rule 4 (es -> es es .)
    OPEN            reduce using rule 4 (es -> es es .)
    IF              reduce using rule 4 (es -> es es .)
    WHILE           reduce using rule 4 (es -> es es .)
    L2ARR           reduce using rule 4 (es -> es es .)
    A2ARR           reduce using rule 4 (es -> es es .)
    L1ARR           reduce using rule 4 (es -> es es .)
    A1ARR           reduce using rule 4 (es -> es es .)
    LVAR            reduce using rule 4 (es -> es es .)
    AVAR            reduce using rule 4 (es -> es es .)
    CLVAR           reduce using rule 4 (es -> es es .)
    CAVAR           reduce using rule 4 (es -> es es .)
    MOVE            reduce using rule 4 (es -> es es .)
    GET             reduce using rule 4 (es -> es es .)
    PUSH            reduce using rule 4 (es -> es es .)
    SIZE1           reduce using rule 4 (es -> es es .)
    SIZE2           reduce using rule 4 (es -> es es .)
    $end            reduce using rule 4 (es -> es es .)
    FCLOSE          reduce using rule 4 (es -> es es .)
    ES              shift and go to state 51

  ! ES              [ reduce using rule 4 (es -> es es .) ]

    es                             shift and go to state 83

state 84

    (51) fdecl -> fovars FUNCTION ID . fivars group
    (54) fivars -> . OPEN fvars CLOSE

    OPEN            shift and go to state 118

    fivars                         shift and go to state 117

state 85

    (85) fcall -> ID EQ ID . OPEN pars CLOSE
    (61) expr -> ID .
    (73) access -> ID . OPEN expr COMA expr CLOSE
    (74) access -> ID . OPEN expr CLOSE

    OPEN            shift and go to state 119
    GTLT            reduce using rule 61 (expr -> ID .)
    OR              reduce using rule 61 (expr -> ID .)
    ES              reduce using rule 61 (expr -> ID .)
    FUNCTION        reduce using rule 61 (expr -> ID .)
    FCLOSE          reduce using rule 61 (expr -> ID .)


state 86

    (13) sent -> ID EQ expr .
    (52) fovars -> ID EQ expr .
    (64) expr -> expr . GTLT expr
    (65) expr -> expr . OR expr

    ES              reduce using rule 13 (sent -> ID EQ expr .)
    FUNCTION        reduce using rule 52 (fovars -> ID EQ expr .)
    GTLT            shift and go to state 56
    OR              shift and go to state 57


state 87

    (73) access -> ID OPEN expr . COMA expr CLOSE
    (74) access -> ID OPEN expr . CLOSE
    (64) expr -> expr . GTLT expr
    (65) expr -> expr . OR expr

    COMA            shift and go to state 120
    CLOSE           shift and go to state 121
    GTLT            shift and go to state 56
    OR              shift and go to state 57


state 88

    (64) expr -> expr GTLT expr .
    (64) expr -> expr . GTLT expr
    (65) expr -> expr . OR expr

  ! shift/reduce conflict for GTLT resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    ES              reduce using rule 64 (expr -> expr GTLT expr .)
    CLOSE           reduce using rule 64 (expr -> expr GTLT expr .)
    ID              reduce using rule 64 (expr -> expr GTLT expr .)
    EXTEND1         reduce using rule 64 (expr -> expr GTLT expr .)
    EXTEND2         reduce using rule 64 (expr -> expr GTLT expr .)
    UNDO            reduce using rule 64 (expr -> expr GTLT expr .)
    FOPEN           reduce using rule 64 (expr -> expr GTLT expr .)
    ACONST          reduce using rule 64 (expr -> expr GTLT expr .)
    LCONST          reduce using rule 64 (expr -> expr GTLT expr .)
    NOT             reduce using rule 64 (expr -> expr GTLT expr .)
    INCDEC          reduce using rule 64 (expr -> expr GTLT expr .)
    OPEN            reduce using rule 64 (expr -> expr GTLT expr .)
    MOVE            reduce using rule 64 (expr -> expr GTLT expr .)
    GET             reduce using rule 64 (expr -> expr GTLT expr .)
    PUSH            reduce using rule 64 (expr -> expr GTLT expr .)
    SIZE1           reduce using rule 64 (expr -> expr GTLT expr .)
    SIZE2           reduce using rule 64 (expr -> expr GTLT expr .)
    DO              reduce using rule 64 (expr -> expr GTLT expr .)
    FUNCTION        reduce using rule 64 (expr -> expr GTLT expr .)
    COMA            reduce using rule 64 (expr -> expr GTLT expr .)
    FCLOSE          reduce using rule 64 (expr -> expr GTLT expr .)
    ELSE            reduce using rule 64 (expr -> expr GTLT expr .)
    SCLOSE          reduce using rule 64 (expr -> expr GTLT expr .)
    COMD            reduce using rule 64 (expr -> expr GTLT expr .)
    GTLT            shift and go to state 56
    OR              shift and go to state 57

  ! GTLT            [ reduce using rule 64 (expr -> expr GTLT expr .) ]
  ! OR              [ reduce using rule 64 (expr -> expr GTLT expr .) ]


state 89

    (65) expr -> expr OR expr .
    (64) expr -> expr . GTLT expr
    (65) expr -> expr . OR expr

  ! shift/reduce conflict for GTLT resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    ES              reduce using rule 65 (expr -> expr OR expr .)
    CLOSE           reduce using rule 65 (expr -> expr OR expr .)
    ID              reduce using rule 65 (expr -> expr OR expr .)
    EXTEND1         reduce using rule 65 (expr -> expr OR expr .)
    EXTEND2         reduce using rule 65 (expr -> expr OR expr .)
    UNDO            reduce using rule 65 (expr -> expr OR expr .)
    FOPEN           reduce using rule 65 (expr -> expr OR expr .)
    ACONST          reduce using rule 65 (expr -> expr OR expr .)
    LCONST          reduce using rule 65 (expr -> expr OR expr .)
    NOT             reduce using rule 65 (expr -> expr OR expr .)
    INCDEC          reduce using rule 65 (expr -> expr OR expr .)
    OPEN            reduce using rule 65 (expr -> expr OR expr .)
    MOVE            reduce using rule 65 (expr -> expr OR expr .)
    GET             reduce using rule 65 (expr -> expr OR expr .)
    PUSH            reduce using rule 65 (expr -> expr OR expr .)
    SIZE1           reduce using rule 65 (expr -> expr OR expr .)
    SIZE2           reduce using rule 65 (expr -> expr OR expr .)
    DO              reduce using rule 65 (expr -> expr OR expr .)
    FUNCTION        reduce using rule 65 (expr -> expr OR expr .)
    COMA            reduce using rule 65 (expr -> expr OR expr .)
    FCLOSE          reduce using rule 65 (expr -> expr OR expr .)
    ELSE            reduce using rule 65 (expr -> expr OR expr .)
    SCLOSE          reduce using rule 65 (expr -> expr OR expr .)
    COMD            reduce using rule 65 (expr -> expr OR expr .)
    GTLT            shift and go to state 56
    OR              shift and go to state 57

  ! GTLT            [ reduce using rule 65 (expr -> expr OR expr .) ]
  ! OR              [ reduce using rule 65 (expr -> expr OR expr .) ]


state 90

    (14) sent -> access EQ expr .
    (64) expr -> expr . GTLT expr
    (65) expr -> expr . OR expr

    ES              reduce using rule 14 (sent -> access EQ expr .)
    FCLOSE          reduce using rule 14 (sent -> access EQ expr .)
    ELSE            reduce using rule 14 (sent -> access EQ expr .)
    GTLT            shift and go to state 56
    OR              shift and go to state 57


state 91

    (15) sent -> EXTEND1 ID expr .
    (64) expr -> expr . GTLT expr
    (65) expr -> expr . OR expr

    ES              reduce using rule 15 (sent -> EXTEND1 ID expr .)
    FCLOSE          reduce using rule 15 (sent -> EXTEND1 ID expr .)
    ELSE            reduce using rule 15 (sent -> EXTEND1 ID expr .)
    GTLT            shift and go to state 56
    OR              shift and go to state 57


state 92

    (16) sent -> EXTEND2 ID expr . expr
    (64) expr -> expr . GTLT expr
    (65) expr -> expr . OR expr
    (58) expr -> . oper
    (59) expr -> . ACONST
    (60) expr -> . LCONST
    (61) expr -> . ID
    (62) expr -> . NOT expr
    (63) expr -> . INCDEC ID
    (64) expr -> . expr GTLT expr
    (65) expr -> . expr OR expr
    (66) expr -> . OPEN expr CLOSE
    (67) oper -> . MOVE
    (68) oper -> . GET
    (69) oper -> . PUSH
    (70) oper -> . SIZE1 ID
    (71) oper -> . SIZE2 ID expr
    (72) oper -> . access
    (73) access -> . ID OPEN expr COMA expr CLOSE
    (74) access -> . ID OPEN expr CLOSE

    GTLT            shift and go to state 56
    OR              shift and go to state 57
    ACONST          shift and go to state 31
    LCONST          shift and go to state 32
    ID              shift and go to state 66
    NOT             shift and go to state 33
    INCDEC          shift and go to state 34
    OPEN            shift and go to state 20
    MOVE            shift and go to state 45
    GET             shift and go to state 46
    PUSH            shift and go to state 47
    SIZE1           shift and go to state 48
    SIZE2           shift and go to state 49

    expr                           shift and go to state 122
    oper                           shift and go to state 30
    access                         shift and go to state 67

state 93

    (84) fcall -> SOPEN vars SCLOSE . EQ ID OPEN pars CLOSE

    EQ              shift and go to state 123


state 94

    (86) vars -> ID COMA . vars
    (86) vars -> . ID COMA vars
    (87) vars -> . COMA vars
    (88) vars -> . ID
    (89) vars -> .

    ID              shift and go to state 98
    COMA            shift and go to state 64
    SCLOSE          reduce using rule 89 (vars -> .)

    vars                           shift and go to state 124

state 95

    (55) fvars -> ID EQ . expr
    (56) fvars -> ID EQ . expr COMA fvars
    (58) expr -> . oper
    (59) expr -> . ACONST
    (60) expr -> . LCONST
    (61) expr -> . ID
    (62) expr -> . NOT expr
    (63) expr -> . INCDEC ID
    (64) expr -> . expr GTLT expr
    (65) expr -> . expr OR expr
    (66) expr -> . OPEN expr CLOSE
    (67) oper -> . MOVE
    (68) oper -> . GET
    (69) oper -> . PUSH
    (70) oper -> . SIZE1 ID
    (71) oper -> . SIZE2 ID expr
    (72) oper -> . access
    (73) access -> . ID OPEN expr COMA expr CLOSE
    (74) access -> . ID OPEN expr CLOSE

    ACONST          shift and go to state 31
    LCONST          shift and go to state 32
    ID              shift and go to state 66
    NOT             shift and go to state 33
    INCDEC          shift and go to state 34
    OPEN            shift and go to state 20
    MOVE            shift and go to state 45
    GET             shift and go to state 46
    PUSH            shift and go to state 47
    SIZE1           shift and go to state 48
    SIZE2           shift and go to state 49

    expr                           shift and go to state 125
    oper                           shift and go to state 30
    access                         shift and go to state 67

state 96

    (53) fovars -> SOPEN fvars SCLOSE .

    FUNCTION        reduce using rule 53 (fovars -> SOPEN fvars SCLOSE .)


state 97

    (87) vars -> COMA vars .

    SCLOSE          reduce using rule 87 (vars -> COMA vars .)


state 98

    (86) vars -> ID . COMA vars
    (88) vars -> ID .

    COMA            shift and go to state 94
    SCLOSE          reduce using rule 88 (vars -> ID .)


state 99

    (66) expr -> OPEN expr CLOSE .

    GTLT            reduce using rule 66 (expr -> OPEN expr CLOSE .)
    OR              reduce using rule 66 (expr -> OPEN expr CLOSE .)
    ES              reduce using rule 66 (expr -> OPEN expr CLOSE .)
    CLOSE           reduce using rule 66 (expr -> OPEN expr CLOSE .)
    ID              reduce using rule 66 (expr -> OPEN expr CLOSE .)
    EXTEND1         reduce using rule 66 (expr -> OPEN expr CLOSE .)
    EXTEND2         reduce using rule 66 (expr -> OPEN expr CLOSE .)
    UNDO            reduce using rule 66 (expr -> OPEN expr CLOSE .)
    FOPEN           reduce using rule 66 (expr -> OPEN expr CLOSE .)
    ACONST          reduce using rule 66 (expr -> OPEN expr CLOSE .)
    LCONST          reduce using rule 66 (expr -> OPEN expr CLOSE .)
    NOT             reduce using rule 66 (expr -> OPEN expr CLOSE .)
    INCDEC          reduce using rule 66 (expr -> OPEN expr CLOSE .)
    OPEN            reduce using rule 66 (expr -> OPEN expr CLOSE .)
    MOVE            reduce using rule 66 (expr -> OPEN expr CLOSE .)
    GET             reduce using rule 66 (expr -> OPEN expr CLOSE .)
    PUSH            reduce using rule 66 (expr -> OPEN expr CLOSE .)
    SIZE1           reduce using rule 66 (expr -> OPEN expr CLOSE .)
    SIZE2           reduce using rule 66 (expr -> OPEN expr CLOSE .)
    DO              reduce using rule 66 (expr -> OPEN expr CLOSE .)
    FUNCTION        reduce using rule 66 (expr -> OPEN expr CLOSE .)
    COMA            reduce using rule 66 (expr -> OPEN expr CLOSE .)
    FCLOSE          reduce using rule 66 (expr -> OPEN expr CLOSE .)
    ELSE            reduce using rule 66 (expr -> OPEN expr CLOSE .)
    SCLOSE          reduce using rule 66 (expr -> OPEN expr CLOSE .)
    COMD            reduce using rule 66 (expr -> OPEN expr CLOSE .)


state 100

    (19) group -> FOPEN lines line . FCLOSE
    (21) lines -> lines line . es
    (4) es -> . es es
    (5) es -> . ES

    FCLOSE          shift and go to state 126
    ES              shift and go to state 51

    es                             shift and go to state 127

state 101

    (20) group -> FOPEN lines FCLOSE .

    ES              reduce using rule 20 (group -> FOPEN lines FCLOSE .)
    FCLOSE          reduce using rule 20 (group -> FOPEN lines FCLOSE .)
    ELSE            reduce using rule 20 (group -> FOPEN lines FCLOSE .)


state 102

    (13) sent -> ID . EQ expr
    (85) fcall -> ID . EQ ID OPEN pars CLOSE
    (73) access -> ID . OPEN expr COMA expr CLOSE
    (74) access -> ID . OPEN expr CLOSE
    (61) expr -> ID .

    EQ              shift and go to state 128
    OPEN            shift and go to state 55
    GTLT            reduce using rule 61 (expr -> ID .)
    OR              reduce using rule 61 (expr -> ID .)
    FCLOSE          reduce using rule 61 (expr -> ID .)
    ES              reduce using rule 61 (expr -> ID .)


state 103

    (84) fcall -> SOPEN . vars SCLOSE EQ ID OPEN pars CLOSE
    (86) vars -> . ID COMA vars
    (87) vars -> . COMA vars
    (88) vars -> . ID
    (89) vars -> .

    ID              shift and go to state 98
    COMA            shift and go to state 64
    SCLOSE          reduce using rule 89 (vars -> .)

    vars                           shift and go to state 61

state 104

    (77) cond -> IF expr sent . else
    (79) else -> . ELSE sent
    (80) else -> . ELSE group
    (81) else -> .

    ELSE            shift and go to state 130
    ES              reduce using rule 81 (else -> .)
    FCLOSE          reduce using rule 81 (else -> .)

    else                           shift and go to state 129

state 105

    (78) cond -> IF expr group . else
    (79) else -> . ELSE sent
    (80) else -> . ELSE group
    (81) else -> .

    ELSE            shift and go to state 130
    ES              reduce using rule 81 (else -> .)
    FCLOSE          reduce using rule 81 (else -> .)

    else                           shift and go to state 131

state 106

    (13) sent -> ID . EQ expr
    (73) access -> ID . OPEN expr COMA expr CLOSE
    (74) access -> ID . OPEN expr CLOSE
    (61) expr -> ID .

    EQ              shift and go to state 132
    OPEN            shift and go to state 55
    GTLT            reduce using rule 61 (expr -> ID .)
    OR              reduce using rule 61 (expr -> ID .)
    ELSE            reduce using rule 61 (expr -> ID .)
    ES              reduce using rule 61 (expr -> ID .)
    FCLOSE          reduce using rule 61 (expr -> ID .)


state 107

    (82) loop -> WHILE expr DO . sent
    (83) loop -> WHILE expr DO . group
    (13) sent -> . ID EQ expr
    (14) sent -> . access EQ expr
    (15) sent -> . EXTEND1 ID expr
    (16) sent -> . EXTEND2 ID expr expr
    (17) sent -> . expr
    (18) sent -> . UNDO
    (19) group -> . FOPEN lines line FCLOSE
    (20) group -> . FOPEN lines FCLOSE
    (73) access -> . ID OPEN expr COMA expr CLOSE
    (74) access -> . ID OPEN expr CLOSE
    (58) expr -> . oper
    (59) expr -> . ACONST
    (60) expr -> . LCONST
    (61) expr -> . ID
    (62) expr -> . NOT expr
    (63) expr -> . INCDEC ID
    (64) expr -> . expr GTLT expr
    (65) expr -> . expr OR expr
    (66) expr -> . OPEN expr CLOSE
    (67) oper -> . MOVE
    (68) oper -> . GET
    (69) oper -> . PUSH
    (70) oper -> . SIZE1 ID
    (71) oper -> . SIZE2 ID expr
    (72) oper -> . access

    ID              shift and go to state 106
    EXTEND1         shift and go to state 14
    EXTEND2         shift and go to state 15
    UNDO            shift and go to state 16
    FOPEN           shift and go to state 21
    ACONST          shift and go to state 31
    LCONST          shift and go to state 32
    NOT             shift and go to state 33
    INCDEC          shift and go to state 34
    OPEN            shift and go to state 20
    MOVE            shift and go to state 45
    GET             shift and go to state 46
    PUSH            shift and go to state 47
    SIZE1           shift and go to state 48
    SIZE2           shift and go to state 49

    expr                           shift and go to state 12
    sent                           shift and go to state 133
    group                          shift and go to state 134
    access                         shift and go to state 13
    oper                           shift and go to state 30

state 108

    (42) 2ldecl -> L2ARR ID EQ . SOPEN arrs SCLOSE

    SOPEN           shift and go to state 135


state 109

    (44) 2adecl -> A2ARR ID EQ . SOPEN arrs SCLOSE

    SOPEN           shift and go to state 136


state 110

    (38) 1ldecl -> L1ARR ID EQ . SOPEN vals SCLOSE

    SOPEN           shift and go to state 137


state 111

    (40) 1adecl -> A1ARR ID EQ . SOPEN vals SCLOSE

    SOPEN           shift and go to state 138


state 112

    (34) lvdecl -> LVAR ID EQ . expr
    (58) expr -> . oper
    (59) expr -> . ACONST
    (60) expr -> . LCONST
    (61) expr -> . ID
    (62) expr -> . NOT expr
    (63) expr -> . INCDEC ID
    (64) expr -> . expr GTLT expr
    (65) expr -> . expr OR expr
    (66) expr -> . OPEN expr CLOSE
    (67) oper -> . MOVE
    (68) oper -> . GET
    (69) oper -> . PUSH
    (70) oper -> . SIZE1 ID
    (71) oper -> . SIZE2 ID expr
    (72) oper -> . access
    (73) access -> . ID OPEN expr COMA expr CLOSE
    (74) access -> . ID OPEN expr CLOSE

    ACONST          shift and go to state 31
    LCONST          shift and go to state 32
    ID              shift and go to state 66
    NOT             shift and go to state 33
    INCDEC          shift and go to state 34
    OPEN            shift and go to state 20
    MOVE            shift and go to state 45
    GET             shift and go to state 46
    PUSH            shift and go to state 47
    SIZE1           shift and go to state 48
    SIZE2           shift and go to state 49

    expr                           shift and go to state 139
    oper                           shift and go to state 30
    access                         shift and go to state 67

state 113

    (36) avdecl -> AVAR ID EQ . expr
    (58) expr -> . oper
    (59) expr -> . ACONST
    (60) expr -> . LCONST
    (61) expr -> . ID
    (62) expr -> . NOT expr
    (63) expr -> . INCDEC ID
    (64) expr -> . expr GTLT expr
    (65) expr -> . expr OR expr
    (66) expr -> . OPEN expr CLOSE
    (67) oper -> . MOVE
    (68) oper -> . GET
    (69) oper -> . PUSH
    (70) oper -> . SIZE1 ID
    (71) oper -> . SIZE2 ID expr
    (72) oper -> . access
    (73) access -> . ID OPEN expr COMA expr CLOSE
    (74) access -> . ID OPEN expr CLOSE

    ACONST          shift and go to state 31
    LCONST          shift and go to state 32
    ID              shift and go to state 66
    NOT             shift and go to state 33
    INCDEC          shift and go to state 34
    OPEN            shift and go to state 20
    MOVE            shift and go to state 45
    GET             shift and go to state 46
    PUSH            shift and go to state 47
    SIZE1           shift and go to state 48
    SIZE2           shift and go to state 49

    expr                           shift and go to state 140
    oper                           shift and go to state 30
    access                         shift and go to state 67

state 114

    (31) cldecl -> CLVAR ID EQ . expr
    (58) expr -> . oper
    (59) expr -> . ACONST
    (60) expr -> . LCONST
    (61) expr -> . ID
    (62) expr -> . NOT expr
    (63) expr -> . INCDEC ID
    (64) expr -> . expr GTLT expr
    (65) expr -> . expr OR expr
    (66) expr -> . OPEN expr CLOSE
    (67) oper -> . MOVE
    (68) oper -> . GET
    (69) oper -> . PUSH
    (70) oper -> . SIZE1 ID
    (71) oper -> . SIZE2 ID expr
    (72) oper -> . access
    (73) access -> . ID OPEN expr COMA expr CLOSE
    (74) access -> . ID OPEN expr CLOSE

    ACONST          shift and go to state 31
    LCONST          shift and go to state 32
    ID              shift and go to state 66
    NOT             shift and go to state 33
    INCDEC          shift and go to state 34
    OPEN            shift and go to state 20
    MOVE            shift and go to state 45
    GET             shift and go to state 46
    PUSH            shift and go to state 47
    SIZE1           shift and go to state 48
    SIZE2           shift and go to state 49

    expr                           shift and go to state 141
    oper                           shift and go to state 30
    access                         shift and go to state 67

state 115

    (32) cadecl -> CAVAR ID EQ . expr
    (58) expr -> . oper
    (59) expr -> . ACONST
    (60) expr -> . LCONST
    (61) expr -> . ID
    (62) expr -> . NOT expr
    (63) expr -> . INCDEC ID
    (64) expr -> . expr GTLT expr
    (65) expr -> . expr OR expr
    (66) expr -> . OPEN expr CLOSE
    (67) oper -> . MOVE
    (68) oper -> . GET
    (69) oper -> . PUSH
    (70) oper -> . SIZE1 ID
    (71) oper -> . SIZE2 ID expr
    (72) oper -> . access
    (73) access -> . ID OPEN expr COMA expr CLOSE
    (74) access -> . ID OPEN expr CLOSE

    ACONST          shift and go to state 31
    LCONST          shift and go to state 32
    ID              shift and go to state 66
    NOT             shift and go to state 33
    INCDEC          shift and go to state 34
    OPEN            shift and go to state 20
    MOVE            shift and go to state 45
    GET             shift and go to state 46
    PUSH            shift and go to state 47
    SIZE1           shift and go to state 48
    SIZE2           shift and go to state 49

    expr                           shift and go to state 142
    oper                           shift and go to state 30
    access                         shift and go to state 67

state 116

    (71) oper -> SIZE2 ID expr .
    (64) expr -> expr . GTLT expr
    (65) expr -> expr . OR expr

  ! shift/reduce conflict for GTLT resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    ES              reduce using rule 71 (oper -> SIZE2 ID expr .)
    CLOSE           reduce using rule 71 (oper -> SIZE2 ID expr .)
    ID              reduce using rule 71 (oper -> SIZE2 ID expr .)
    EXTEND1         reduce using rule 71 (oper -> SIZE2 ID expr .)
    EXTEND2         reduce using rule 71 (oper -> SIZE2 ID expr .)
    UNDO            reduce using rule 71 (oper -> SIZE2 ID expr .)
    FOPEN           reduce using rule 71 (oper -> SIZE2 ID expr .)
    ACONST          reduce using rule 71 (oper -> SIZE2 ID expr .)
    LCONST          reduce using rule 71 (oper -> SIZE2 ID expr .)
    NOT             reduce using rule 71 (oper -> SIZE2 ID expr .)
    INCDEC          reduce using rule 71 (oper -> SIZE2 ID expr .)
    OPEN            reduce using rule 71 (oper -> SIZE2 ID expr .)
    MOVE            reduce using rule 71 (oper -> SIZE2 ID expr .)
    GET             reduce using rule 71 (oper -> SIZE2 ID expr .)
    PUSH            reduce using rule 71 (oper -> SIZE2 ID expr .)
    SIZE1           reduce using rule 71 (oper -> SIZE2 ID expr .)
    SIZE2           reduce using rule 71 (oper -> SIZE2 ID expr .)
    DO              reduce using rule 71 (oper -> SIZE2 ID expr .)
    FUNCTION        reduce using rule 71 (oper -> SIZE2 ID expr .)
    COMA            reduce using rule 71 (oper -> SIZE2 ID expr .)
    FCLOSE          reduce using rule 71 (oper -> SIZE2 ID expr .)
    ELSE            reduce using rule 71 (oper -> SIZE2 ID expr .)
    SCLOSE          reduce using rule 71 (oper -> SIZE2 ID expr .)
    COMD            reduce using rule 71 (oper -> SIZE2 ID expr .)
    GTLT            shift and go to state 56
    OR              shift and go to state 57

  ! GTLT            [ reduce using rule 71 (oper -> SIZE2 ID expr .) ]
  ! OR              [ reduce using rule 71 (oper -> SIZE2 ID expr .) ]


state 117

    (51) fdecl -> fovars FUNCTION ID fivars . group
    (19) group -> . FOPEN lines line FCLOSE
    (20) group -> . FOPEN lines FCLOSE

    FOPEN           shift and go to state 21

    group                          shift and go to state 143

state 118

    (54) fivars -> OPEN . fvars CLOSE
    (55) fvars -> . ID EQ expr
    (56) fvars -> . ID EQ expr COMA fvars
    (57) fvars -> .

    ID              shift and go to state 145
    CLOSE           reduce using rule 57 (fvars -> .)

    fvars                          shift and go to state 144

state 119

    (85) fcall -> ID EQ ID OPEN . pars CLOSE
    (73) access -> ID OPEN . expr COMA expr CLOSE
    (74) access -> ID OPEN . expr CLOSE
    (90) pars -> . expr COMA pars
    (91) pars -> . COMA pars
    (92) pars -> . expr
    (93) pars -> .
    (58) expr -> . oper
    (59) expr -> . ACONST
    (60) expr -> . LCONST
    (61) expr -> . ID
    (62) expr -> . NOT expr
    (63) expr -> . INCDEC ID
    (64) expr -> . expr GTLT expr
    (65) expr -> . expr OR expr
    (66) expr -> . OPEN expr CLOSE
    (67) oper -> . MOVE
    (68) oper -> . GET
    (69) oper -> . PUSH
    (70) oper -> . SIZE1 ID
    (71) oper -> . SIZE2 ID expr
    (72) oper -> . access
    (73) access -> . ID OPEN expr COMA expr CLOSE
    (74) access -> . ID OPEN expr CLOSE

    COMA            shift and go to state 148
    CLOSE           reduce using rule 93 (pars -> .)
    ACONST          shift and go to state 31
    LCONST          shift and go to state 32
    ID              shift and go to state 66
    NOT             shift and go to state 33
    INCDEC          shift and go to state 34
    OPEN            shift and go to state 20
    MOVE            shift and go to state 45
    GET             shift and go to state 46
    PUSH            shift and go to state 47
    SIZE1           shift and go to state 48
    SIZE2           shift and go to state 49

    pars                           shift and go to state 146
    expr                           shift and go to state 147
    oper                           shift and go to state 30
    access                         shift and go to state 67

state 120

    (73) access -> ID OPEN expr COMA . expr CLOSE
    (58) expr -> . oper
    (59) expr -> . ACONST
    (60) expr -> . LCONST
    (61) expr -> . ID
    (62) expr -> . NOT expr
    (63) expr -> . INCDEC ID
    (64) expr -> . expr GTLT expr
    (65) expr -> . expr OR expr
    (66) expr -> . OPEN expr CLOSE
    (67) oper -> . MOVE
    (68) oper -> . GET
    (69) oper -> . PUSH
    (70) oper -> . SIZE1 ID
    (71) oper -> . SIZE2 ID expr
    (72) oper -> . access
    (73) access -> . ID OPEN expr COMA expr CLOSE
    (74) access -> . ID OPEN expr CLOSE

    ACONST          shift and go to state 31
    LCONST          shift and go to state 32
    ID              shift and go to state 66
    NOT             shift and go to state 33
    INCDEC          shift and go to state 34
    OPEN            shift and go to state 20
    MOVE            shift and go to state 45
    GET             shift and go to state 46
    PUSH            shift and go to state 47
    SIZE1           shift and go to state 48
    SIZE2           shift and go to state 49

    expr                           shift and go to state 149
    oper                           shift and go to state 30
    access                         shift and go to state 67

state 121

    (74) access -> ID OPEN expr CLOSE .

    EQ              reduce using rule 74 (access -> ID OPEN expr CLOSE .)
    GTLT            reduce using rule 74 (access -> ID OPEN expr CLOSE .)
    OR              reduce using rule 74 (access -> ID OPEN expr CLOSE .)
    ES              reduce using rule 74 (access -> ID OPEN expr CLOSE .)
    CLOSE           reduce using rule 74 (access -> ID OPEN expr CLOSE .)
    ID              reduce using rule 74 (access -> ID OPEN expr CLOSE .)
    EXTEND1         reduce using rule 74 (access -> ID OPEN expr CLOSE .)
    EXTEND2         reduce using rule 74 (access -> ID OPEN expr CLOSE .)
    UNDO            reduce using rule 74 (access -> ID OPEN expr CLOSE .)
    FOPEN           reduce using rule 74 (access -> ID OPEN expr CLOSE .)
    ACONST          reduce using rule 74 (access -> ID OPEN expr CLOSE .)
    LCONST          reduce using rule 74 (access -> ID OPEN expr CLOSE .)
    NOT             reduce using rule 74 (access -> ID OPEN expr CLOSE .)
    INCDEC          reduce using rule 74 (access -> ID OPEN expr CLOSE .)
    OPEN            reduce using rule 74 (access -> ID OPEN expr CLOSE .)
    MOVE            reduce using rule 74 (access -> ID OPEN expr CLOSE .)
    GET             reduce using rule 74 (access -> ID OPEN expr CLOSE .)
    PUSH            reduce using rule 74 (access -> ID OPEN expr CLOSE .)
    SIZE1           reduce using rule 74 (access -> ID OPEN expr CLOSE .)
    SIZE2           reduce using rule 74 (access -> ID OPEN expr CLOSE .)
    DO              reduce using rule 74 (access -> ID OPEN expr CLOSE .)
    FUNCTION        reduce using rule 74 (access -> ID OPEN expr CLOSE .)
    COMA            reduce using rule 74 (access -> ID OPEN expr CLOSE .)
    FCLOSE          reduce using rule 74 (access -> ID OPEN expr CLOSE .)
    ELSE            reduce using rule 74 (access -> ID OPEN expr CLOSE .)
    SCLOSE          reduce using rule 74 (access -> ID OPEN expr CLOSE .)
    COMD            reduce using rule 74 (access -> ID OPEN expr CLOSE .)


state 122

    (16) sent -> EXTEND2 ID expr expr .
    (64) expr -> expr . GTLT expr
    (65) expr -> expr . OR expr

    ES              reduce using rule 16 (sent -> EXTEND2 ID expr expr .)
    FCLOSE          reduce using rule 16 (sent -> EXTEND2 ID expr expr .)
    ELSE            reduce using rule 16 (sent -> EXTEND2 ID expr expr .)
    GTLT            shift and go to state 56
    OR              shift and go to state 57


state 123

    (84) fcall -> SOPEN vars SCLOSE EQ . ID OPEN pars CLOSE

    ID              shift and go to state 150


state 124

    (86) vars -> ID COMA vars .

    SCLOSE          reduce using rule 86 (vars -> ID COMA vars .)


state 125

    (55) fvars -> ID EQ expr .
    (56) fvars -> ID EQ expr . COMA fvars
    (64) expr -> expr . GTLT expr
    (65) expr -> expr . OR expr

    SCLOSE          reduce using rule 55 (fvars -> ID EQ expr .)
    CLOSE           reduce using rule 55 (fvars -> ID EQ expr .)
    COMA            shift and go to state 151
    GTLT            shift and go to state 56
    OR              shift and go to state 57


state 126

    (19) group -> FOPEN lines line FCLOSE .

    ES              reduce using rule 19 (group -> FOPEN lines line FCLOSE .)
    FCLOSE          reduce using rule 19 (group -> FOPEN lines line FCLOSE .)
    ELSE            reduce using rule 19 (group -> FOPEN lines line FCLOSE .)


state 127

    (21) lines -> lines line es .
    (4) es -> es . es
    (4) es -> . es es
    (5) es -> . ES

  ! shift/reduce conflict for ES resolved as shift
    FCLOSE          reduce using rule 21 (lines -> lines line es .)
    ID              reduce using rule 21 (lines -> lines line es .)
    EXTEND1         reduce using rule 21 (lines -> lines line es .)
    EXTEND2         reduce using rule 21 (lines -> lines line es .)
    UNDO            reduce using rule 21 (lines -> lines line es .)
    SOPEN           reduce using rule 21 (lines -> lines line es .)
    FOPEN           reduce using rule 21 (lines -> lines line es .)
    ACONST          reduce using rule 21 (lines -> lines line es .)
    LCONST          reduce using rule 21 (lines -> lines line es .)
    NOT             reduce using rule 21 (lines -> lines line es .)
    INCDEC          reduce using rule 21 (lines -> lines line es .)
    OPEN            reduce using rule 21 (lines -> lines line es .)
    IF              reduce using rule 21 (lines -> lines line es .)
    WHILE           reduce using rule 21 (lines -> lines line es .)
    L2ARR           reduce using rule 21 (lines -> lines line es .)
    A2ARR           reduce using rule 21 (lines -> lines line es .)
    L1ARR           reduce using rule 21 (lines -> lines line es .)
    A1ARR           reduce using rule 21 (lines -> lines line es .)
    LVAR            reduce using rule 21 (lines -> lines line es .)
    AVAR            reduce using rule 21 (lines -> lines line es .)
    CLVAR           reduce using rule 21 (lines -> lines line es .)
    CAVAR           reduce using rule 21 (lines -> lines line es .)
    MOVE            reduce using rule 21 (lines -> lines line es .)
    GET             reduce using rule 21 (lines -> lines line es .)
    PUSH            reduce using rule 21 (lines -> lines line es .)
    SIZE1           reduce using rule 21 (lines -> lines line es .)
    SIZE2           reduce using rule 21 (lines -> lines line es .)
    ES              shift and go to state 51

  ! ES              [ reduce using rule 21 (lines -> lines line es .) ]

    es                             shift and go to state 83

state 128

    (13) sent -> ID EQ . expr
    (85) fcall -> ID EQ . ID OPEN pars CLOSE
    (58) expr -> . oper
    (59) expr -> . ACONST
    (60) expr -> . LCONST
    (61) expr -> . ID
    (62) expr -> . NOT expr
    (63) expr -> . INCDEC ID
    (64) expr -> . expr GTLT expr
    (65) expr -> . expr OR expr
    (66) expr -> . OPEN expr CLOSE
    (67) oper -> . MOVE
    (68) oper -> . GET
    (69) oper -> . PUSH
    (70) oper -> . SIZE1 ID
    (71) oper -> . SIZE2 ID expr
    (72) oper -> . access
    (73) access -> . ID OPEN expr COMA expr CLOSE
    (74) access -> . ID OPEN expr CLOSE

    ID              shift and go to state 85
    ACONST          shift and go to state 31
    LCONST          shift and go to state 32
    NOT             shift and go to state 33
    INCDEC          shift and go to state 34
    OPEN            shift and go to state 20
    MOVE            shift and go to state 45
    GET             shift and go to state 46
    PUSH            shift and go to state 47
    SIZE1           shift and go to state 48
    SIZE2           shift and go to state 49

    expr                           shift and go to state 152
    oper                           shift and go to state 30
    access                         shift and go to state 67

state 129

    (77) cond -> IF expr sent else .

    ES              reduce using rule 77 (cond -> IF expr sent else .)
    FCLOSE          reduce using rule 77 (cond -> IF expr sent else .)


state 130

    (79) else -> ELSE . sent
    (80) else -> ELSE . group
    (13) sent -> . ID EQ expr
    (14) sent -> . access EQ expr
    (15) sent -> . EXTEND1 ID expr
    (16) sent -> . EXTEND2 ID expr expr
    (17) sent -> . expr
    (18) sent -> . UNDO
    (19) group -> . FOPEN lines line FCLOSE
    (20) group -> . FOPEN lines FCLOSE
    (73) access -> . ID OPEN expr COMA expr CLOSE
    (74) access -> . ID OPEN expr CLOSE
    (58) expr -> . oper
    (59) expr -> . ACONST
    (60) expr -> . LCONST
    (61) expr -> . ID
    (62) expr -> . NOT expr
    (63) expr -> . INCDEC ID
    (64) expr -> . expr GTLT expr
    (65) expr -> . expr OR expr
    (66) expr -> . OPEN expr CLOSE
    (67) oper -> . MOVE
    (68) oper -> . GET
    (69) oper -> . PUSH
    (70) oper -> . SIZE1 ID
    (71) oper -> . SIZE2 ID expr
    (72) oper -> . access

    ID              shift and go to state 106
    EXTEND1         shift and go to state 14
    EXTEND2         shift and go to state 15
    UNDO            shift and go to state 16
    FOPEN           shift and go to state 21
    ACONST          shift and go to state 31
    LCONST          shift and go to state 32
    NOT             shift and go to state 33
    INCDEC          shift and go to state 34
    OPEN            shift and go to state 20
    MOVE            shift and go to state 45
    GET             shift and go to state 46
    PUSH            shift and go to state 47
    SIZE1           shift and go to state 48
    SIZE2           shift and go to state 49

    sent                           shift and go to state 153
    group                          shift and go to state 154
    expr                           shift and go to state 12
    access                         shift and go to state 13
    oper                           shift and go to state 30

state 131

    (78) cond -> IF expr group else .

    ES              reduce using rule 78 (cond -> IF expr group else .)
    FCLOSE          reduce using rule 78 (cond -> IF expr group else .)


state 132

    (13) sent -> ID EQ . expr
    (58) expr -> . oper
    (59) expr -> . ACONST
    (60) expr -> . LCONST
    (61) expr -> . ID
    (62) expr -> . NOT expr
    (63) expr -> . INCDEC ID
    (64) expr -> . expr GTLT expr
    (65) expr -> . expr OR expr
    (66) expr -> . OPEN expr CLOSE
    (67) oper -> . MOVE
    (68) oper -> . GET
    (69) oper -> . PUSH
    (70) oper -> . SIZE1 ID
    (71) oper -> . SIZE2 ID expr
    (72) oper -> . access
    (73) access -> . ID OPEN expr COMA expr CLOSE
    (74) access -> . ID OPEN expr CLOSE

    ACONST          shift and go to state 31
    LCONST          shift and go to state 32
    ID              shift and go to state 66
    NOT             shift and go to state 33
    INCDEC          shift and go to state 34
    OPEN            shift and go to state 20
    MOVE            shift and go to state 45
    GET             shift and go to state 46
    PUSH            shift and go to state 47
    SIZE1           shift and go to state 48
    SIZE2           shift and go to state 49

    expr                           shift and go to state 152
    oper                           shift and go to state 30
    access                         shift and go to state 67

state 133

    (82) loop -> WHILE expr DO sent .

    ES              reduce using rule 82 (loop -> WHILE expr DO sent .)
    FCLOSE          reduce using rule 82 (loop -> WHILE expr DO sent .)


state 134

    (83) loop -> WHILE expr DO group .

    ES              reduce using rule 83 (loop -> WHILE expr DO group .)
    FCLOSE          reduce using rule 83 (loop -> WHILE expr DO group .)


state 135

    (42) 2ldecl -> L2ARR ID EQ SOPEN . arrs SCLOSE
    (47) arrs -> . vals COMD arrs
    (48) arrs -> . COMD arrs
    (49) arrs -> . vals
    (50) arrs -> .
    (45) vals -> . expr COMA vals
    (46) vals -> . expr
    (58) expr -> . oper
    (59) expr -> . ACONST
    (60) expr -> . LCONST
    (61) expr -> . ID
    (62) expr -> . NOT expr
    (63) expr -> . INCDEC ID
    (64) expr -> . expr GTLT expr
    (65) expr -> . expr OR expr
    (66) expr -> . OPEN expr CLOSE
    (67) oper -> . MOVE
    (68) oper -> . GET
    (69) oper -> . PUSH
    (70) oper -> . SIZE1 ID
    (71) oper -> . SIZE2 ID expr
    (72) oper -> . access
    (73) access -> . ID OPEN expr COMA expr CLOSE
    (74) access -> . ID OPEN expr CLOSE

    COMD            shift and go to state 157
    SCLOSE          reduce using rule 50 (arrs -> .)
    ACONST          shift and go to state 31
    LCONST          shift and go to state 32
    ID              shift and go to state 66
    NOT             shift and go to state 33
    INCDEC          shift and go to state 34
    OPEN            shift and go to state 20
    MOVE            shift and go to state 45
    GET             shift and go to state 46
    PUSH            shift and go to state 47
    SIZE1           shift and go to state 48
    SIZE2           shift and go to state 49

    arrs                           shift and go to state 155
    vals                           shift and go to state 156
    expr                           shift and go to state 158
    oper                           shift and go to state 30
    access                         shift and go to state 67

state 136

    (44) 2adecl -> A2ARR ID EQ SOPEN . arrs SCLOSE
    (47) arrs -> . vals COMD arrs
    (48) arrs -> . COMD arrs
    (49) arrs -> . vals
    (50) arrs -> .
    (45) vals -> . expr COMA vals
    (46) vals -> . expr
    (58) expr -> . oper
    (59) expr -> . ACONST
    (60) expr -> . LCONST
    (61) expr -> . ID
    (62) expr -> . NOT expr
    (63) expr -> . INCDEC ID
    (64) expr -> . expr GTLT expr
    (65) expr -> . expr OR expr
    (66) expr -> . OPEN expr CLOSE
    (67) oper -> . MOVE
    (68) oper -> . GET
    (69) oper -> . PUSH
    (70) oper -> . SIZE1 ID
    (71) oper -> . SIZE2 ID expr
    (72) oper -> . access
    (73) access -> . ID OPEN expr COMA expr CLOSE
    (74) access -> . ID OPEN expr CLOSE

    COMD            shift and go to state 157
    SCLOSE          reduce using rule 50 (arrs -> .)
    ACONST          shift and go to state 31
    LCONST          shift and go to state 32
    ID              shift and go to state 66
    NOT             shift and go to state 33
    INCDEC          shift and go to state 34
    OPEN            shift and go to state 20
    MOVE            shift and go to state 45
    GET             shift and go to state 46
    PUSH            shift and go to state 47
    SIZE1           shift and go to state 48
    SIZE2           shift and go to state 49

    arrs                           shift and go to state 159
    vals                           shift and go to state 156
    expr                           shift and go to state 158
    oper                           shift and go to state 30
    access                         shift and go to state 67

state 137

    (38) 1ldecl -> L1ARR ID EQ SOPEN . vals SCLOSE
    (45) vals -> . expr COMA vals
    (46) vals -> . expr
    (58) expr -> . oper
    (59) expr -> . ACONST
    (60) expr -> . LCONST
    (61) expr -> . ID
    (62) expr -> . NOT expr
    (63) expr -> . INCDEC ID
    (64) expr -> . expr GTLT expr
    (65) expr -> . expr OR expr
    (66) expr -> . OPEN expr CLOSE
    (67) oper -> . MOVE
    (68) oper -> . GET
    (69) oper -> . PUSH
    (70) oper -> . SIZE1 ID
    (71) oper -> . SIZE2 ID expr
    (72) oper -> . access
    (73) access -> . ID OPEN expr COMA expr CLOSE
    (74) access -> . ID OPEN expr CLOSE

    ACONST          shift and go to state 31
    LCONST          shift and go to state 32
    ID              shift and go to state 66
    NOT             shift and go to state 33
    INCDEC          shift and go to state 34
    OPEN            shift and go to state 20
    MOVE            shift and go to state 45
    GET             shift and go to state 46
    PUSH            shift and go to state 47
    SIZE1           shift and go to state 48
    SIZE2           shift and go to state 49

    vals                           shift and go to state 160
    expr                           shift and go to state 158
    oper                           shift and go to state 30
    access                         shift and go to state 67

state 138

    (40) 1adecl -> A1ARR ID EQ SOPEN . vals SCLOSE
    (45) vals -> . expr COMA vals
    (46) vals -> . expr
    (58) expr -> . oper
    (59) expr -> . ACONST
    (60) expr -> . LCONST
    (61) expr -> . ID
    (62) expr -> . NOT expr
    (63) expr -> . INCDEC ID
    (64) expr -> . expr GTLT expr
    (65) expr -> . expr OR expr
    (66) expr -> . OPEN expr CLOSE
    (67) oper -> . MOVE
    (68) oper -> . GET
    (69) oper -> . PUSH
    (70) oper -> . SIZE1 ID
    (71) oper -> . SIZE2 ID expr
    (72) oper -> . access
    (73) access -> . ID OPEN expr COMA expr CLOSE
    (74) access -> . ID OPEN expr CLOSE

    ACONST          shift and go to state 31
    LCONST          shift and go to state 32
    ID              shift and go to state 66
    NOT             shift and go to state 33
    INCDEC          shift and go to state 34
    OPEN            shift and go to state 20
    MOVE            shift and go to state 45
    GET             shift and go to state 46
    PUSH            shift and go to state 47
    SIZE1           shift and go to state 48
    SIZE2           shift and go to state 49

    vals                           shift and go to state 161
    expr                           shift and go to state 158
    oper                           shift and go to state 30
    access                         shift and go to state 67

state 139

    (34) lvdecl -> LVAR ID EQ expr .
    (64) expr -> expr . GTLT expr
    (65) expr -> expr . OR expr

    ES              reduce using rule 34 (lvdecl -> LVAR ID EQ expr .)
    FCLOSE          reduce using rule 34 (lvdecl -> LVAR ID EQ expr .)
    GTLT            shift and go to state 56
    OR              shift and go to state 57


state 140

    (36) avdecl -> AVAR ID EQ expr .
    (64) expr -> expr . GTLT expr
    (65) expr -> expr . OR expr

    ES              reduce using rule 36 (avdecl -> AVAR ID EQ expr .)
    FCLOSE          reduce using rule 36 (avdecl -> AVAR ID EQ expr .)
    GTLT            shift and go to state 56
    OR              shift and go to state 57


state 141

    (31) cldecl -> CLVAR ID EQ expr .
    (64) expr -> expr . GTLT expr
    (65) expr -> expr . OR expr

    ES              reduce using rule 31 (cldecl -> CLVAR ID EQ expr .)
    FCLOSE          reduce using rule 31 (cldecl -> CLVAR ID EQ expr .)
    GTLT            shift and go to state 56
    OR              shift and go to state 57


state 142

    (32) cadecl -> CAVAR ID EQ expr .
    (64) expr -> expr . GTLT expr
    (65) expr -> expr . OR expr

    ES              reduce using rule 32 (cadecl -> CAVAR ID EQ expr .)
    FCLOSE          reduce using rule 32 (cadecl -> CAVAR ID EQ expr .)
    GTLT            shift and go to state 56
    OR              shift and go to state 57


state 143

    (51) fdecl -> fovars FUNCTION ID fivars group .

    ES              reduce using rule 51 (fdecl -> fovars FUNCTION ID fivars group .)


state 144

    (54) fivars -> OPEN fvars . CLOSE

    CLOSE           shift and go to state 162


state 145

    (55) fvars -> ID . EQ expr
    (56) fvars -> ID . EQ expr COMA fvars

    EQ              shift and go to state 95


state 146

    (85) fcall -> ID EQ ID OPEN pars . CLOSE

    CLOSE           shift and go to state 163


state 147

    (73) access -> ID OPEN expr . COMA expr CLOSE
    (74) access -> ID OPEN expr . CLOSE
    (90) pars -> expr . COMA pars
    (92) pars -> expr .
    (64) expr -> expr . GTLT expr
    (65) expr -> expr . OR expr

  ! shift/reduce conflict for CLOSE resolved as shift
    COMA            shift and go to state 164
    CLOSE           shift and go to state 121
    GTLT            shift and go to state 56
    OR              shift and go to state 57

  ! CLOSE           [ reduce using rule 92 (pars -> expr .) ]


state 148

    (91) pars -> COMA . pars
    (90) pars -> . expr COMA pars
    (91) pars -> . COMA pars
    (92) pars -> . expr
    (93) pars -> .
    (58) expr -> . oper
    (59) expr -> . ACONST
    (60) expr -> . LCONST
    (61) expr -> . ID
    (62) expr -> . NOT expr
    (63) expr -> . INCDEC ID
    (64) expr -> . expr GTLT expr
    (65) expr -> . expr OR expr
    (66) expr -> . OPEN expr CLOSE
    (67) oper -> . MOVE
    (68) oper -> . GET
    (69) oper -> . PUSH
    (70) oper -> . SIZE1 ID
    (71) oper -> . SIZE2 ID expr
    (72) oper -> . access
    (73) access -> . ID OPEN expr COMA expr CLOSE
    (74) access -> . ID OPEN expr CLOSE

    COMA            shift and go to state 148
    CLOSE           reduce using rule 93 (pars -> .)
    ACONST          shift and go to state 31
    LCONST          shift and go to state 32
    ID              shift and go to state 66
    NOT             shift and go to state 33
    INCDEC          shift and go to state 34
    OPEN            shift and go to state 20
    MOVE            shift and go to state 45
    GET             shift and go to state 46
    PUSH            shift and go to state 47
    SIZE1           shift and go to state 48
    SIZE2           shift and go to state 49

    pars                           shift and go to state 165
    expr                           shift and go to state 166
    oper                           shift and go to state 30
    access                         shift and go to state 67

state 149

    (73) access -> ID OPEN expr COMA expr . CLOSE
    (64) expr -> expr . GTLT expr
    (65) expr -> expr . OR expr

    CLOSE           shift and go to state 167
    GTLT            shift and go to state 56
    OR              shift and go to state 57


state 150

    (84) fcall -> SOPEN vars SCLOSE EQ ID . OPEN pars CLOSE

    OPEN            shift and go to state 168


state 151

    (56) fvars -> ID EQ expr COMA . fvars
    (55) fvars -> . ID EQ expr
    (56) fvars -> . ID EQ expr COMA fvars
    (57) fvars -> .

    ID              shift and go to state 145
    SCLOSE          reduce using rule 57 (fvars -> .)
    CLOSE           reduce using rule 57 (fvars -> .)

    fvars                          shift and go to state 169

state 152

    (13) sent -> ID EQ expr .
    (64) expr -> expr . GTLT expr
    (65) expr -> expr . OR expr

    FCLOSE          reduce using rule 13 (sent -> ID EQ expr .)
    ES              reduce using rule 13 (sent -> ID EQ expr .)
    ELSE            reduce using rule 13 (sent -> ID EQ expr .)
    GTLT            shift and go to state 56
    OR              shift and go to state 57


state 153

    (79) else -> ELSE sent .

    ES              reduce using rule 79 (else -> ELSE sent .)
    FCLOSE          reduce using rule 79 (else -> ELSE sent .)


state 154

    (80) else -> ELSE group .

    ES              reduce using rule 80 (else -> ELSE group .)
    FCLOSE          reduce using rule 80 (else -> ELSE group .)


state 155

    (42) 2ldecl -> L2ARR ID EQ SOPEN arrs . SCLOSE

    SCLOSE          shift and go to state 170


state 156

    (47) arrs -> vals . COMD arrs
    (49) arrs -> vals .

    COMD            shift and go to state 171
    SCLOSE          reduce using rule 49 (arrs -> vals .)


state 157

    (48) arrs -> COMD . arrs
    (47) arrs -> . vals COMD arrs
    (48) arrs -> . COMD arrs
    (49) arrs -> . vals
    (50) arrs -> .
    (45) vals -> . expr COMA vals
    (46) vals -> . expr
    (58) expr -> . oper
    (59) expr -> . ACONST
    (60) expr -> . LCONST
    (61) expr -> . ID
    (62) expr -> . NOT expr
    (63) expr -> . INCDEC ID
    (64) expr -> . expr GTLT expr
    (65) expr -> . expr OR expr
    (66) expr -> . OPEN expr CLOSE
    (67) oper -> . MOVE
    (68) oper -> . GET
    (69) oper -> . PUSH
    (70) oper -> . SIZE1 ID
    (71) oper -> . SIZE2 ID expr
    (72) oper -> . access
    (73) access -> . ID OPEN expr COMA expr CLOSE
    (74) access -> . ID OPEN expr CLOSE

    COMD            shift and go to state 157
    SCLOSE          reduce using rule 50 (arrs -> .)
    ACONST          shift and go to state 31
    LCONST          shift and go to state 32
    ID              shift and go to state 66
    NOT             shift and go to state 33
    INCDEC          shift and go to state 34
    OPEN            shift and go to state 20
    MOVE            shift and go to state 45
    GET             shift and go to state 46
    PUSH            shift and go to state 47
    SIZE1           shift and go to state 48
    SIZE2           shift and go to state 49

    arrs                           shift and go to state 172
    vals                           shift and go to state 156
    expr                           shift and go to state 158
    oper                           shift and go to state 30
    access                         shift and go to state 67

state 158

    (45) vals -> expr . COMA vals
    (46) vals -> expr .
    (64) expr -> expr . GTLT expr
    (65) expr -> expr . OR expr

    COMA            shift and go to state 173
    COMD            reduce using rule 46 (vals -> expr .)
    SCLOSE          reduce using rule 46 (vals -> expr .)
    GTLT            shift and go to state 56
    OR              shift and go to state 57


state 159

    (44) 2adecl -> A2ARR ID EQ SOPEN arrs . SCLOSE

    SCLOSE          shift and go to state 174


state 160

    (38) 1ldecl -> L1ARR ID EQ SOPEN vals . SCLOSE

    SCLOSE          shift and go to state 175


state 161

    (40) 1adecl -> A1ARR ID EQ SOPEN vals . SCLOSE

    SCLOSE          shift and go to state 176


state 162

    (54) fivars -> OPEN fvars CLOSE .

    FOPEN           reduce using rule 54 (fivars -> OPEN fvars CLOSE .)


state 163

    (85) fcall -> ID EQ ID OPEN pars CLOSE .

    ES              reduce using rule 85 (fcall -> ID EQ ID OPEN pars CLOSE .)
    FCLOSE          reduce using rule 85 (fcall -> ID EQ ID OPEN pars CLOSE .)


state 164

    (73) access -> ID OPEN expr COMA . expr CLOSE
    (90) pars -> expr COMA . pars
    (58) expr -> . oper
    (59) expr -> . ACONST
    (60) expr -> . LCONST
    (61) expr -> . ID
    (62) expr -> . NOT expr
    (63) expr -> . INCDEC ID
    (64) expr -> . expr GTLT expr
    (65) expr -> . expr OR expr
    (66) expr -> . OPEN expr CLOSE
    (90) pars -> . expr COMA pars
    (91) pars -> . COMA pars
    (92) pars -> . expr
    (93) pars -> .
    (67) oper -> . MOVE
    (68) oper -> . GET
    (69) oper -> . PUSH
    (70) oper -> . SIZE1 ID
    (71) oper -> . SIZE2 ID expr
    (72) oper -> . access
    (73) access -> . ID OPEN expr COMA expr CLOSE
    (74) access -> . ID OPEN expr CLOSE

    ACONST          shift and go to state 31
    LCONST          shift and go to state 32
    ID              shift and go to state 66
    NOT             shift and go to state 33
    INCDEC          shift and go to state 34
    OPEN            shift and go to state 20
    COMA            shift and go to state 148
    CLOSE           reduce using rule 93 (pars -> .)
    MOVE            shift and go to state 45
    GET             shift and go to state 46
    PUSH            shift and go to state 47
    SIZE1           shift and go to state 48
    SIZE2           shift and go to state 49

    expr                           shift and go to state 177
    pars                           shift and go to state 178
    oper                           shift and go to state 30
    access                         shift and go to state 67

state 165

    (91) pars -> COMA pars .

    CLOSE           reduce using rule 91 (pars -> COMA pars .)


state 166

    (90) pars -> expr . COMA pars
    (92) pars -> expr .
    (64) expr -> expr . GTLT expr
    (65) expr -> expr . OR expr

    COMA            shift and go to state 179
    CLOSE           reduce using rule 92 (pars -> expr .)
    GTLT            shift and go to state 56
    OR              shift and go to state 57


state 167

    (73) access -> ID OPEN expr COMA expr CLOSE .

    EQ              reduce using rule 73 (access -> ID OPEN expr COMA expr CLOSE .)
    GTLT            reduce using rule 73 (access -> ID OPEN expr COMA expr CLOSE .)
    OR              reduce using rule 73 (access -> ID OPEN expr COMA expr CLOSE .)
    ES              reduce using rule 73 (access -> ID OPEN expr COMA expr CLOSE .)
    CLOSE           reduce using rule 73 (access -> ID OPEN expr COMA expr CLOSE .)
    ID              reduce using rule 73 (access -> ID OPEN expr COMA expr CLOSE .)
    EXTEND1         reduce using rule 73 (access -> ID OPEN expr COMA expr CLOSE .)
    EXTEND2         reduce using rule 73 (access -> ID OPEN expr COMA expr CLOSE .)
    UNDO            reduce using rule 73 (access -> ID OPEN expr COMA expr CLOSE .)
    FOPEN           reduce using rule 73 (access -> ID OPEN expr COMA expr CLOSE .)
    ACONST          reduce using rule 73 (access -> ID OPEN expr COMA expr CLOSE .)
    LCONST          reduce using rule 73 (access -> ID OPEN expr COMA expr CLOSE .)
    NOT             reduce using rule 73 (access -> ID OPEN expr COMA expr CLOSE .)
    INCDEC          reduce using rule 73 (access -> ID OPEN expr COMA expr CLOSE .)
    OPEN            reduce using rule 73 (access -> ID OPEN expr COMA expr CLOSE .)
    MOVE            reduce using rule 73 (access -> ID OPEN expr COMA expr CLOSE .)
    GET             reduce using rule 73 (access -> ID OPEN expr COMA expr CLOSE .)
    PUSH            reduce using rule 73 (access -> ID OPEN expr COMA expr CLOSE .)
    SIZE1           reduce using rule 73 (access -> ID OPEN expr COMA expr CLOSE .)
    SIZE2           reduce using rule 73 (access -> ID OPEN expr COMA expr CLOSE .)
    DO              reduce using rule 73 (access -> ID OPEN expr COMA expr CLOSE .)
    FUNCTION        reduce using rule 73 (access -> ID OPEN expr COMA expr CLOSE .)
    COMA            reduce using rule 73 (access -> ID OPEN expr COMA expr CLOSE .)
    FCLOSE          reduce using rule 73 (access -> ID OPEN expr COMA expr CLOSE .)
    ELSE            reduce using rule 73 (access -> ID OPEN expr COMA expr CLOSE .)
    SCLOSE          reduce using rule 73 (access -> ID OPEN expr COMA expr CLOSE .)
    COMD            reduce using rule 73 (access -> ID OPEN expr COMA expr CLOSE .)


state 168

    (84) fcall -> SOPEN vars SCLOSE EQ ID OPEN . pars CLOSE
    (90) pars -> . expr COMA pars
    (91) pars -> . COMA pars
    (92) pars -> . expr
    (93) pars -> .
    (58) expr -> . oper
    (59) expr -> . ACONST
    (60) expr -> . LCONST
    (61) expr -> . ID
    (62) expr -> . NOT expr
    (63) expr -> . INCDEC ID
    (64) expr -> . expr GTLT expr
    (65) expr -> . expr OR expr
    (66) expr -> . OPEN expr CLOSE
    (67) oper -> . MOVE
    (68) oper -> . GET
    (69) oper -> . PUSH
    (70) oper -> . SIZE1 ID
    (71) oper -> . SIZE2 ID expr
    (72) oper -> . access
    (73) access -> . ID OPEN expr COMA expr CLOSE
    (74) access -> . ID OPEN expr CLOSE

    COMA            shift and go to state 148
    CLOSE           reduce using rule 93 (pars -> .)
    ACONST          shift and go to state 31
    LCONST          shift and go to state 32
    ID              shift and go to state 66
    NOT             shift and go to state 33
    INCDEC          shift and go to state 34
    OPEN            shift and go to state 20
    MOVE            shift and go to state 45
    GET             shift and go to state 46
    PUSH            shift and go to state 47
    SIZE1           shift and go to state 48
    SIZE2           shift and go to state 49

    pars                           shift and go to state 180
    expr                           shift and go to state 166
    oper                           shift and go to state 30
    access                         shift and go to state 67

state 169

    (56) fvars -> ID EQ expr COMA fvars .

    SCLOSE          reduce using rule 56 (fvars -> ID EQ expr COMA fvars .)
    CLOSE           reduce using rule 56 (fvars -> ID EQ expr COMA fvars .)


state 170

    (42) 2ldecl -> L2ARR ID EQ SOPEN arrs SCLOSE .

    ES              reduce using rule 42 (2ldecl -> L2ARR ID EQ SOPEN arrs SCLOSE .)
    FCLOSE          reduce using rule 42 (2ldecl -> L2ARR ID EQ SOPEN arrs SCLOSE .)


state 171

    (47) arrs -> vals COMD . arrs
    (47) arrs -> . vals COMD arrs
    (48) arrs -> . COMD arrs
    (49) arrs -> . vals
    (50) arrs -> .
    (45) vals -> . expr COMA vals
    (46) vals -> . expr
    (58) expr -> . oper
    (59) expr -> . ACONST
    (60) expr -> . LCONST
    (61) expr -> . ID
    (62) expr -> . NOT expr
    (63) expr -> . INCDEC ID
    (64) expr -> . expr GTLT expr
    (65) expr -> . expr OR expr
    (66) expr -> . OPEN expr CLOSE
    (67) oper -> . MOVE
    (68) oper -> . GET
    (69) oper -> . PUSH
    (70) oper -> . SIZE1 ID
    (71) oper -> . SIZE2 ID expr
    (72) oper -> . access
    (73) access -> . ID OPEN expr COMA expr CLOSE
    (74) access -> . ID OPEN expr CLOSE

    COMD            shift and go to state 157
    SCLOSE          reduce using rule 50 (arrs -> .)
    ACONST          shift and go to state 31
    LCONST          shift and go to state 32
    ID              shift and go to state 66
    NOT             shift and go to state 33
    INCDEC          shift and go to state 34
    OPEN            shift and go to state 20
    MOVE            shift and go to state 45
    GET             shift and go to state 46
    PUSH            shift and go to state 47
    SIZE1           shift and go to state 48
    SIZE2           shift and go to state 49

    vals                           shift and go to state 156
    arrs                           shift and go to state 181
    expr                           shift and go to state 158
    oper                           shift and go to state 30
    access                         shift and go to state 67

state 172

    (48) arrs -> COMD arrs .

    SCLOSE          reduce using rule 48 (arrs -> COMD arrs .)


state 173

    (45) vals -> expr COMA . vals
    (45) vals -> . expr COMA vals
    (46) vals -> . expr
    (58) expr -> . oper
    (59) expr -> . ACONST
    (60) expr -> . LCONST
    (61) expr -> . ID
    (62) expr -> . NOT expr
    (63) expr -> . INCDEC ID
    (64) expr -> . expr GTLT expr
    (65) expr -> . expr OR expr
    (66) expr -> . OPEN expr CLOSE
    (67) oper -> . MOVE
    (68) oper -> . GET
    (69) oper -> . PUSH
    (70) oper -> . SIZE1 ID
    (71) oper -> . SIZE2 ID expr
    (72) oper -> . access
    (73) access -> . ID OPEN expr COMA expr CLOSE
    (74) access -> . ID OPEN expr CLOSE

    ACONST          shift and go to state 31
    LCONST          shift and go to state 32
    ID              shift and go to state 66
    NOT             shift and go to state 33
    INCDEC          shift and go to state 34
    OPEN            shift and go to state 20
    MOVE            shift and go to state 45
    GET             shift and go to state 46
    PUSH            shift and go to state 47
    SIZE1           shift and go to state 48
    SIZE2           shift and go to state 49

    expr                           shift and go to state 158
    vals                           shift and go to state 182
    oper                           shift and go to state 30
    access                         shift and go to state 67

state 174

    (44) 2adecl -> A2ARR ID EQ SOPEN arrs SCLOSE .

    ES              reduce using rule 44 (2adecl -> A2ARR ID EQ SOPEN arrs SCLOSE .)
    FCLOSE          reduce using rule 44 (2adecl -> A2ARR ID EQ SOPEN arrs SCLOSE .)


state 175

    (38) 1ldecl -> L1ARR ID EQ SOPEN vals SCLOSE .

    ES              reduce using rule 38 (1ldecl -> L1ARR ID EQ SOPEN vals SCLOSE .)
    FCLOSE          reduce using rule 38 (1ldecl -> L1ARR ID EQ SOPEN vals SCLOSE .)


state 176

    (40) 1adecl -> A1ARR ID EQ SOPEN vals SCLOSE .

    ES              reduce using rule 40 (1adecl -> A1ARR ID EQ SOPEN vals SCLOSE .)
    FCLOSE          reduce using rule 40 (1adecl -> A1ARR ID EQ SOPEN vals SCLOSE .)


state 177

    (73) access -> ID OPEN expr COMA expr . CLOSE
    (64) expr -> expr . GTLT expr
    (65) expr -> expr . OR expr
    (90) pars -> expr . COMA pars
    (92) pars -> expr .

  ! shift/reduce conflict for CLOSE resolved as shift
    CLOSE           shift and go to state 167
    GTLT            shift and go to state 56
    OR              shift and go to state 57
    COMA            shift and go to state 179

  ! CLOSE           [ reduce using rule 92 (pars -> expr .) ]


state 178

    (90) pars -> expr COMA pars .

    CLOSE           reduce using rule 90 (pars -> expr COMA pars .)


state 179

    (90) pars -> expr COMA . pars
    (90) pars -> . expr COMA pars
    (91) pars -> . COMA pars
    (92) pars -> . expr
    (93) pars -> .
    (58) expr -> . oper
    (59) expr -> . ACONST
    (60) expr -> . LCONST
    (61) expr -> . ID
    (62) expr -> . NOT expr
    (63) expr -> . INCDEC ID
    (64) expr -> . expr GTLT expr
    (65) expr -> . expr OR expr
    (66) expr -> . OPEN expr CLOSE
    (67) oper -> . MOVE
    (68) oper -> . GET
    (69) oper -> . PUSH
    (70) oper -> . SIZE1 ID
    (71) oper -> . SIZE2 ID expr
    (72) oper -> . access
    (73) access -> . ID OPEN expr COMA expr CLOSE
    (74) access -> . ID OPEN expr CLOSE

    COMA            shift and go to state 148
    CLOSE           reduce using rule 93 (pars -> .)
    ACONST          shift and go to state 31
    LCONST          shift and go to state 32
    ID              shift and go to state 66
    NOT             shift and go to state 33
    INCDEC          shift and go to state 34
    OPEN            shift and go to state 20
    MOVE            shift and go to state 45
    GET             shift and go to state 46
    PUSH            shift and go to state 47
    SIZE1           shift and go to state 48
    SIZE2           shift and go to state 49

    expr                           shift and go to state 166
    pars                           shift and go to state 178
    oper                           shift and go to state 30
    access                         shift and go to state 67

state 180

    (84) fcall -> SOPEN vars SCLOSE EQ ID OPEN pars . CLOSE

    CLOSE           shift and go to state 183


state 181

    (47) arrs -> vals COMD arrs .

    SCLOSE          reduce using rule 47 (arrs -> vals COMD arrs .)


state 182

    (45) vals -> expr COMA vals .

    COMD            reduce using rule 45 (vals -> expr COMA vals .)
    SCLOSE          reduce using rule 45 (vals -> expr COMA vals .)


state 183

    (84) fcall -> SOPEN vars SCLOSE EQ ID OPEN pars CLOSE .

    ES              reduce using rule 84 (fcall -> SOPEN vars SCLOSE EQ ID OPEN pars CLOSE .)
    FCLOSE          reduce using rule 84 (fcall -> SOPEN vars SCLOSE EQ ID OPEN pars CLOSE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ES in state 50 resolved as shift
WARNING: shift/reduce conflict for ES in state 52 resolved as shift
WARNING: shift/reduce conflict for OPEN in state 66 resolved as shift
WARNING: shift/reduce conflict for FCLOSE in state 68 resolved as shift
WARNING: shift/reduce conflict for GTLT in state 69 resolved as shift
WARNING: shift/reduce conflict for OR in state 69 resolved as shift
WARNING: shift/reduce conflict for ES in state 83 resolved as shift
WARNING: shift/reduce conflict for GTLT in state 88 resolved as shift
WARNING: shift/reduce conflict for OR in state 88 resolved as shift
WARNING: shift/reduce conflict for GTLT in state 89 resolved as shift
WARNING: shift/reduce conflict for OR in state 89 resolved as shift
WARNING: shift/reduce conflict for GTLT in state 116 resolved as shift
WARNING: shift/reduce conflict for OR in state 116 resolved as shift
WARNING: shift/reduce conflict for ES in state 127 resolved as shift
WARNING: shift/reduce conflict for CLOSE in state 147 resolved as shift
WARNING: shift/reduce conflict for CLOSE in state 177 resolved as shift
WARNING: reduce/reduce conflict in state 19 resolved using rule (fvars -> <empty>)
WARNING: rejected rule (vars -> <empty>) in state 19
