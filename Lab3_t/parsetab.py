
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'A1ARR A2ARR ACONST AVAR CAVAR CLOSE CLVAR COMA COMD DO ELSE EQ ES EXTEND1 EXTEND2 FCLOSE FOPEN FUNCTION GET GTLT ID IF INCDEC L1ARR L2ARR LCONST LVAR MOVE NOT OPEN OR PUSH SCLOSE SIZE1 SIZE2 SOPEN UNDO WHILEprog : prog line es\n            | prog fdecl esprog : es : es es\n          | ESline : sent\n            | logic\n            | fcall\n            | group\n            | decl\n            | cdeclline : sent : ID EQ expr\n            | access EQ exprsent : EXTEND1 ID expr\n            | EXTEND2 ID expr exprsent : expr\n            | UNDOgroup : FOPEN lines line FCLOSE\n             | FOPEN lines FCLOSElines : lines line eslines : decl : 2ldecl\n            | 2adecl\n            | 1ldecl\n            | 1adecl\n            | lvdecl\n            | avdeclcdecl : cldecl\n             | cadeclcldecl : CLVAR ID EQ exprcadecl : CAVAR ID EQ exprlvdecl : LVAR ID\n              | LVAR ID EQ expravdecl : AVAR ID\n              | AVAR ID EQ expr1ldecl : L1ARR ID\n              | L1ARR ID EQ SOPEN vals SCLOSE1adecl : A1ARR ID\n              | A1ARR ID EQ SOPEN vals SCLOSE2ldecl : L2ARR ID\n              | L2ARR ID EQ SOPEN arrs SCLOSE2adecl : A2ARR ID\n              | A2ARR ID EQ SOPEN arrs SCLOSEvals : expr COMA vals\n            | exprarrs : vals COMD arrs\n            | COMD arrs\n            | valsarrs : fdecl : fovars FUNCTION ID fivars groupfovars : ID EQ exprfovars : SOPEN fvars SCLOSEfivars : OPEN fvars CLOSEfvars : ID EQ expr\n             | ID EQ expr COMA fvarsfvars : expr : oper\n            | ACONST\n            | LCONST\n            | ID\n            | NOT expr\n            | INCDEC ID\n            | expr GTLT expr\n            | expr OR expr\n            | OPEN expr CLOSEoper : MOVE\n            | GET\n            | PUSH\n            | SIZE1 ID\n            | SIZE2 ID expr\n            | accessaccess : ID OPEN expr COMA expr CLOSE\n              | ID OPEN expr CLOSElogic : cond\n             | loopcond : IF expr sent else\n            | IF expr group elseelse : ELSE sent\n            | ELSE groupelse : loop : WHILE expr DO sent\n            | WHILE expr DO groupfcall : SOPEN vars SCLOSE EQ ID OPEN pars CLOSE\n             | ID EQ ID OPEN pars CLOSEvars : ID COMA vars\n            | COMA vars\n            | IDvars : pars : expr COMA pars\n            | COMA pars\n            | exprpars : '
    
_lr_action_items = {'ID':([0,1,14,15,19,20,21,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,64,66,67,68,69,70,71,81,82,83,88,89,92,94,95,99,103,107,112,113,114,115,116,118,119,120,121,123,127,128,130,132,135,136,137,138,148,151,157,164,167,168,171,173,179,],[-3,11,59,60,62,66,-22,-58,-59,-60,66,70,66,66,73,74,75,76,77,78,79,80,-67,-68,-69,81,82,-1,-5,-2,84,85,66,66,66,66,66,66,98,-61,-72,102,-62,-63,106,-70,66,-4,-64,-65,66,98,66,-66,98,106,66,66,66,66,-71,145,66,66,-74,150,-21,85,106,66,66,66,66,66,66,145,66,66,-73,66,66,66,66,]),'EXTEND1':([0,1,21,30,31,32,45,46,47,50,51,52,66,67,68,69,70,71,81,83,88,89,99,107,116,121,127,130,167,],[-3,14,-22,-58,-59,-60,-67,-68,-69,-1,-5,-2,-61,-72,14,-62,-63,14,-70,-4,-64,-65,-66,14,-71,-74,-21,14,-73,]),'EXTEND2':([0,1,21,30,31,32,45,46,47,50,51,52,66,67,68,69,70,71,81,83,88,89,99,107,116,121,127,130,167,],[-3,15,-22,-58,-59,-60,-67,-68,-69,-1,-5,-2,-61,-72,15,-62,-63,15,-70,-4,-64,-65,-66,15,-71,-74,-21,15,-73,]),'UNDO':([0,1,21,30,31,32,45,46,47,50,51,52,66,67,68,69,70,71,81,83,88,89,99,107,116,121,127,130,167,],[-3,16,-22,-58,-59,-60,-67,-68,-69,-1,-5,-2,-61,-72,16,-62,-63,16,-70,-4,-64,-65,-66,16,-71,-74,-21,16,-73,]),'SOPEN':([0,1,21,50,51,52,68,83,108,109,110,111,127,],[-3,19,-22,-1,-5,-2,103,-4,135,136,137,138,-21,]),'FOPEN':([0,1,21,30,31,32,45,46,47,50,51,52,66,67,68,69,70,71,81,83,88,89,99,107,116,117,121,127,130,162,167,],[-3,21,-22,-58,-59,-60,-67,-68,-69,-1,-5,-2,-61,-72,21,-62,-63,21,-70,-4,-64,-65,-66,21,-71,21,-74,-21,21,-54,-73,]),'ACONST':([0,1,20,21,30,31,32,33,35,36,45,46,47,50,51,52,54,55,56,57,58,59,60,66,67,68,69,70,71,81,82,83,88,89,92,95,99,107,112,113,114,115,116,119,120,121,127,128,130,132,135,136,137,138,148,157,164,167,168,171,173,179,],[-3,31,31,-22,-58,-59,-60,31,31,31,-67,-68,-69,-1,-5,-2,31,31,31,31,31,31,31,-61,-72,31,-62,-63,31,-70,31,-4,-64,-65,31,31,-66,31,31,31,31,31,-71,31,31,-74,-21,31,31,31,31,31,31,31,31,31,31,-73,31,31,31,31,]),'LCONST':([0,1,20,21,30,31,32,33,35,36,45,46,47,50,51,52,54,55,56,57,58,59,60,66,67,68,69,70,71,81,82,83,88,89,92,95,99,107,112,113,114,115,116,119,120,121,127,128,130,132,135,136,137,138,148,157,164,167,168,171,173,179,],[-3,32,32,-22,-58,-59,-60,32,32,32,-67,-68,-69,-1,-5,-2,32,32,32,32,32,32,32,-61,-72,32,-62,-63,32,-70,32,-4,-64,-65,32,32,-66,32,32,32,32,32,-71,32,32,-74,-21,32,32,32,32,32,32,32,32,32,32,-73,32,32,32,32,]),'NOT':([0,1,20,21,30,31,32,33,35,36,45,46,47,50,51,52,54,55,56,57,58,59,60,66,67,68,69,70,71,81,82,83,88,89,92,95,99,107,112,113,114,115,116,119,120,121,127,128,130,132,135,136,137,138,148,157,164,167,168,171,173,179,],[-3,33,33,-22,-58,-59,-60,33,33,33,-67,-68,-69,-1,-5,-2,33,33,33,33,33,33,33,-61,-72,33,-62,-63,33,-70,33,-4,-64,-65,33,33,-66,33,33,33,33,33,-71,33,33,-74,-21,33,33,33,33,33,33,33,33,33,33,-73,33,33,33,33,]),'INCDEC':([0,1,20,21,30,31,32,33,35,36,45,46,47,50,51,52,54,55,56,57,58,59,60,66,67,68,69,70,71,81,82,83,88,89,92,95,99,107,112,113,114,115,116,119,120,121,127,128,130,132,135,136,137,138,148,157,164,167,168,171,173,179,],[-3,34,34,-22,-58,-59,-60,34,34,34,-67,-68,-69,-1,-5,-2,34,34,34,34,34,34,34,-61,-72,34,-62,-63,34,-70,34,-4,-64,-65,34,34,-66,34,34,34,34,34,-71,34,34,-74,-21,34,34,34,34,34,34,34,34,34,34,-73,34,34,34,34,]),'OPEN':([0,1,11,20,21,30,31,32,33,35,36,45,46,47,50,51,52,54,55,56,57,58,59,60,66,67,68,69,70,71,81,82,83,84,85,88,89,92,95,99,102,106,107,112,113,114,115,116,119,120,121,127,128,130,132,135,136,137,138,148,150,157,164,167,168,171,173,179,],[-3,20,55,20,-22,-58,-59,-60,20,20,20,-67,-68,-69,-1,-5,-2,20,20,20,20,20,20,20,55,-72,20,-62,-63,20,-70,20,-4,118,119,-64,-65,20,20,-66,55,55,20,20,20,20,20,-71,20,20,-74,-21,20,20,20,20,20,20,20,20,168,20,20,-73,20,20,20,20,]),'IF':([0,1,21,50,51,52,68,83,127,],[-3,35,-22,-1,-5,-2,35,-4,-21,]),'WHILE':([0,1,21,50,51,52,68,83,127,],[-3,36,-22,-1,-5,-2,36,-4,-21,]),'L2ARR':([0,1,21,50,51,52,68,83,127,],[-3,37,-22,-1,-5,-2,37,-4,-21,]),'A2ARR':([0,1,21,50,51,52,68,83,127,],[-3,38,-22,-1,-5,-2,38,-4,-21,]),'L1ARR':([0,1,21,50,51,52,68,83,127,],[-3,39,-22,-1,-5,-2,39,-4,-21,]),'A1ARR':([0,1,21,50,51,52,68,83,127,],[-3,40,-22,-1,-5,-2,40,-4,-21,]),'LVAR':([0,1,21,50,51,52,68,83,127,],[-3,41,-22,-1,-5,-2,41,-4,-21,]),'AVAR':([0,1,21,50,51,52,68,83,127,],[-3,42,-22,-1,-5,-2,42,-4,-21,]),'CLVAR':([0,1,21,50,51,52,68,83,127,],[-3,43,-22,-1,-5,-2,43,-4,-21,]),'CAVAR':([0,1,21,50,51,52,68,83,127,],[-3,44,-22,-1,-5,-2,44,-4,-21,]),'MOVE':([0,1,20,21,30,31,32,33,35,36,45,46,47,50,51,52,54,55,56,57,58,59,60,66,67,68,69,70,71,81,82,83,88,89,92,95,99,107,112,113,114,115,116,119,120,121,127,128,130,132,135,136,137,138,148,157,164,167,168,171,173,179,],[-3,45,45,-22,-58,-59,-60,45,45,45,-67,-68,-69,-1,-5,-2,45,45,45,45,45,45,45,-61,-72,45,-62,-63,45,-70,45,-4,-64,-65,45,45,-66,45,45,45,45,45,-71,45,45,-74,-21,45,45,45,45,45,45,45,45,45,45,-73,45,45,45,45,]),'GET':([0,1,20,21,30,31,32,33,35,36,45,46,47,50,51,52,54,55,56,57,58,59,60,66,67,68,69,70,71,81,82,83,88,89,92,95,99,107,112,113,114,115,116,119,120,121,127,128,130,132,135,136,137,138,148,157,164,167,168,171,173,179,],[-3,46,46,-22,-58,-59,-60,46,46,46,-67,-68,-69,-1,-5,-2,46,46,46,46,46,46,46,-61,-72,46,-62,-63,46,-70,46,-4,-64,-65,46,46,-66,46,46,46,46,46,-71,46,46,-74,-21,46,46,46,46,46,46,46,46,46,46,-73,46,46,46,46,]),'PUSH':([0,1,20,21,30,31,32,33,35,36,45,46,47,50,51,52,54,55,56,57,58,59,60,66,67,68,69,70,71,81,82,83,88,89,92,95,99,107,112,113,114,115,116,119,120,121,127,128,130,132,135,136,137,138,148,157,164,167,168,171,173,179,],[-3,47,47,-22,-58,-59,-60,47,47,47,-67,-68,-69,-1,-5,-2,47,47,47,47,47,47,47,-61,-72,47,-62,-63,47,-70,47,-4,-64,-65,47,47,-66,47,47,47,47,47,-71,47,47,-74,-21,47,47,47,47,47,47,47,47,47,47,-73,47,47,47,47,]),'SIZE1':([0,1,20,21,30,31,32,33,35,36,45,46,47,50,51,52,54,55,56,57,58,59,60,66,67,68,69,70,71,81,82,83,88,89,92,95,99,107,112,113,114,115,116,119,120,121,127,128,130,132,135,136,137,138,148,157,164,167,168,171,173,179,],[-3,48,48,-22,-58,-59,-60,48,48,48,-67,-68,-69,-1,-5,-2,48,48,48,48,48,48,48,-61,-72,48,-62,-63,48,-70,48,-4,-64,-65,48,48,-66,48,48,48,48,48,-71,48,48,-74,-21,48,48,48,48,48,48,48,48,48,48,-73,48,48,48,48,]),'SIZE2':([0,1,20,21,30,31,32,33,35,36,45,46,47,50,51,52,54,55,56,57,58,59,60,66,67,68,69,70,71,81,82,83,88,89,92,95,99,107,112,113,114,115,116,119,120,121,127,128,130,132,135,136,137,138,148,157,164,167,168,171,173,179,],[-3,49,49,-22,-58,-59,-60,49,49,49,-67,-68,-69,-1,-5,-2,49,49,49,49,49,49,49,-61,-72,49,-62,-63,49,-70,49,-4,-64,-65,49,49,-66,49,49,49,49,49,-71,49,49,-74,-21,49,49,49,49,49,49,49,49,49,49,-73,49,49,49,49,]),'$end':([0,1,50,51,52,83,],[-3,0,-1,-5,-2,-4,]),'ES':([0,1,2,3,4,5,6,7,8,9,11,12,13,16,17,18,21,22,23,24,25,26,27,28,29,30,31,32,45,46,47,50,51,52,66,67,68,69,70,73,74,75,76,77,78,81,83,85,86,88,89,90,91,99,100,101,102,104,105,106,116,121,122,126,127,129,131,133,134,139,140,141,142,143,152,153,154,163,167,170,174,175,176,183,],[-3,-12,51,51,-6,-7,-8,-9,-10,-11,-61,-17,-72,-18,-75,-76,-22,-23,-24,-25,-26,-27,-28,-29,-30,-58,-59,-60,-67,-68,-69,51,-5,51,-61,-72,-12,-62,-63,-41,-43,-37,-39,-33,-35,-70,51,-61,-13,-64,-65,-14,-15,-66,51,-20,-61,-81,-81,-61,-71,-74,-16,-19,51,-77,-78,-82,-83,-34,-36,-31,-32,-51,-13,-79,-80,-85,-73,-42,-44,-38,-40,-84,]),'FCLOSE':([4,5,6,7,8,9,12,13,16,17,18,21,22,23,24,25,26,27,28,29,30,31,32,45,46,47,51,66,67,68,69,70,73,74,75,76,77,78,81,83,85,88,89,90,91,99,100,101,102,104,105,106,116,121,122,126,127,129,131,133,134,139,140,141,142,152,153,154,163,167,170,174,175,176,183,],[-6,-7,-8,-9,-10,-11,-17,-72,-18,-75,-76,-22,-23,-24,-25,-26,-27,-28,-29,-30,-58,-59,-60,-67,-68,-69,-5,-61,-72,101,-62,-63,-41,-43,-37,-39,-33,-35,-70,-4,-61,-64,-65,-14,-15,-66,126,-20,-61,-81,-81,-61,-71,-74,-16,-19,-21,-77,-78,-82,-83,-34,-36,-31,-32,-13,-79,-80,-85,-73,-42,-44,-38,-40,-84,]),'FUNCTION':([10,30,31,32,45,46,47,66,67,69,70,81,85,86,88,89,96,99,116,121,167,],[53,-58,-59,-60,-67,-68,-69,-61,-72,-62,-63,-70,-61,-52,-64,-65,-53,-66,-71,-74,-73,]),'EQ':([11,13,62,73,74,75,76,77,78,79,80,93,102,106,121,145,167,],[54,58,95,108,109,110,111,112,113,114,115,123,128,132,-74,95,-73,]),'GTLT':([11,12,13,30,31,32,45,46,47,65,66,67,69,70,71,72,81,85,86,87,88,89,90,91,92,99,102,106,116,121,122,125,139,140,141,142,147,149,152,158,166,167,177,],[-61,56,-72,-58,-59,-60,-67,-68,-69,56,-61,-72,56,-63,56,56,-70,-61,56,56,56,56,56,56,56,-66,-61,-61,56,-74,56,56,56,56,56,56,56,56,56,56,56,-73,56,]),'OR':([11,12,13,30,31,32,45,46,47,65,66,67,69,70,71,72,81,85,86,87,88,89,90,91,92,99,102,106,116,121,122,125,139,140,141,142,147,149,152,158,166,167,177,],[-61,57,-72,-58,-59,-60,-67,-68,-69,57,-61,-72,57,-63,57,57,-70,-61,57,57,57,57,57,57,57,-66,-61,-61,57,-74,57,57,57,57,57,57,57,57,57,57,57,-73,57,]),'ELSE':([12,13,16,30,31,32,45,46,47,66,67,69,70,81,88,89,90,91,99,101,104,105,106,116,121,122,126,152,167,],[-17,-72,-18,-58,-59,-60,-67,-68,-69,-61,-72,-62,-63,-70,-64,-65,-14,-15,-66,-20,130,130,-61,-71,-74,-16,-19,-13,-73,]),'COMA':([19,30,31,32,45,46,47,62,64,66,67,69,70,81,87,88,89,94,98,99,103,116,119,121,125,147,148,158,164,166,167,168,177,179,],[64,-58,-59,-60,-67,-68,-69,94,64,-61,-72,-62,-63,-70,120,-64,-65,64,94,-66,64,-71,148,-74,151,164,148,173,148,179,-73,148,179,148,]),'SCLOSE':([19,30,31,32,45,46,47,61,62,63,64,66,67,69,70,81,88,89,94,97,98,99,103,116,121,124,125,135,136,151,155,156,157,158,159,160,161,167,169,171,172,181,182,],[-57,-58,-59,-60,-67,-68,-69,93,-88,96,-89,-61,-72,-62,-63,-70,-64,-65,-89,-87,-88,-66,-89,-71,-74,-86,-55,-50,-50,-57,170,-49,-50,-46,174,175,176,-73,-56,-50,-48,-47,-45,]),'CLOSE':([30,31,32,45,46,47,65,66,67,69,70,81,87,88,89,99,116,118,119,121,125,144,146,147,148,149,151,164,165,166,167,168,169,177,178,179,180,],[-58,-59,-60,-67,-68,-69,99,-61,-72,-62,-63,-70,121,-64,-65,-66,-71,-57,-93,-74,-55,162,163,121,-93,167,-57,-93,-91,-92,-73,-93,-56,167,-90,-93,183,]),'DO':([30,31,32,45,46,47,66,67,69,70,72,81,88,89,99,116,121,167,],[-58,-59,-60,-67,-68,-69,-61,-72,-62,-63,107,-70,-64,-65,-66,-71,-74,-73,]),'COMD':([30,31,32,45,46,47,66,67,69,70,81,88,89,99,116,121,135,136,156,157,158,167,171,182,],[-58,-59,-60,-67,-68,-69,-61,-72,-62,-63,-70,-64,-65,-66,-71,-74,157,157,171,157,-46,-73,157,-45,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'prog':([0,],[1,]),'line':([1,68,],[2,100,]),'fdecl':([1,],[3,]),'sent':([1,68,71,107,130,],[4,4,104,133,153,]),'logic':([1,68,],[5,5,]),'fcall':([1,68,],[6,6,]),'group':([1,68,71,107,117,130,],[7,7,105,134,143,154,]),'decl':([1,68,],[8,8,]),'cdecl':([1,68,],[9,9,]),'fovars':([1,],[10,]),'expr':([1,20,33,35,36,54,55,56,57,58,59,60,68,71,82,92,95,107,112,113,114,115,119,120,128,130,132,135,136,137,138,148,157,164,168,171,173,179,],[12,65,69,71,72,86,87,88,89,90,91,92,12,12,116,122,125,12,139,140,141,142,147,149,152,12,152,158,158,158,158,166,158,177,166,158,158,166,]),'access':([1,20,33,35,36,54,55,56,57,58,59,60,68,71,82,92,95,107,112,113,114,115,119,120,128,130,132,135,136,137,138,148,157,164,168,171,173,179,],[13,67,67,67,67,67,67,67,67,67,67,67,13,13,67,67,67,13,67,67,67,67,67,67,67,13,67,67,67,67,67,67,67,67,67,67,67,67,]),'cond':([1,68,],[17,17,]),'loop':([1,68,],[18,18,]),'2ldecl':([1,68,],[22,22,]),'2adecl':([1,68,],[23,23,]),'1ldecl':([1,68,],[24,24,]),'1adecl':([1,68,],[25,25,]),'lvdecl':([1,68,],[26,26,]),'avdecl':([1,68,],[27,27,]),'cldecl':([1,68,],[28,28,]),'cadecl':([1,68,],[29,29,]),'oper':([1,20,33,35,36,54,55,56,57,58,59,60,68,71,82,92,95,107,112,113,114,115,119,120,128,130,132,135,136,137,138,148,157,164,168,171,173,179,],[30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,]),'es':([2,3,50,52,83,100,127,],[50,52,83,83,83,127,83,]),'vars':([19,64,94,103,],[61,97,124,61,]),'fvars':([19,118,151,],[63,144,169,]),'lines':([21,],[68,]),'fivars':([84,],[117,]),'else':([104,105,],[129,131,]),'pars':([119,148,164,168,179,],[146,165,178,180,178,]),'arrs':([135,136,157,171,],[155,159,172,181,]),'vals':([135,136,137,138,157,171,173,],[156,156,160,161,156,156,182,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> prog","S'",1,None,None,None),
  ('prog -> prog line es','prog',3,'p_prog','yacc.py',234),
  ('prog -> prog fdecl es','prog',3,'p_prog','yacc.py',235),
  ('prog -> <empty>','prog',0,'p_prog_empty','yacc.py',252),
  ('es -> es es','es',2,'p_es','yacc.py',256),
  ('es -> ES','es',1,'p_es','yacc.py',257),
  ('line -> sent','line',1,'p_line','yacc.py',260),
  ('line -> logic','line',1,'p_line','yacc.py',261),
  ('line -> fcall','line',1,'p_line','yacc.py',262),
  ('line -> group','line',1,'p_line','yacc.py',263),
  ('line -> decl','line',1,'p_line','yacc.py',264),
  ('line -> cdecl','line',1,'p_line','yacc.py',265),
  ('line -> <empty>','line',0,'p_line_empty','yacc.py',269),
  ('sent -> ID EQ expr','sent',3,'p_sent_eq','yacc.py',273),
  ('sent -> access EQ expr','sent',3,'p_sent_eq','yacc.py',274),
  ('sent -> EXTEND1 ID expr','sent',3,'p_sent_extend','yacc.py',278),
  ('sent -> EXTEND2 ID expr expr','sent',4,'p_sent_extend','yacc.py',279),
  ('sent -> expr','sent',1,'p_sent_exun','yacc.py',283),
  ('sent -> UNDO','sent',1,'p_sent_exun','yacc.py',284),
  ('group -> FOPEN lines line FCLOSE','group',4,'p_group','yacc.py',288),
  ('group -> FOPEN lines FCLOSE','group',3,'p_group','yacc.py',289),
  ('lines -> lines line es','lines',3,'p_lines','yacc.py',309),
  ('lines -> <empty>','lines',0,'p_lines_empty','yacc.py',326),
  ('decl -> 2ldecl','decl',1,'p_decl','yacc.py',332),
  ('decl -> 2adecl','decl',1,'p_decl','yacc.py',333),
  ('decl -> 1ldecl','decl',1,'p_decl','yacc.py',334),
  ('decl -> 1adecl','decl',1,'p_decl','yacc.py',335),
  ('decl -> lvdecl','decl',1,'p_decl','yacc.py',336),
  ('decl -> avdecl','decl',1,'p_decl','yacc.py',337),
  ('cdecl -> cldecl','cdecl',1,'p_cdecl','yacc.py',341),
  ('cdecl -> cadecl','cdecl',1,'p_cdecl','yacc.py',342),
  ('cldecl -> CLVAR ID EQ expr','cldecl',4,'p_cldecl','yacc.py',348),
  ('cadecl -> CAVAR ID EQ expr','cadecl',4,'p_cadecl','yacc.py',352),
  ('lvdecl -> LVAR ID','lvdecl',2,'p_lvdecl','yacc.py',358),
  ('lvdecl -> LVAR ID EQ expr','lvdecl',4,'p_lvdecl','yacc.py',359),
  ('avdecl -> AVAR ID','avdecl',2,'p_avdecl','yacc.py',366),
  ('avdecl -> AVAR ID EQ expr','avdecl',4,'p_avdecl','yacc.py',367),
  ('1ldecl -> L1ARR ID','1ldecl',2,'p_1ldecl','yacc.py',376),
  ('1ldecl -> L1ARR ID EQ SOPEN vals SCLOSE','1ldecl',6,'p_1ldecl','yacc.py',377),
  ('1adecl -> A1ARR ID','1adecl',2,'p_1adecl','yacc.py',384),
  ('1adecl -> A1ARR ID EQ SOPEN vals SCLOSE','1adecl',6,'p_1adecl','yacc.py',385),
  ('2ldecl -> L2ARR ID','2ldecl',2,'p_2ldecl','yacc.py',392),
  ('2ldecl -> L2ARR ID EQ SOPEN arrs SCLOSE','2ldecl',6,'p_2ldecl','yacc.py',393),
  ('2adecl -> A2ARR ID','2adecl',2,'p_2adecl','yacc.py',400),
  ('2adecl -> A2ARR ID EQ SOPEN arrs SCLOSE','2adecl',6,'p_2adecl','yacc.py',401),
  ('vals -> expr COMA vals','vals',3,'p_vals','yacc.py',408),
  ('vals -> expr','vals',1,'p_vals','yacc.py',409),
  ('arrs -> vals COMD arrs','arrs',3,'p_arrs','yacc.py',416),
  ('arrs -> COMD arrs','arrs',2,'p_arrs','yacc.py',417),
  ('arrs -> vals','arrs',1,'p_arrs','yacc.py',418),
  ('arrs -> <empty>','arrs',0,'p_arrs_empty','yacc.py',427),
  ('fdecl -> fovars FUNCTION ID fivars group','fdecl',5,'p_fdecl','yacc.py',433),
  ('fovars -> ID EQ expr','fovars',3,'p_fovars','yacc.py',438),
  ('fovars -> SOPEN fvars SCLOSE','fovars',3,'p_fovars_br','yacc.py',443),
  ('fivars -> OPEN fvars CLOSE','fivars',3,'p_fivars','yacc.py',449),
  ('fvars -> ID EQ expr','fvars',3,'p_fvars','yacc.py',455),
  ('fvars -> ID EQ expr COMA fvars','fvars',5,'p_fvars','yacc.py',456),
  ('fvars -> <empty>','fvars',0,'p_fvars_empty','yacc.py',467),
  ('expr -> oper','expr',1,'p_expr','yacc.py',473),
  ('expr -> ACONST','expr',1,'p_expr','yacc.py',474),
  ('expr -> LCONST','expr',1,'p_expr','yacc.py',475),
  ('expr -> ID','expr',1,'p_expr','yacc.py',476),
  ('expr -> NOT expr','expr',2,'p_expr','yacc.py',477),
  ('expr -> INCDEC ID','expr',2,'p_expr','yacc.py',478),
  ('expr -> expr GTLT expr','expr',3,'p_expr','yacc.py',479),
  ('expr -> expr OR expr','expr',3,'p_expr','yacc.py',480),
  ('expr -> OPEN expr CLOSE','expr',3,'p_expr','yacc.py',481),
  ('oper -> MOVE','oper',1,'p_oper','yacc.py',509),
  ('oper -> GET','oper',1,'p_oper','yacc.py',510),
  ('oper -> PUSH','oper',1,'p_oper','yacc.py',511),
  ('oper -> SIZE1 ID','oper',2,'p_oper','yacc.py',512),
  ('oper -> SIZE2 ID expr','oper',3,'p_oper','yacc.py',513),
  ('oper -> access','oper',1,'p_oper','yacc.py',514),
  ('access -> ID OPEN expr COMA expr CLOSE','access',6,'p_access','yacc.py',531),
  ('access -> ID OPEN expr CLOSE','access',4,'p_access','yacc.py',532),
  ('logic -> cond','logic',1,'p_logic','yacc.py',542),
  ('logic -> loop','logic',1,'p_logic','yacc.py',543),
  ('cond -> IF expr sent else','cond',4,'p_cond','yacc.py',547),
  ('cond -> IF expr group else','cond',4,'p_cond','yacc.py',548),
  ('else -> ELSE sent','else',2,'p_else','yacc.py',555),
  ('else -> ELSE group','else',2,'p_else','yacc.py',556),
  ('else -> <empty>','else',0,'p_else_empty','yacc.py',560),
  ('loop -> WHILE expr DO sent','loop',4,'p_loop','yacc.py',564),
  ('loop -> WHILE expr DO group','loop',4,'p_loop','yacc.py',565),
  ('fcall -> SOPEN vars SCLOSE EQ ID OPEN pars CLOSE','fcall',8,'p_fcall','yacc.py',571),
  ('fcall -> ID EQ ID OPEN pars CLOSE','fcall',6,'p_fcall','yacc.py',572),
  ('vars -> ID COMA vars','vars',3,'p_vars','yacc.py',576),
  ('vars -> COMA vars','vars',2,'p_vars','yacc.py',577),
  ('vars -> ID','vars',1,'p_vars','yacc.py',578),
  ('vars -> <empty>','vars',0,'p_vars_empty','yacc.py',587),
  ('pars -> expr COMA pars','pars',3,'p_pars','yacc.py',591),
  ('pars -> COMA pars','pars',2,'p_pars','yacc.py',592),
  ('pars -> expr','pars',1,'p_pars','yacc.py',593),
  ('pars -> <empty>','pars',0,'p_pars_empty','yacc.py',602),
]
